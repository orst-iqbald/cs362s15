Assignment 4
make instructions:
To compile and run both testers use: "make randomtests"

Both testers can also be compiled and run individually.
randomtestadventurer: "make randomtestadventurer.out"
randomtestcard: "make randomtestcard.out"


randomtestadventurer.c(Adventurer Card):
For this tester I randomly assigned a number of players from 2-4, selected one of those players at random to be the
current player, and used the intializeGame() function to initialize a game. I then randomly assigned the number of
cards in the current players deck and assigned values to those cards randomly from the list of possible ENUM Card 
values. The player then drew a hand of 5 cards from that deck, tallied the initial number of treasure cards in their 
hand, and the number of treasure cards remaining in the deck. The tester then uses a series of nested conditionals
to check whether or not the number of treasure cards added to the players hand is correct based on the number of
treasure cards that were available from their deck.

Running this tester easily found the bugs I inserted into this function previously. The first bug changed the while loop 
for drawntreasure < 2 to drawntreasure <= 2. The second bug changed the while loop while(z-1>=0) to while(z-1 > 0).
I also found something unusual within this function when compared to the functions for other action cards. While all 
other action cards call the discardCard() function at the end to remove the action card from the players hand, this 
one function does not. As a result, when the card is played, it isn't actually removed from the players hand.
Also, when the tester runs, all tests passed with expected results unless the player had 0 treasure cards in their deck. 
In this case, the resulting count of treasure cards in their hand was correct, but the handCount always seemed to fail. 
I checked my implementation of the tester and my tester code is correct so I can only logically assume that the bug is 
in the dominion.c code.

When this test was run, the coverage in the dominion.c file was 22.20% of 581 lines. Examining the dominion.c.gcov
file reveals that there was complete branch and statement coverage for the function being tested.

randomtestcard.c(Smithy Card):
For this tester I randomly assigned a number of players from 2-4, selected one of those players at random to be the
current player, and used the intializeGame() function to initialize a game. I then randomly assigned a number of cards
to the selected players hand and placed a smithy card in their hand in a random position. The card was then played
and the handCount was checked to ensure that the resulting hand contained the correct number of cards.

This test found the bug that I had previously inserted this function in the dominion.c file. The bug caused the player
to add 1 extra card to their hand by using a <= in the for loop in place of the <.  

When this test was run, the coverage in the dominion.c file was 24.96% of 581 lines. Examining the dominion.c.gcov
file reveals that there was complete branch and statement coverage for the function being tested.