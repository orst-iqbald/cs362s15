        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/****************************
        -:    2: * Unit Test for buyCard()
        -:    3: ***************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        2:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   16:	int p, r;
        2:   17:	r = initializeGame(2, k, 1000, &G);	
        -:   18:	
        2:   19:	printf("Testing buyCard...\n");
        -:   20:
        -:   21:	//Test with numBuys ==0
        2:   22:	G.numBuys = 0;
        2:   23:	p = buyCard(1, &G);
        2:   24:	assert(p == -1);
        2:   25:	printf("Passed test 1\n");
        -:   26:
        -:   27:	//Test with supply pile empty
        2:   28:	G.numBuys = 1;
        2:   29:	G.supplyCount[1] = 0;
        2:   30:	p = buyCard(1, &G);
        2:   31:	assert(p == -1);
        2:   32:	printf("Passed test 2\n");
        -:   33:	
        -:   34:	//Test with not enough coins
        2:   35:	G.numBuys = 1;
        2:   36:	G.coins = 0;
        2:   37:	G.supplyCount[1] = 2;
        2:   38:	p=buyCard(1, &G);
        2:   39:	assert (p== -1);
        2:   40:	printf("Passed test 3\n");
        -:   41:	
        -:   42:	//Test with each player
        8:   43:	for (i = 0; i < 3; i ++) {
        6:   44:		G.whoseTurn = i;
        6:   45:		G.numBuys = 1;
        6:   46:		G.supplyCount[1] = 1;
        6:   47:		G.coins = 20;
        6:   48:		p = buyCard(1, &G);
        6:   49:		assert (p != -1);
        -:   50:	}
        2:   51:	printf("Passed test 4\n");
        -:   52:
        -:   53:	//Make sure coins decrease
        2:   54:	G.numBuys = 1;
        2:   55:	G.supplyCount[1] = 2;
        2:   56:	G.coins = 20;
        2:   57:	p = buyCard(1, &G);
        2:   58:	i = getCost(1);
        2:   59:	assert (G.coins == 18);
        2:   60:	printf("Passed test 5\n");
        -:   61:
        -:   62:	//Make sure buys decrease
        2:   63:	G.numBuys = 2;
        2:   64:	G.supplyCount[1] = 2;
        2:   65:	G.coins = 20;
        2:   66:	p = buyCard(1, &G);
        2:   67:	assert (G.numBuys == 1);
        2:   68:	printf("Passed test 6\n");	
        -:   69:
        2:   70:	return 0;
        -:   71:}
