Results for randomtestcard:

Iteration 0: Player 1 has 108 cards in hand, 113 in deck, 29 in discard, 9 actions, and the Great Hall in hand position 72.
Iteration 0 - cardEffectGreatHall(): PASSed all tests.

Iteration 1: Player 0 has 113 cards in hand, 16 in deck, 55 in discard, 9 actions, and the Great Hall in hand position 42.
Iteration 1 - cardEffectGreatHall(): PASSed all tests.

Iteration 2: Player 0 has 157 cards in hand, 154 in deck, 121 in discard, 9 actions, and the Great Hall in hand position 48.
Iteration 2 - cardEffectGreatHall(): PASSed all tests.

Iteration 3: Player 0 has 165 cards in hand, 36 in deck, 84 in discard, 8 actions, and the Great Hall in hand position 135.
Iteration 3 - cardEffectGreatHall(): PASSed all tests.

Iteration 4: Player 1 has 63 cards in hand, 159 in deck, 91 in discard, 7 actions, and the Great Hall in hand position 2.
Iteration 4 - cardEffectGreatHall(): PASSed all tests.

Iteration 5: Player 0 has 114 cards in hand, 88 in deck, 19 in discard, 2 actions, and the Great Hall in hand position 8.
Iteration 5 - cardEffectGreatHall(): PASSed all tests.

Iteration 6: Player 0 has 92 cards in hand, 119 in deck, 148 in discard, 5 actions, and the Great Hall in hand position 37.
Iteration 6 - cardEffectGreatHall(): PASSed all tests.

Iteration 7: Player 0 has 77 cards in hand, 164 in deck, 88 in discard, 7 actions, and the Great Hall in hand position 10.
Iteration 7 - cardEffectGreatHall(): PASSed all tests.

Iteration 8: Player 0 has 89 cards in hand, 151 in deck, 165 in discard, 1 actions, and the Great Hall in hand position 82.
Iteration 8 - cardEffectGreatHall(): PASSed all tests.

Iteration 9: Player 1 has 153 cards in hand, 143 in deck, 43 in discard, 6 actions, and the Great Hall in hand position 63.
Iteration 9 - cardEffectGreatHall(): PASSed all tests.

Iteration 10: Player 1 has 124 cards in hand, 107 in deck, 76 in discard, 5 actions, and the Great Hall in hand position 107.
Iteration 10 - cardEffectGreatHall(): PASSed all tests.

Iteration 11: Player 1 has 109 cards in hand, 85 in deck, 2 in discard, 8 actions, and the Great Hall in hand position 77.
Iteration 11 - cardEffectGreatHall(): PASSed all tests.

Iteration 12: Player 1 has 98 cards in hand, 165 in deck, 102 in discard, 7 actions, and the Great Hall in hand position 70.
Iteration 12 - cardEffectGreatHall(): PASSed all tests.

Iteration 13: Player 0 has 163 cards in hand, 79 in deck, 11 in discard, 1 actions, and the Great Hall in hand position 70.
Iteration 13 - cardEffectGreatHall(): PASSed all tests.

Iteration 14: Player 0 has 117 cards in hand, 152 in deck, 95 in discard, 4 actions, and the Great Hall in hand position 69.
Iteration 14 - cardEffectGreatHall(): PASSed all tests.

Iteration 15: Player 1 has 99 cards in hand, 67 in deck, 116 in discard, 1 actions, and the Great Hall in hand position 86.
Iteration 15 - cardEffectGreatHall(): PASSed all tests.

Iteration 16: Player 1 has 27 cards in hand, 111 in deck, 32 in discard, 3 actions, and the Great Hall in hand position 2.
Iteration 16 - cardEffectGreatHall(): PASSed all tests.

Iteration 17: Player 1 has 166 cards in hand, 18 in deck, 123 in discard, 1 actions, and the Great Hall in hand position 127.
Iteration 17 - cardEffectGreatHall(): PASSed all tests.

Iteration 18: Player 1 has 136 cards in hand, 54 in deck, 118 in discard, 4 actions, and the Great Hall in hand position 32.
Iteration 18 - cardEffectGreatHall(): PASSed all tests.

Iteration 19: Player 0 has 125 cards in hand, 43 in deck, 124 in discard, 6 actions, and the Great Hall in hand position 28.
Iteration 19 - cardEffectGreatHall(): PASSed all tests.

Iteration 20: Player 0 has 158 cards in hand, 127 in deck, 98 in discard, 1 actions, and the Great Hall in hand position 6.
Iteration 20 - cardEffectGreatHall(): PASSed all tests.

Iteration 21: Player 1 has 79 cards in hand, 159 in deck, 140 in discard, 10 actions, and the Great Hall in hand position 20.
Iteration 21 - cardEffectGreatHall(): PASSed all tests.

Iteration 22: Player 0 has 144 cards in hand, 58 in deck, 150 in discard, 8 actions, and the Great Hall in hand position 82.
Iteration 22 - cardEffectGreatHall(): PASSed all tests.

Iteration 23: Player 0 has 28 cards in hand, 60 in deck, 94 in discard, 10 actions, and the Great Hall in hand position 14.
Iteration 23 - cardEffectGreatHall(): PASSed all tests.

Iteration 24: Player 0 has 64 cards in hand, 139 in deck, 73 in discard, 10 actions, and the Great Hall in hand position 44.
Iteration 24 - cardEffectGreatHall(): PASSed all tests.

Iteration 25: Player 1 has 79 cards in hand, 151 in deck, 81 in discard, 2 actions, and the Great Hall in hand position 70.
Iteration 25 - cardEffectGreatHall(): PASSed all tests.

Iteration 26: Player 0 has 156 cards in hand, 71 in deck, 34 in discard, 4 actions, and the Great Hall in hand position 134.
Iteration 26 - cardEffectGreatHall(): PASSed all tests.

Iteration 27: Player 0 has 63 cards in hand, 14 in deck, 111 in discard, 3 actions, and the Great Hall in hand position 59.
Iteration 27 - cardEffectGreatHall(): PASSed all tests.

Iteration 28: Player 0 has 58 cards in hand, 71 in deck, 96 in discard, 9 actions, and the Great Hall in hand position 39.
Iteration 28 - cardEffectGreatHall(): PASSed all tests.

Iteration 29: Player 0 has 132 cards in hand, 72 in deck, 121 in discard, 7 actions, and the Great Hall in hand position 6.
Iteration 29 - cardEffectGreatHall(): PASSed all tests.

Iteration 30: Player 1 has 139 cards in hand, 159 in deck, 66 in discard, 4 actions, and the Great Hall in hand position 138.
Iteration 30 - cardEffectGreatHall(): PASSed all tests.

Iteration 31: Player 0 has 73 cards in hand, 95 in deck, 59 in discard, 6 actions, and the Great Hall in hand position 54.
Iteration 31 - cardEffectGreatHall(): PASSed all tests.

Iteration 32: Player 1 has 51 cards in hand, 31 in deck, 142 in discard, 2 actions, and the Great Hall in hand position 8.
Iteration 32 - cardEffectGreatHall(): PASSed all tests.

Iteration 33: Player 0 has 141 cards in hand, 113 in deck, 78 in discard, 7 actions, and the Great Hall in hand position 133.
Iteration 33 - cardEffectGreatHall(): PASSed all tests.

Iteration 34: Player 1 has 139 cards in hand, 15 in deck, 141 in discard, 2 actions, and the Great Hall in hand position 48.
Iteration 34 - cardEffectGreatHall(): PASSed all tests.

Iteration 35: Player 0 has 61 cards in hand, 24 in deck, 59 in discard, 4 actions, and the Great Hall in hand position 40.
Iteration 35 - cardEffectGreatHall(): PASSed all tests.

Iteration 36: Player 1 has 32 cards in hand, 32 in deck, 24 in discard, 8 actions, and the Great Hall in hand position 17.
Iteration 36 - cardEffectGreatHall(): PASSed all tests.

Iteration 37: Player 1 has 164 cards in hand, 40 in deck, 29 in discard, 1 actions, and the Great Hall in hand position 11.
Iteration 37 - cardEffectGreatHall(): PASSed all tests.

Iteration 38: Player 0 has 91 cards in hand, 109 in deck, 77 in discard, 6 actions, and the Great Hall in hand position 33.
Iteration 38 - cardEffectGreatHall(): PASSed all tests.

Iteration 39: Player 1 has 26 cards in hand, 39 in deck, 68 in discard, 3 actions, and the Great Hall in hand position 18.
Iteration 39 - cardEffectGreatHall(): PASSed all tests.

Iteration 40: Player 0 has 33 cards in hand, 37 in deck, 143 in discard, 2 actions, and the Great Hall in hand position 14.
Iteration 40 - cardEffectGreatHall(): PASSed all tests.

Iteration 41: Player 1 has 23 cards in hand, 152 in deck, 113 in discard, 1 actions, and the Great Hall in hand position 17.
Iteration 41 - cardEffectGreatHall(): PASSed all tests.

Iteration 42: Player 1 has 117 cards in hand, 43 in deck, 43 in discard, 8 actions, and the Great Hall in hand position 9.
Iteration 42 - cardEffectGreatHall(): PASSed all tests.

Iteration 43: Player 0 has 100 cards in hand, 130 in deck, 18 in discard, 1 actions, and the Great Hall in hand position 23.
Iteration 43 - cardEffectGreatHall(): PASSed all tests.

Iteration 44: Player 1 has 43 cards in hand, 40 in deck, 125 in discard, 2 actions, and the Great Hall in hand position 7.
Iteration 44 - cardEffectGreatHall(): PASSed all tests.

Iteration 45: Player 1 has 15 cards in hand, 85 in deck, 20 in discard, 4 actions, and the Great Hall in hand position 6.
Iteration 45 - cardEffectGreatHall(): PASSed all tests.

Iteration 46: Player 1 has 110 cards in hand, 97 in deck, 125 in discard, 2 actions, and the Great Hall in hand position 53.
Iteration 46 - cardEffectGreatHall(): PASSed all tests.

Iteration 47: Player 1 has 159 cards in hand, 146 in deck, 65 in discard, 7 actions, and the Great Hall in hand position 138.
Iteration 47 - cardEffectGreatHall(): PASSed all tests.

Iteration 48: Player 0 has 64 cards in hand, 39 in deck, 82 in discard, 6 actions, and the Great Hall in hand position 20.
Iteration 48 - cardEffectGreatHall(): PASSed all tests.

Iteration 49: Player 0 has 49 cards in hand, 85 in deck, 24 in discard, 7 actions, and the Great Hall in hand position 21.
Iteration 49 - cardEffectGreatHall(): PASSed all tests.

Iteration 50: Player 0 has 140 cards in hand, 120 in deck, 85 in discard, 3 actions, and the Great Hall in hand position 128.
Iteration 50 - cardEffectGreatHall(): PASSed all tests.

Iteration 51: Player 0 has 59 cards in hand, 157 in deck, 74 in discard, 6 actions, and the Great Hall in hand position 51.
Iteration 51 - cardEffectGreatHall(): PASSed all tests.

Iteration 52: Player 1 has 57 cards in hand, 112 in deck, 135 in discard, 10 actions, and the Great Hall in hand position 23.
Iteration 52 - cardEffectGreatHall(): PASSed all tests.

Iteration 53: Player 1 has 31 cards in hand, 136 in deck, 126 in discard, 7 actions, and the Great Hall in hand position 8.
Iteration 53 - cardEffectGreatHall(): PASSed all tests.

Iteration 54: Player 1 has 20 cards in hand, 128 in deck, 26 in discard, 7 actions, and the Great Hall in hand position 0.
Iteration 54 - cardEffectGreatHall(): PASSed all tests.

Iteration 55: Player 1 has 107 cards in hand, 91 in deck, 165 in discard, 3 actions, and the Great Hall in hand position 10.
Iteration 55 - cardEffectGreatHall(): PASSed all tests.

Iteration 56: Player 1 has 153 cards in hand, 76 in deck, 29 in discard, 1 actions, and the Great Hall in hand position 36.
Iteration 56 - cardEffectGreatHall(): PASSed all tests.

Iteration 57: Player 1 has 2 cards in hand, 121 in deck, 14 in discard, 2 actions, and the Great Hall in hand position 1.
Iteration 57 - cardEffectGreatHall(): PASSed all tests.

Iteration 58: Player 0 has 70 cards in hand, 100 in deck, 54 in discard, 10 actions, and the Great Hall in hand position 57.
Iteration 58 - cardEffectGreatHall(): PASSed all tests.

Iteration 59: Player 0 has 116 cards in hand, 46 in deck, 97 in discard, 6 actions, and the Great Hall in hand position 93.
Iteration 59 - cardEffectGreatHall(): PASSed all tests.

Iteration 60: Player 0 has 8 cards in hand, 145 in deck, 59 in discard, 8 actions, and the Great Hall in hand position 6.
Iteration 60 - cardEffectGreatHall(): PASSed all tests.

Iteration 61: Player 0 has 157 cards in hand, 154 in deck, 121 in discard, 9 actions, and the Great Hall in hand position 48.
Iteration 61 - cardEffectGreatHall(): PASSed all tests.

Iteration 62: Player 0 has 165 cards in hand, 36 in deck, 84 in discard, 8 actions, and the Great Hall in hand position 135.
Iteration 62 - cardEffectGreatHall(): PASSed all tests.

Iteration 63: Player 1 has 63 cards in hand, 159 in deck, 91 in discard, 7 actions, and the Great Hall in hand position 2.
Iteration 63 - cardEffectGreatHall(): PASSed all tests.

Iteration 64: Player 0 has 114 cards in hand, 88 in deck, 19 in discard, 2 actions, and the Great Hall in hand position 8.
Iteration 64 - cardEffectGreatHall(): PASSed all tests.

Iteration 65: Player 0 has 92 cards in hand, 119 in deck, 148 in discard, 5 actions, and the Great Hall in hand position 37.
Iteration 65 - cardEffectGreatHall(): PASSed all tests.

Iteration 66: Player 0 has 77 cards in hand, 164 in deck, 88 in discard, 7 actions, and the Great Hall in hand position 10.
Iteration 66 - cardEffectGreatHall(): PASSed all tests.

Iteration 67: Player 0 has 89 cards in hand, 151 in deck, 165 in discard, 1 actions, and the Great Hall in hand position 82.
Iteration 67 - cardEffectGreatHall(): PASSed all tests.

Iteration 68: Player 1 has 153 cards in hand, 143 in deck, 43 in discard, 6 actions, and the Great Hall in hand position 63.
Iteration 68 - cardEffectGreatHall(): PASSed all tests.

Iteration 69: Player 1 has 124 cards in hand, 107 in deck, 76 in discard, 5 actions, and the Great Hall in hand position 107.
Iteration 69 - cardEffectGreatHall(): PASSed all tests.

Iteration 70: Player 1 has 109 cards in hand, 85 in deck, 2 in discard, 8 actions, and the Great Hall in hand position 77.
Iteration 70 - cardEffectGreatHall(): PASSed all tests.

Iteration 71: Player 1 has 98 cards in hand, 165 in deck, 102 in discard, 7 actions, and the Great Hall in hand position 70.
Iteration 71 - cardEffectGreatHall(): PASSed all tests.

Iteration 72: Player 0 has 163 cards in hand, 79 in deck, 11 in discard, 1 actions, and the Great Hall in hand position 70.
Iteration 72 - cardEffectGreatHall(): PASSed all tests.

Iteration 73: Player 0 has 117 cards in hand, 152 in deck, 95 in discard, 4 actions, and the Great Hall in hand position 69.
Iteration 73 - cardEffectGreatHall(): PASSed all tests.

Iteration 74: Player 1 has 99 cards in hand, 67 in deck, 116 in discard, 1 actions, and the Great Hall in hand position 86.
Iteration 74 - cardEffectGreatHall(): PASSed all tests.

Iteration 75: Player 1 has 27 cards in hand, 111 in deck, 32 in discard, 3 actions, and the Great Hall in hand position 2.
Iteration 75 - cardEffectGreatHall(): PASSed all tests.

Iteration 76: Player 1 has 166 cards in hand, 18 in deck, 123 in discard, 1 actions, and the Great Hall in hand position 127.
Iteration 76 - cardEffectGreatHall(): PASSed all tests.

Iteration 77: Player 1 has 136 cards in hand, 54 in deck, 118 in discard, 4 actions, and the Great Hall in hand position 32.
Iteration 77 - cardEffectGreatHall(): PASSed all tests.

Iteration 78: Player 0 has 125 cards in hand, 43 in deck, 124 in discard, 6 actions, and the Great Hall in hand position 28.
Iteration 78 - cardEffectGreatHall(): PASSed all tests.

Iteration 79: Player 0 has 158 cards in hand, 127 in deck, 98 in discard, 1 actions, and the Great Hall in hand position 6.
Iteration 79 - cardEffectGreatHall(): PASSed all tests.

Iteration 80: Player 1 has 79 cards in hand, 159 in deck, 140 in discard, 10 actions, and the Great Hall in hand position 20.
Iteration 80 - cardEffectGreatHall(): PASSed all tests.

Iteration 81: Player 0 has 144 cards in hand, 58 in deck, 150 in discard, 8 actions, and the Great Hall in hand position 82.
Iteration 81 - cardEffectGreatHall(): PASSed all tests.

Iteration 82: Player 0 has 28 cards in hand, 60 in deck, 94 in discard, 10 actions, and the Great Hall in hand position 14.
Iteration 82 - cardEffectGreatHall(): PASSed all tests.

Iteration 83: Player 0 has 64 cards in hand, 139 in deck, 73 in discard, 10 actions, and the Great Hall in hand position 44.
Iteration 83 - cardEffectGreatHall(): PASSed all tests.

Iteration 84: Player 1 has 79 cards in hand, 151 in deck, 81 in discard, 2 actions, and the Great Hall in hand position 70.
Iteration 84 - cardEffectGreatHall(): PASSed all tests.

Iteration 85: Player 0 has 156 cards in hand, 71 in deck, 34 in discard, 4 actions, and the Great Hall in hand position 134.
Iteration 85 - cardEffectGreatHall(): PASSed all tests.

Iteration 86: Player 0 has 63 cards in hand, 14 in deck, 111 in discard, 3 actions, and the Great Hall in hand position 59.
Iteration 86 - cardEffectGreatHall(): PASSed all tests.

Iteration 87: Player 0 has 58 cards in hand, 71 in deck, 96 in discard, 9 actions, and the Great Hall in hand position 39.
Iteration 87 - cardEffectGreatHall(): PASSed all tests.

Iteration 88: Player 0 has 132 cards in hand, 72 in deck, 121 in discard, 7 actions, and the Great Hall in hand position 6.
Iteration 88 - cardEffectGreatHall(): PASSed all tests.

Iteration 89: Player 1 has 139 cards in hand, 159 in deck, 66 in discard, 4 actions, and the Great Hall in hand position 138.
Iteration 89 - cardEffectGreatHall(): PASSed all tests.

Iteration 90: Player 0 has 73 cards in hand, 95 in deck, 59 in discard, 6 actions, and the Great Hall in hand position 54.
Iteration 90 - cardEffectGreatHall(): PASSed all tests.

Iteration 91: Player 1 has 51 cards in hand, 31 in deck, 142 in discard, 2 actions, and the Great Hall in hand position 8.
Iteration 91 - cardEffectGreatHall(): PASSed all tests.

Iteration 92: Player 0 has 141 cards in hand, 113 in deck, 78 in discard, 7 actions, and the Great Hall in hand position 133.
Iteration 92 - cardEffectGreatHall(): PASSed all tests.

Iteration 93: Player 1 has 139 cards in hand, 15 in deck, 141 in discard, 2 actions, and the Great Hall in hand position 48.
Iteration 93 - cardEffectGreatHall(): PASSed all tests.

Iteration 94: Player 0 has 61 cards in hand, 24 in deck, 59 in discard, 4 actions, and the Great Hall in hand position 40.
Iteration 94 - cardEffectGreatHall(): PASSed all tests.

Iteration 95: Player 1 has 32 cards in hand, 32 in deck, 24 in discard, 8 actions, and the Great Hall in hand position 17.
Iteration 95 - cardEffectGreatHall(): PASSed all tests.

Iteration 96: Player 1 has 164 cards in hand, 40 in deck, 29 in discard, 1 actions, and the Great Hall in hand position 11.
Iteration 96 - cardEffectGreatHall(): PASSed all tests.

Iteration 97: Player 0 has 91 cards in hand, 109 in deck, 77 in discard, 6 actions, and the Great Hall in hand position 33.
Iteration 97 - cardEffectGreatHall(): PASSed all tests.

Iteration 98: Player 1 has 26 cards in hand, 39 in deck, 68 in discard, 3 actions, and the Great Hall in hand position 18.
Iteration 98 - cardEffectGreatHall(): PASSed all tests.

Iteration 99: Player 0 has 33 cards in hand, 37 in deck, 143 in discard, 2 actions, and the Great Hall in hand position 14.
Iteration 99 - cardEffectGreatHall(): PASSed all tests.
cardEffectGreatHall(): PASSed all tests.
Coverage results:
File 'dominion.c'
Lines executed:18.31% of 579
Branches executed:17.35% of 415
Taken at least once:13.73% of 415
Calls executed:9.47% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Lisa Percival
        -:    2:*  Assignment 2 Version
        -:    3:*/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
function compare called 3000 returned 100% blocks executed 83%
     3000:   12:int compare(const void* a, const void* b) {
     3000:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   14:    return 1;
     3000:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      800:   16:    return -1;
     2200:   17:  return 0;
        -:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
    #####:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 100 returned 100% blocks executed 88%
      100:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
      100:   48:  SelectStream(1);
call    0 returned 100%
      100:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:  
        -:   51:  //check number of players
      100:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
      100:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
     1100:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:    {
    11000:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:        {
    10000:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
        -:   69:        }
        -:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
      100:   77:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      100:   79:      state->supplyCount[curse] = 10;
        -:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
        -:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
      100:   91:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   92:    {
      100:   93:      state->supplyCount[estate] = 8;
      100:   94:      state->supplyCount[duchy] = 8;
      100:   95:      state->supplyCount[province] = 8;
        -:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
      100:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      100:  106:  state->supplyCount[silver] = 40;
      100:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
     2100:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  111:    {
    16500:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  113:	{
    15500:  114:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  115:	    {
        -:  116:	      //check if card is a 'Victory' Kingdom card
     1200:  117:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  118:		{
      200:  119:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      200:  120:		    state->supplyCount[i] = 8; 
        -:  121:		  }
    #####:  122:		  else{ state->supplyCount[i] = 12; }
        -:  123:		}
        -:  124:	      else
        -:  125:		{
      800:  126:		  state->supplyCount[i] = 10;
        -:  127:		}
     1000:  128:	      break;
        -:  129:	    }
        -:  130:	  else    //card is not in the set choosen for the game
        -:  131:	    {
    14500:  132:	      state->supplyCount[i] = -1;
        -:  133:	    }
        -:  134:	}
        -:  135:
        -:  136:    }
        -:  137:
        -:  138:  ////////////////////////
        -:  139:  //supply intilization complete
        -:  140:
        -:  141:  //set player decks
      300:  142:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  143:    {
      200:  144:      state->deckCount[i] = 0;
      800:  145:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  146:	{
      600:  147:	  state->deck[i][j] = estate;
      600:  148:	  state->deckCount[i]++;
        -:  149:	}
     1600:  150:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  151:	{
     1400:  152:	  state->deck[i][j] = copper;
     1400:  153:	  state->deckCount[i]++;		
        -:  154:	}
        -:  155:    }
        -:  156:
        -:  157:  //shuffle player decks
      300:  158:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  159:    {
      200:  160:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  161:	{
    #####:  162:	  return -1;
        -:  163:	}
        -:  164:    }
        -:  165:
        -:  166:  //draw player hands
      300:  167:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  168:    {  
        -:  169:      //initialize hand size to zero
      200:  170:      state->handCount[i] = 0;
      200:  171:      state->discardCount[i] = 0;
        -:  172:      //draw 5 cards
        -:  173:      // for (j = 0; j < 5; j++)
        -:  174:      //	{
        -:  175:      //	  drawCard(i, state);
        -:  176:      //	}
        -:  177:    }
        -:  178:  
        -:  179:  //set embargo tokens to 0 for all supply piles
     2800:  180:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  181:    {
     2700:  182:      state->embargoTokens[i] = 0;
        -:  183:    }
        -:  184:
        -:  185:  //initialize first player's turn
      100:  186:  state->outpostPlayed = 0;
      100:  187:  state->phase = 0;
      100:  188:  state->numActions = 1;
      100:  189:  state->numBuys = 1;
      100:  190:  state->playedCardCount = 0;
      100:  191:  state->whoseTurn = 0;
      100:  192:  state->handCount[state->whoseTurn] = 0;
        -:  193:  //int it; move to top
        -:  194:
        -:  195:  //Moved draw cards to here, only drawing at the start of a turn
      600:  196:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      500:  197:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  198:  }
        -:  199:
      100:  200:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  201:
      100:  202:  return 0;
        -:  203:}
        -:  204:
function shuffle called 200 returned 100% blocks executed 93%
      200:  205:int shuffle(int player, struct gameState *state) {
        -:  206: 
        -:  207:
        -:  208:  int newDeck[MAX_DECK];
      200:  209:  int newDeckPos = 0;
        -:  210:  int card;
        -:  211:  int i;
        -:  212:
      200:  213:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  214:    return -1;
      200:  215:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  216:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  217:
     2400:  218:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2000:  219:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2000:  220:    newDeck[newDeckPos] = state->deck[player][card];
     2000:  221:    newDeckPos++;
     6876:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     4876:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
     2000:  225:    state->deckCount[player]--;
        -:  226:  }
     2200:  227:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2000:  228:    state->deck[player][i] = newDeck[i];
     2000:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
      200:  232:  return 0;
        -:  233:}
        -:  234:
function playCard called 0 returned 0% blocks executed 0%
    #####:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
    #####:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
    #####:  241:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
    #####:  247:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
    #####:  253:  card = handCard(handPos, state);
call    0 never executed
        -:  254:	
        -:  255:  //check if selected card is an action
    #####:  256:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    #####:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:    {
    #####:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
    #####:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
    #####:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  272:	
    #####:  273:  return 0;
        -:  274:}
        -:  275:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
    #####:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
    #####:  284:  who = state->whoseTurn;
        -:  285:
    #####:  286:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:    return -1;
        -:  298:  } else {
    #####:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    #####:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  302:  
    #####:  303:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  304:    state->numBuys--;
    #####:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    #####:  312:  return 0;
        -:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  317:}
        -:  318:
function handCard called 0 returned 0% blocks executed 0%
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  324:int supplyCount(int card, struct gameState *state) {
    #####:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
    #####:  330:  int count = 0;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:
    #####:  347:  return count;
        -:  348:}
        -:  349:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  350:int whoseTurn(struct gameState *state) {
    #####:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
    #####:  357:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  358:  
        -:  359:  //Discard hand
    #####:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
    #####:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
    #####:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    #####:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
    #####:  374:  state->outpostPlayed = 0;
    #####:  375:  state->phase = 0;
    #####:  376:  state->numActions = 1;
    #####:  377:  state->coins = 0;
    #####:  378:  state->numBuys = 1;
    #####:  379:  state->playedCardCount = 0;
    #####:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
    #####:  384:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  385:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  386:  }
        -:  387:
        -:  388:  //Update money
    #####:  389:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  390:
    #####:  391:  return 0;
        -:  392:}
        -:  393:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
    #####:  399:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  400:    {
    #####:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
    #####:  405:  j = 0;
    #####:  406:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  409:	{
    #####:  410:	  j++;
        -:  411:	}
        -:  412:    }
    #####:  413:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
    #####:  418:  return 0;
        -:  419:}
        -:  420:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
function drawCard called 600 returned 100% blocks executed 36%
      600:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
      600:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  547:   
    #####:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
    #####:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:
    #####:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:    state->deckCount[player]--;
    #####:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
      600:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
      600:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
      600:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
      600:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      600:  580:    state->deckCount[player]--;
      600:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
      600:  584:  return 0;
        -:  585:}
        -:  586:
function getCost called 0 returned 0% blocks executed 0%
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
    #####:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
    #####:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
    #####:  656:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  657:  int nextPlayer = currentPlayer + 1;
        -:  658:
    #####:  659:  int tributeRevealedCards[2] = {-1, -1};
        -:  660:  int temphand[MAX_HAND];// moved above the if statement
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		cardEffectAdventurer(currentPlayer, state);
call    0 never executed
    #####:  671:		break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
call    0 never executed
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  710:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
    #####:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  719:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  720:
    #####:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
    #####:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
    #####:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  790:
    #####:  791:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  792:	{
    #####:  793:	  return -1;
        -:  794:	}
        -:  795:
    #####:  796:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  797:
        -:  798:      //discard card from hand
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  800:
        -:  801:      //discard trashed card
    #####:  802:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  803:	{
    #####:  804:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  805:	    {
    #####:  806:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  807:	      break;
        -:  808:	    }
        -:  809:	}
        -:  810:
        -:  811:
    #####:  812:      return 0;
        -:  813:		
        -:  814:    case smithy:
    #####:  815:		cardEffectSmithy(handPos, currentPlayer, state);
call    0 never executed
    #####:  816:		break;
        -:  817:		
        -:  818:    case village:
        -:  819:      //+1 Card
    #####:  820:      drawCard(currentPlayer, state);
call    0 never executed
        -:  821:			
        -:  822:      //+2 Actions
    #####:  823:      state->numActions = state->numActions + 2;
        -:  824:			
        -:  825:      //discard played card from hand
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  827:      return 0;
        -:  828:		
        -:  829:    case baron:
    #####:  830:      state->numBuys++;//Increase buys by 1!
    #####:  831:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  832:	int p = 0;//Iterator for hand!
    #####:  833:	int card_not_discarded = 1;//Flag for discard set!
    #####:  834:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  835:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  836:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  837:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  838:	    state->discardCount[currentPlayer]++;
    #####:  839:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  840:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  841:	    }
    #####:  842:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  843:	    state->handCount[currentPlayer]--;
    #####:  844:	    card_not_discarded = 0;//Exit the loop
        -:  845:	  }
    #####:  846:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  847:	    if(DEBUG) {
        -:  848:	      printf("No estate cards in your hand, invalid choice\n");
        -:  849:	      printf("Must gain an estate if there are any\n");
        -:  850:	    }
    #####:  851:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  853:	      state->supplyCount[estate]--;//Decrement estates
    #####:  854:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  855:		isGameOver(state);
call    0 never executed
        -:  856:	      }
        -:  857:	    }
    #####:  858:	    card_not_discarded = 0;//Exit the loop
        -:  859:	  }
        -:  860:			    
        -:  861:	  else{
    #####:  862:	    p++;//Next card
        -:  863:	  }
        -:  864:	}
        -:  865:      }
        -:  866:			    
        -:  867:      else{
    #####:  868:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  869:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  870:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  871:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:	    isGameOver(state);
call    0 never executed
        -:  873:	  }
        -:  874:	}
        -:  875:      }
        -:  876:	    
        -:  877:      
    #####:  878:      return 0;
        -:  879:		
        -:  880:    case great_hall:
    #####:  881:		cardEffectGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  882:		break;
        -:  883:		
        -:  884:    case minion:
        -:  885:      //+1 action
    #####:  886:      state->numActions++;
        -:  887:			
        -:  888:      //discard card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  890:			
    #####:  891:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  892:	{
    #####:  893:	  state->coins = state->coins + 2;
        -:  894:	}
        -:  895:			
    #####:  896:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  897:	{
        -:  898:	  //discard hand
    #####:  899:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  900:	    {
    #####:  901:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  902:	    }
        -:  903:				
        -:  904:	  //draw 4
    #####:  905:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  906:	    {
    #####:  907:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  908:	    }
        -:  909:				
        -:  910:	  //other players discard hand and redraw if hand size > 4
    #####:  911:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  914:		{
    #####:  915:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  916:		    {
        -:  917:		      //discard hand
    #####:  918:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  919:			{
    #####:  920:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  921:			}
        -:  922:							
        -:  923:		      //draw 4
    #####:  924:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  925:			{
    #####:  926:			  drawCard(i, state);
call    0 never executed
        -:  927:			}
        -:  928:		    }
        -:  929:		}
        -:  930:	    }
        -:  931:				
        -:  932:	}
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case steward:
    #####:  936:		cardEffectSteward(currentPlayer, state, choice1, choice2, choice3, handPos);
call    0 never executed
    #####:  937:		break;
        -:  938:		
        -:  939:    case tribute:
    #####:  940:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  941:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  943:	  state->deckCount[nextPlayer]--;
        -:  944:	}
    #####:  945:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  946:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  947:	  state->discardCount[nextPlayer]--;
        -:  948:	}
        -:  949:	else{
        -:  950:	  //No Card to Reveal
    #####:  951:	  if (DEBUG){
        -:  952:	    printf("No cards to reveal\n");
        -:  953:	  }
        -:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      else{
    #####:  958:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  959:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  960:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  961:	    state->deckCount[nextPlayer]++;
    #####:  962:	    state->discard[nextPlayer][i] = -1;
    #####:  963:	    state->discardCount[nextPlayer]--;
        -:  964:	  }
        -:  965:			    
    #####:  966:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  967:	} 
    #####:  968:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  969:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  970:	state->deckCount[nextPlayer]--;
    #####:  971:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  972:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  973:	state->deckCount[nextPlayer]--;
        -:  974:      }    
        -:  975:		       
    #####:  976:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  977:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  978:	state->playedCardCount++;
    #####:  979:	tributeRevealedCards[1] = -1;
        -:  980:      }
        -:  981:
    #####:  982:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  983:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  984:	  state->coins += 2;
        -:  985:	}
        -:  986:		    
    #####:  987:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  989:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  990:	}
        -:  991:	else{//Action Card
    #####:  992:	  state->numActions = state->numActions + 2;
        -:  993:	}
        -:  994:      }
        -:  995:	    
    #####:  996:      return 0;
        -:  997:		
        -:  998:    case ambassador:
    #####:  999:      j = 0;		//used to check if player has enough cards to discard
        -: 1000:
    #####: 1001:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1002:	{
    #####: 1003:	  return -1;				
        -: 1004:	}
        -: 1005:
    #####: 1006:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  return -1;
        -: 1009:	}
        -: 1010:
    #####: 1011:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
    #####: 1013:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1014:	    {
    #####: 1015:	      j++;
        -: 1016:	    }
        -: 1017:	}
    #####: 1018:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  return -1;				
        -: 1021:	}
        -: 1022:
    #####: 1023:      if (DEBUG) 
        -: 1024:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1025:
        -: 1026:      //increase supply count for choosen card by amount being discarded
    #####: 1027:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1028:			
        -: 1029:      //each other player gains a copy of revealed card
    #####: 1030:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
    #####: 1032:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1033:	    {
    #####: 1034:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1035:	    }
        -: 1036:	}
        -: 1037:
        -: 1038:      //discard played card from hand
    #####: 1039:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1040:
        -: 1041:      //trash copies of cards returned to supply
    #####: 1042:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1043:	{
    #####: 1044:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1045:	    {
    #####: 1046:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1047:		{
    #####: 1048:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1049:		  break;
        -: 1050:		}
        -: 1051:	    }
        -: 1052:	}			
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case cutpurse:
        -: 1057:
    #####: 1058:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1059:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1062:	    {
    #####: 1063:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1064:		{
    #####: 1065:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1066:		    {
    #####: 1067:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1068:		      break;
        -: 1069:		    }
    #####: 1070:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1071:		    {
    #####: 1072:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1073:			{
    #####: 1074:			  if (DEBUG)
        -: 1075:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1076:			}	
    #####: 1077:		      break;
        -: 1078:		    }		
        -: 1079:		}
        -: 1080:					
        -: 1081:	    }
        -: 1082:				
        -: 1083:	}				
        -: 1084:
        -: 1085:      //discard played card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1087:
    #####: 1088:      return 0;
        -: 1089:
        -: 1090:		
        -: 1091:    case embargo: 
        -: 1092:      //+2 Coins
    #####: 1093:      state->coins = state->coins + 2;
        -: 1094:			
        -: 1095:      //see if selected pile is in play
    #####: 1096:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
        -: 1099:	}
        -: 1100:			
        -: 1101:      //add embargo token to selected supply pile
    #####: 1102:      state->embargoTokens[choice1]++;
        -: 1103:			
        -: 1104:      //trash card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case outpost:
        -: 1109:      //set outpost flag
    #####: 1110:      state->outpostPlayed++;
        -: 1111:			
        -: 1112:      //discard card
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case salvager:
        -: 1117:      //+1 buy
    #####: 1118:      state->numBuys++;
        -: 1119:			
    #####: 1120:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
        -: 1122:	  //gain coins equal to trashed card
    #####: 1123:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1124:	  //trash card
    #####: 1125:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1126:	}
        -: 1127:			
        -: 1128:      //discard card
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case sea_hag:
    #####: 1133:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1134:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1135:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1136:	  state->discardCount[i]++;
    #####: 1137:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1138:	}
        -: 1139:      }
    #####: 1140:      return 0;
        -: 1141:		
        -: 1142:    case treasure_map:
    #####: 1143:		cardEffectTreasureMap(state, currentPlayer, handPos);
call    0 never executed
        -: 1144:		break;
        -: 1145:    }
        -: 1146:	
    #####: 1147:  return -1;
        -: 1148:}
        -: 1149:
function cardEffectSmithy called 0 returned 0% blocks executed 0%
    #####: 1150:int cardEffectSmithy(int handPos, int currentPlayer, struct gameState *state)
        -: 1151:{
        -: 1152:	int i;
        -: 1153:	
        -: 1154:	//+3 Cards
    #####: 1155:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1158:	}
        -: 1159:	
        -: 1160:    //discard card from hand
    #####: 1161:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:    return 0;
        -: 1163:}
        -: 1164:
function cardEffectAdventurer called 0 returned 0% blocks executed 0%
    #####: 1165:int cardEffectAdventurer(int currentPlayer, struct gameState *state)
        -: 1166:{
        -: 1167:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1168:	int drawntreasure=0;
        -: 1169:	int cardDrawn;
    #####: 1170:	int z = 0;// this is the counter for the temp hand
        -: 1171:	
    #####: 1172:    while(drawntreasure<=2){
branch  0 never executed
branch  1 never executed
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1174:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
    #####: 1186:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:    }
    #####: 1190:    return 0;
        -: 1191:}
        -: 1192:
function cardEffectTreasureMap called 0 returned 0% blocks executed 0%
    #####: 1193:int cardEffectTreasureMap(struct gameState *state, int currentPlayer, int handPos)
        -: 1194:{
        -: 1195:	int i;
        -: 1196:	int index;
        -: 1197:	
        -: 1198:    //search hand for another treasure_map
    #####: 1199:    index = -1;
    #####: 1200:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
    #####: 1202:	  if (state->hand[currentPlayer][i] == treasure_map)
branch  0 never executed
branch  1 never executed
        -: 1203:	    {
    #####: 1204:	      index = i;
    #####: 1205:	      break;
        -: 1206:	    }
        -: 1207:	}
    #####: 1208:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1209:	{
        -: 1210:	  //trash both treasure cards
    #####: 1211:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1212:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1213:
        -: 1214:	  //gain 4 Gold cards
    #####: 1215:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	    {
    #####: 1217:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1218:	    }
        -: 1219:				
        -: 1220:	  //return success
    #####: 1221:	  return 1;
        -: 1222:	}
        -: 1223:	
        -: 1224:    //no second treasure_map found in hand
    #####: 1225:    return -1;
        -: 1226:}
        -: 1227:
function cardEffectSteward called 0 returned 0% blocks executed 0%
    #####: 1228:int cardEffectSteward(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1229:{
    #####: 1230:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //+2 cards
    #####: 1233:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1234:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1235:	}
    #####: 1236:    if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
        -: 1238:	  //+2 coins
    #####: 1239:	  state->coins = state->coins + 2;
        -: 1240:	}
        -: 1241:    else
        -: 1242:	{
        -: 1243:	  //trash 2 cards in hand
    #####: 1244:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1245:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1246:	}
        -: 1247:	
        -: 1248:    //discard card from hand
    #####: 1249:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1250:    return 0;
        -: 1251:}
        -: 1252:
function cardEffectGreatHall called 100 returned 100% blocks executed 100%
      100: 1253:int cardEffectGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1254:{
        -: 1255:    //+1 Card
      100: 1256:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1257:	
        -: 1258:    //+1 Actions
      100: 1259:    state->numActions++;
        -: 1260:	
        -: 1261:    //discard card from hand
      100: 1262:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      100: 1263:    return 0;
        -: 1264:}
        -: 1265:
function discardCard called 100 returned 100% blocks executed 75%
      100: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
      100: 1270:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1271:    {
        -: 1272:      //add card to played pile
      100: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      100: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
      100: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
      100: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
      100: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
      100: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
      100: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
      100: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
      100: 1301:  return 0;
        -: 1302:}
        -: 1303:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
    #####: 1324:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
    #####: 1338:  return 0;
        -: 1339:}
        -: 1340:
function updateCoins called 100 returned 100% blocks executed 80%
      100: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
      100: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
      600: 1349:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
      500: 1351:      if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1352:	{
      377: 1353:	  state->coins += 1;
        -: 1354:	}
      123: 1355:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
      123: 1359:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
      100: 1366:  state->coins += bonus;
        -: 1367:
      100: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
