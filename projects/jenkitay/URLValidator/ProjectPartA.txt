Group members:
	Taylor Jenkins
	Ryan Peterson
	Kristin Swanson

Give how many total number of urls it is testing. 

There are 2 hard-coded ones at the top; then there are all the ones in the do-while loop which would be
31,920 (based on incrementing and printing out a number per run of the loop).  So in total 31,922 urls
are being tested.

Also, explain how it is building all the urls. 

It loops through all the potential combinations of the parts of the url.  So there are several hard-coded
options for each part of the url; some parts are valid and some are not.  So if an invalid part is included, 
then the url should be invalid.

Give an example of valid url being tested and an invalid url being tested by testIsValid() method.  

valid: http://www.google.com:80/test1
	The scheme is: http:// (which is valid)
	The authority is: www.google.com (with is valid)
	The port is :80 (which is valid)
	The path is: /test1 (which is valid)
	The query is blank (which is valid)
	
invalid: h3t://go.cc:65a/$23?action=edit&mode=up
	The scheme is: h3t:// (which is valid)
	The authority is: go.cc (with is valid)
	The port is :65a (which is NOT valid)
	The path is: /$23 (which is valid)
	The query is: ?action=edit&mode=up (which is valid)
	
Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different 
than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 

	It looks much more complex than the ones we wrote.  It tests a lot more cases.  The range of 
input and options is greater.  One confusing aspect is the way it loops through its input using a bitwise &., is more complex.
	However, it is similar to what we wrote in that it loops through a series of options stored in arrays.
Also like the test cases we wrote, it tests unusual inputs and boundary cases.  
	Overall, it is not that different in concept, just much bigger in scope.
