Assignment 4 - Random Testing

----------------
Testing the Adventurer Card (playAdventurer function):

In designing this random test I drew on the lectures on random testing.
I knew I would want a loop that could be easily adjusted to run any number of times.
I also knew I would create a gameState, make a backup, then run the adventurer
function on it. This would let me easily compare the two for any changed
variables that should not have been, or the reverse.

The adventurer card draws cards until it finds two treasure cards, then it
discards the adventurer card and any additional cards it drew, and puts the
treasure in the player's hand.

I will describe the tests and their results on my 10,000 loop run below.

#Test1
The first test I ran simply checks if the function returns 0 as it should.
This passed every time.

#Test2
This tested whether the handCount reflects additional cards added
This failed every time. This is due to the bug I introduced, so it was expected.

#Test3
This tested that two treasure cards were drawn and made sure they were, in fact,
treasure cards.
This failed every time. This is due to the bug I introduced in assignment 2, so it
was expected.

#Test4
This tested the discards to make sure the function did discard.
This test passed every time.

#Test5
This tested that numActions was NOT decreased after playing the card.
This passed every time, as numActions is decreased by the playCard function (which
eventually calls playAdventurer) and not specifically in playAdventurer, which is
what is being tested here.

#Remaining Tests
The remaining tests all check the other gameState variables to make sure they were
NOT changed, as they should all be the same at this point.
These tests all passed every time.

Coverage:
My results for coverage were as follows:

Function 'playAdventurer'
Lines executed:83.33% of 18
Branches executed:100.00% of 12
Taken at least once:66.67% of 12
No calls

I believe the reason that not 100% of the lines were executed is due to the bug
introduced back in assignment 2. I chose to make it so that it will never draw
the right number of treasure cards, and this changes the rest of the function
behavior as some parts, such as the discard, won't be called in certain cases when
this happens. As such, I believe my random tester is functional as is.
----------------

----------------
Testing the Outpost Card (playOutpost function):

I chose to test this function since it was the function that I did NOT add a bug
to in assignment 2. This way, I can test it fully without having to think which
reported failures might have been introduced via the intentional bugs in the function.

This is a short function, but just to make sure I tested all the gameState variables
as well. This way, if any bug ever happens there, this will find it. Since the
gameState is the most important part of the program, I feel this is the best
course of action.

I will go over the tests run below and the results running it 10,000 times:

#Test1
This test simply looks at the return from the playOutpost function and makes sure it
is 0. This passed 100% of the time.

#Test2
Checked the main condition of the card: increasing outpostPlayed in the gameState
by 1. This test passed 100% of the time.

#Test3
Checked that the outpost card was removed from the hand. This test passed 100% of the time.

#Test4
Tested that discardCount was updated. This test failed 100% of the time. This was
surprising as the playOutpost function simply calls discardCard, but it looks as if that function does not update discardCount, either. It is called fairly often in the
code in dominion.c but I could not find any discardCount additions or subtractions.
In playAdventurer, the discardCount is increased, so I feel it should be done inside
playOutpost, as well, yet it is not. This would definitely be a bug, I think.

#RemainingTests
The rest tested the various gameState variables to make sure they matched up. These
tests passed 100% of the time.

Coverage:
Function 'playOutpost'
Lines executed:100.00% of 3
No branches
No calls

This coverage result shows all is covered in the function, which is not surprising
given its length.
________________
