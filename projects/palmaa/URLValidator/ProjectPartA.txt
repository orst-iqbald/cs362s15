Megan Conley
Andrew Palma
Yong Lee

Final Project: Part A

The basic structure of testIsValid function of UrlValidatorTest is as follows: 

testIsValid()
   calls testIsValid(testUrlParts, UrlValidator.ALLOW_ALL_SCHEMES):
   it then runs 2 set URLs against/testing an instance of UrlValidator ***
     followed by a number of random urls formed by combination of
     9 in testUrlScheme array
     19 in testUrlAuthority array
     7 in testUrlPort array
     10 in testPath
     3 in testUrlQuery

When you calculate all the different combinations by multiplying 9, 19, 7, 10, and 3 then add 2 (***), you get 35912 which is the total number of urls it is testing, and these urls are constructed by combining the above elements in this order:

<scheme>://<authority><port><path>?<query>

Example valid url = ftp://go.au:65535/test1/file

Example invalid url = http:/go.a1a:0/test1/?action=view

In terms of concepts it is similar - it uses randomized testing to make sure that edge cases are covered. However, I would call it more complex than what we have been using for dominion. For dominion, we randomly set up a starting gamestate and maybe tweak some variables, but what we create is always close to a "natural" game state and is ultimately fairly limited. The testIsValid function has to check both valid and invalid inputs by stringing together 5 different variables, so it is by nature more complex than dominion which assumes a valid gamestate and we are only testing functions that alter a small number of variables.
