David Adams
CS 362
Spring 2015

Assignment 4

Writeup:

For this assignment, the two Dominion cards that I choose to implement
random testers for were the Smithy and Adventurer cards. These are the two
cards that were required to have bugs in them from an earlier assignment,
so I thought it would be good to use these two cards as there is a 100%
certainty that the random testers being written for this assignment should
at least pick up some bugs. Also, the adventurer card was required for the
assignment. 

Within the dominion code as a whole, the implementation of these two random
testers hasn't really improved the overal coverage of the dominion code
over what I had previously with the unit tests that I wrote. In fact,
the dominion coverage is actually less for these random testers because
instead of relying on the Initalize function provided within the dominion
code, I am manually initializing the gameState struct to hold random
values in all of the memory locations of the struct and then only 
initializing the necessary values for testing. Therefore, the initalizeGame()
function is not being tested and therefore not being included in the 
gcov coverage statistics. Additionally, the only functions being called
from within the code for the Adventurer and Smithy cards are, shuffle(),
drawCard() and discardCard(), so those are the only areas other than the
card functions themselves that are being tested out of all the dominion
code. However, the purpose of the random tester for testing a cards
implementation was not to greatly increase the coverage for the whole of the
dominion code. The purpose was to see if we could increase the robustness
of the tests being done for the cards selected.

Next, I am going to go through each random testing implementation
for the two cards individually and talk about the test coverage and what
the random tester is diong.

-------------------------------------------------------------------------------
randomtestadventurer.c

The gcov statistics for only the testing done from this code:
File 'dominion.c'
Lines executed:11.15% of 574
Branches executed:7.23% of 415
Taken at least once:7.23% of 415
Calls executed:5.26% of 95
dominion.c:creating 'dominion.c.gcov'

Total Tests: 10,000
Tests Passed: 5,945
Tests Failed: 4,055

Within this random testing scheme for the Adventurer card, each iteration
of the random setup is performing 5 tests on the code that makes up the
Adventurer Card. The random testing scheme is iterating 2000 times, so that
is why there are a total of 10,000 tests. Here are the 5 things being tested
for each iteration after the adventurer card has been played:
1. Whether the last card in the hand is a treasure card
2. Whether the 2nd to last card in the hand is a treasure card
3. Whether the hand count was adjusted correctly
4. Whether the Adventurer card was removed from hand
5. Whether cards were discarded or not

So, what the actual test is doing is it is creating a struct gameState and 
then it is initializing the entirety of the struct to be totally random
char values. Then, once the struct is made up of totally random values, 
it is creating a hand, deck, and discard pile all of randomly generated size.
Then, it is filling the hand, deck and discard pile with random cards. Once
all of these are set up to be totally random, it is placing an adventurer
card randomly within the hand at a random location. Then it is testing
these above 5 conditions after the card has been played to see if the 
post-play state of the game meets the test conditions. 

Overall, the only conditions that pass every time are the test conditions that
test the last two cards in the player's hand. So, the code is correctly adding
2 treasure cards to the hand. The test checking the hand count after the play
of the card and whether or not the adventurer card has been removed from the
hand fail every time. This is because the card code is not removing the 
adventurer card from the hand after it has been played. The discard test
does not fail every time, but does fail sometimes. This is due to a bug 
in the code that is not correctly discarding cards at times.

Based off of looking at the dominion.c.gcov file and the gcov statistics,
the coverage for this function is only catching 11% of the total lines
in dominion and only about 7% of the branches and 5% of the total calls.
The only calls that are being tested are the playAdventure(), shuffle(), 
and drawCard() function calls. The testing scheme is getting 100% branch
coverage within the playAdventure() function. The scheme is achieving
100% branch coverage within the drawCard() function and 100% branch coverage
within the shuffle() function. Therefore, the random tester is successfull
in the sense that it is hitting all of the code that should be tested
for this function. 


Important Note!!
For the adventurer card code within the dominion.c file, I implemented my
random tester and when I was testing my code, I realized that the bulk of
the code within the playAdventurer function wasn't even running. I was able
to figure this out by looking at the gcov file after running the tests. This
was due to the fact that one of the bugs that I introduced into the adventurer
card was that the drawnTreasure variable is no longer initialized to 0 at the
start of the function. Therefore, when the first while loop checks the condition
for drawnTreasure being less than 2, it was causing the while loop to never
actually run. For the sake of this assignment and being able to show what
my random testers are actually doing, I have removed this bug and made the
drawnTreasure variable be initalized to 0 like it was previously. I have made
a note of this in my refactor.txt file.
Here's what the coverage statistics looked like with the bug in place:
File 'dominion.c'
Lines executed:1.22% of 573
Branches executed:0.96% of 415
Taken at least once:0.72% of 415
Calls executed:0.00% of 95
dominion.c:creating 'dominion.c.gcov'

-------------------------------------------------------------------------------
randomtestcard.c

The gcov statistics for only the testing done from this code:
File 'dominion.c'
Lines executed:10.10% of 574
Branches executed:6.27% of 415
Taken at least once:4.82% of 415
Calls executed:5.26% of 95
dominion.c:creating 'dominion.c.gcov'

Total Tests: 6,000
Tests Passed: 2,000
Tests Failed: 4,000

For the random testing scheme for the Smithy Card, each iteratino of the
random setup is performing 3 tests on the code that makes up the Smithy
Card. The random testing scheme is iteratint 2,000 times, so that is why
there is a total of 6,000 tests. Here are the 3 things being tested for 
each iteration after the Smithy card has been played:
1. Whether the hand count reflects what it should after the card is played
2. Whether the Smithy card was removed from the hand
3. Whether the Smithy card was discarded

In this case, the random testing code is creating a struct gameState
and randomizing its contents just like the previous test. However, for this
test the player's hand is being set to a random size and then filled with 
random cards and the deck count and discard count are set to random sizes,
but the deck and discard pile are not filled with random cards. This is
because doing this would not be relevant to setting up the pre conditions
for testing this Card. This is done every iteration and then the 
pre conditions are set and the card is played and the above 3 tests are 
being run for each random set up. 

For the testing results for this card, there was not much variation between
the iterations of the testing. Only 1 of the tests passed and it passed
every time and the other 2 tests failed every time. The test that passed
was the test that tested whether the Smithy card was removed from the hand
after it was played. Then, the tests that failed were the tests that tested
whether 3 cards were correctly added to the hand and whether the Smithy card
was discarded. The first test failure is due to a bug that I added to the
Smithy card in a past assignment and the second test failure is due to a 
known but in the discardCard() function within the dominion code. 

Based off of looking at the dominion.c.gcov file and the gcov statistics,
the coverage for this function is only catching about 10% of the lines,
6% of the branches, and about 5% of the total calls of the domion code.
The only functions that are being called from within the Smithy code
card implementation are the drawCard() and the discardCard() functions.
The testing scheme is getting 100% branch coverage within the playSmithy()
function, which is good. Interestingly, the drawCard function is getting
only 93% of the total blocks being covered. After looking through the gcov
file, this is because there is 1 if statement that was never used within the 
function code. This would represent the scenario of the deck being shuffled
and then the deck is still empty. Basically an empty discard pile and an
empty deck. The tests are getting 63% block coverage for the discardCard()
function. This is because the tests are never causing a card to be trashed
because it isn't part of the Smithy card's action, so that part of the
discardCard function is never run. Also, the test isn't being run enough
times where statisically it is likely that the smithy card is being placed
as the only card in the player's hand or as the last card in the player's
hand. The test would have to be run at a very high number of iterations
for these scenarios to show up in the random testing. Overall,
the random testing for this function doesn't really accomplish anything
more than what the unit tests cover and is getting less overal coverage
due to the scenarios just mentioned where the unit tests catch the edge
cases better than the random tests and get a higher block coverage
on both the drawCard and discardCard functions.
