        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * a card test for mine() in dominion.c
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    6: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:
        -:   20:
        -:   21:int main() {
        -:   22:    
        5:   23:    int seed = 1000;
        5:   24:    int players = 2;
        5:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   26:        , remodel, smithy, village, baron, great_hall};
        -:   27:    
        5:   28:    struct gameState *play = newGame();
        -:   29:    
        5:   30:    int fails=0;
        5:   31:    int passes=0;
        -:   32:    
        -:   33:#if (NOISY_TEST == 1)
        5:   34:    printf ("TESTING mine():\n");
        -:   35:#endif
        -:   36:    
        -:   37:    
        -:   38:    //initialize new game
        5:   39:    int start = initializeGame(players, k, seed, play);
        -:   40:    
        -:   41:    //  no need to contine if this fails
       10:   42:    assert( start == 0);
        -:   43:    
        5:   44:    shuffle(0, play);
        -:   45:    
        -:   46:#if (NOISY_TEST == 1)
        5:   47:    printf("\nGame just initilized with %i players\n", players);
        -:   48:#endif
        -:   49:    
        -:   50:    
        -:   51:    // store the number of treasures originally in hand
        -:   52:    int i;
        5:   53:    int treasuresbefore =0;
       60:   54:    for (i = 0; i < play->handCount[0]; i++)
        -:   55:    {
       75:   56:        if ( play->hand[0][i] == gold || play->hand[0][i] == silver || play->hand[0][i] == copper )
        -:   57:        {
       20:   58:            treasuresbefore++;
       20:   59:        }
       25:   60:    }
        -:   61:    
        -:   62:    
        -:   63:    
        -:   64:#if (NOISY_TEST == 1)
        5:   65:    printf(" this is the  inititial amount of treasures %i\n", treasuresbefore );
        -:   66:#endif
        -:   67:    
        -:   68:    //minfd card
        5:   69:     play->hand[whoseTurn(play)][0] = mine;
        5:   70:    cardMine(play, whoseTurn(play) ,0,  copper, copper);
        -:   71:    
        -:   72:    // store the number of treasures originally in hand
        -:   73:  
        5:   74:    int treasuresafter =0;
       60:   75:    for (i = 0; i < play->handCount[0]; i++)
        -:   76:    {
       75:   77:        if ( play->hand[0][i] == gold || play->hand[0][i] == silver || play->hand[0][i] == copper )
        -:   78:        {
       15:   79:            treasuresafter++;
       15:   80:        }
       25:   81:    }
        -:   82:    
        -:   83:    // this is a card inculded in refactor so teh result is explained there
        -:   84:    
        -:   85:    
        -:   86:#if (NOISY_TEST == 1)
        5:   87:    printf(" this si the  amount of treasures  after using mine %i\n", treasuresafter );
        -:   88:#endif
        -:   89:
        -:   90:    
        5:   91:    if ( treasuresafter < treasuresbefore)
        -:   92:    {
        5:   93:        fails++;
        -:   94:        #if (NOISY_TEST == 1)
        5:   95:            printf(" Test failed gold mine is functioning incorrectly");
        -:   96:        #endif
        5:   97:    }
        -:   98:    else
        -:   99:    {
    #####:  100:        passes++;
        -:  101:        #if (NOISY_TEST == 1)
    #####:  102:            printf(" Test Passed - gold mind works ");
        -:  103:        #endif
        -:  104:    }
        -:  105:    
        -:  106:
        5:  107:    if (passes != 1)
        -:  108:    {
        -:  109:        #if (NOISY_TEST == 1)
        5:  110:            printf(" Program Failed");
        -:  111:        #endif
        -:  112:        
        5:  113:        return -1;
        -:  114:    }
        -:  115:    
        -:  116:    #if (NOISY_TEST == 1)
    #####:  117:    printf("Program Passed");
        -:  118:    #endif
        -:  119:    
    #####:  120:    return 0;
        5:  121:}
