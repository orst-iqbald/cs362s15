CS 362
Assignment 3
Coverage

unittest1 isGameOver()
This unit test is getting 100% statement coverage. It is also getting 100% branch coverage. The function is fairly short so it was not a problem to test everything. The game is over with 0 Province cards so the boundary with 1 Province card was tested and passed. Exactly 3 supply decks were emptied which also signals the end of the game. In future tests 2 and 4 decks could be used for better boundary testing.

Unittest2 scoreFor()
This test did receive full coverage on statements but not on branch coverage. Not all cards were in a hand but those tests would have been similar. A bug was noted looking at the code and would've need to have been tested. Two for loops make use of discardCount. One should've been deckCount. The only boundary tested was if one card was in hand. Another boundary that could be tested is if the handCount was at the maximum size.

Unittest3 discardCard()
This test is getting 100% statement and branch coverage and was called 64 times. A card was disCarded from each position of a 5 card hand which tested the boundary of removing from the first and last position of a hand.


Unittest4 gainCard()
This test does not get full statement or branch coverage. One line of code is not executed because there is no test if the supply is empty. The other branches are fairly evenly taken and the function is called 62 times. No boundary testing was done but future tests could include a test if the supply count is 1.


cardtest1 smithyFunc()
This test does not get full statement or branch coverage. This code had an error in the for loop which prevents it from ever running. If the code is corrected the coverage will be 100%. The function is only called twice so a future test could include the smithy function being called in a loop. No boundary testing was done.

cardtest2 adventurerFunc()
This test does not get full coverage on statements or branches. The condition where the deckCount is 0 is never taken. Also the if/else statement is fairly evenly taken with the if taken 4 times and else taken 2 times. The function is called 10 times so calling it more would ensure that they are both being executed an appropriate number of times. No boundary testing was done. 

cardtest3 stewardFunc()
This test is getting 100% coverage on statements and branches. The function is called 30 times and the branches are all getting good coverage. No boundary testing was done but in a future test trashing a card from the first and last position of a hand could be performed.

cardtest4 remodelFunc()
This test does not get full coverage on statements or branches. The condition where a card costs more than 2 coins than another card is never tested. The other branch that isn't taken needs to be more fully tested. No boundary testing was done.
