David Crisman
CS 362 Assignment 5
5/14/2015

This report details bugs found in my teammates code, Daryl Cooke (cooked).  

Between the card tests I wrote and the refactored card effects Daryl wrote, we overlapped on three functions:  effectSmithy(), effectAdventurer(), and effectCouncilRoom().

Below is a comprehensive report on the bugs.  Discovered bugs are precluded by three exclamation points (!!!).  This can be used to skip through this document to places where bugs are discovered.

I first ran my unit tests on Daryl's code.  Below were the initial results:


*********************

Testing shuffle() method

*********************



Warning, all decks do not have the same amount of cards. 

Game 1, Player 1 Deck Count: 5.

Game 1, Player 2 Deck Count: 10.

Game 2, Player 1 Deck Count: 5.

Game 2, Player 2 Deck Count: 10.

Test Passed: Game 1, Player 1 discard pile is 0. 

Test Passed: Game 1, Player 2 discard pile is 0. 

Test Passed: Game 2, Player 1 discard pile is 0. 

Test Passed: Game 2, Player 2 discard pile is 0. 

Shuffle for Game 1, Player 1 successful. 

Shuffle for Game 2, Player 1 successful. 

Test Passed: The two decks were different after calls to shuffle. 

Test Passed: shuffle() observed that the deck was empty. 


Analysis - 

The shuffle() functions seemed to operate as expected, but for some reason the deck count between the two players is not consistent.  It is assumed then that the deck count does not include the cards in the hand.  
Two significant tests passed.  It handled an empty deck appropriately, and shuffling two different times yielded different "random" results.

Coverage - function shuffle called 7 returned 100% blocks executed 100%


My tests executed 100% of the blocks from the function shuffle().  This isn't a surprising result from black box testing.  It would only be alarming if it was less than 100%.

*********************

Testing endTurn() method

*********************



Test Passed, turn passed to another player. 

Test Failed, Coins were not reset. Coins: 4.

Test Passed, Buys were reset to 1.

Test Passed, Hand was discarded.

Test Passed, player reset to 0 after being out of range.

Analysis - 

Only one test failed.  We expected coins to be reset to 0 upon the end of the turn.  For some reason they were at 4.  This could be because the coins are not reset until the beginning of the next hand rather than the end of a hand. 

Coverage - function endTurn called 2 returned 100% blocks executed 100%

My tests executed 100% of the blocks from the function endTurn().  This isn't a surprising result from black box testing.  It would only be alarming if it was less than 100%. 




*********************

Testing isGameOver() method

*********************



Test Passed, Game 1 was just initialized, it shouldn't be over. 

Test Passed, Game 2 was just initialized, it shouldn't be over. 

Test Passed, Game 1 has no more provinces. 

Test Failed, Game 1 has an invalid number of provinces. 

Test Passed, Game 2 has three piles depleted. 

Test Passed, Game 2 has three piles depleted. 

Test Failed, Game 2 One of the piles that was depleted isn't in play. 


Analysis - 

The first test that failed was when we set the number of provinces to -1 and tested to see if it thought the game was over.  It failed in this test.  Of course, there should never be -1 provinces.  The final test depleted three piles.  The duchy pile, the estate pile, and feast pile.  However, the feast pile was not in the game. Unfortunately, the function thought the game should be over in this case.


Coverage - function isGameOver called 7 returned 100% blocks executed 100%


My tests executed 100% of the blocks from the function isGameOver().  This isn't a surprising result from black box testing.  It would only be alarming if it was less than 100%. 


*********************

Testing buyCard() method

*********************



Buy 1 smithy successful, now have 1. 

Buy 1 smithy successful, now have 2. 
Buy 1 smithy successful, now have 3. 

Buy 1 smithy successful, now have 4. 

Buy 1 smithy successful, now have 5. 

Buy 1 smithy successful, now have 6. 

Buy 1 smithy successful, now have 7. 

Buy 1 smithy successful, now have 8. 

Buy 1 smithy successful, now have 9. 

Buy 1 smithy successful, now have 10. 

Buy failed. 

Test Passed, buy should be 1 or fewer.

Test Passed, coins should be 10 or fewer. 

Test Passed, didn't have the money for a province.

Test Passed, didn't have the money for an adventurer card.

Test Passed, allowed to buy mine.

Test Passed, didn't allow me to buy mine when I couldn't afford it.

Test Passed, didn't allow me to buy curse when I had no buys.

Test Passed, didn't allow me to buy feast when it wasn't in the set of kingdom cards.



Analysis - 

All tests passed for this function.

Coverage - function buyCard called 17 returned 100% blocks executed 100%
 

My tests executed 100% of the blocks from the function buyCard().  This isn't a surprising result from black box testing.  It would only be alarming if it was less than 100%. 

*************************

Next I ran my card tests and random tests for the below cards.  Displayed are the results and analysis:


*********************

Testing Smithy card effect

*********************



Test Failed, something else happened; Hand does not have 2 additional cards. 

Test Failed, something else happened; 1 card was not added to the discard. 

Test Failed, something else happened; Player 1 from both games do not have the same size deck. 




Analysis - 

My three simple tests all failed.  After investigating the code, I saw:  All three tests would fail from one bug:

!!!  SMITHY BUG #1 - Card not discarded:

The smithy card is not discarded at the end of the function.  

Coverage - function effectSmithy called 1 returned 100% blocks executed 100%

My tests executed 100% of the blocks from the function effectSmithy().  This isn't a surprising result from black box testing.  It would only be alarming if it was less than 100%. 

*********************

Testing Adventurer card effect

*********************


CardTests
--------------

Test Failed, something else happened; 2 cards were not added to the hand. 

Test Passed, first card added was a treasure card. 

Test Failed, second card added was not a treasure card. 

Test Passed, At least 1 card was added to the discard. 

Test Passed, Coins were not altered. 

Test Passed, Buys were not altered. 

Test Failed, something else happened; Player 1 from both games do not have the same size deck. 




Random Tests
--------------

Test 1 Check to see if 2 cards were added to the hand   -- PASSED 0 out of 1000.  0%.

Test 2 Check to see if the first card was a treasure    -- PASSED 257 out of 1000.  25%.

Test 3 Check to see if the second card was a treasure   -- PASSED 225 out of 1000.  22%.

Test 4 Check to see if the discard contains more cards  -- PASSED 868 out of 1000.  86%.

Test 5 Check if Actions were decreased by 1             -- PASSED 8 out of 1000.  0%.

Test 6 Check if Coins were unaltered                    -- PASSED 857 out of 1000.  85%.

Test 7 Check if Buys were unaltered                     -- PASSED 840 out of 1000.  84%.

Test 8 Check if deck total is unaltered                 -- PASSED 0 out of 1000.  0%.

Analysis - 

None of the tests passed every time, and most of them did not pass more than half the time.  The random testing was a big help in revealing what was going on.  After investigating the code: 

!!!  ADVENTURER BUG #1 - handCount decremented inappropriately:

The cardDrawn assignment on line 1234 decrements the players hand. This works to reference the correct card the first pass in the while loop searching for treasure cards.  However, if the drawn card is not a treasure card, it is passed to the temp hand and the hand Count is further decremented.  From this point on, each card in the hand is written over.  Slowly the handCount decreases to 0 at which point undefined and difficult to predict behavoir occurs given that the memory spaces outside of the hand would begin being accessed.  It is also possible that the draw pile would eventually be completely exhausted and passed into the tempHand.  At that point, it would return -1 and undefined behavior would result as well.

Since my random tester randomly added cards to the hand, there were low odds that the drawn card would be a treasure card.  If it was, then it was likely to be examined twice in a row (unless it happened as the last card which is why when one card was perceived to be a treasure card, the second one was also.  This was a false positive as the function typically was actually looking at the same card to verify.  It turns out that the number of actions is not directly decremented in the card function, so this test should be disregarded.  The results from the number of coins, buys and discardCount can be assumed to be the result of the undefined behavior described above.  


Coverage - function effectAdventurer called 1002 returned 100% blocks executed 94%

My tests executed 100% of the blocks from the function effectAdventurer().  The fact that only 94% of the code was executed was a clue to the discovered bug.


*********************

Testing Council Room card effect

*********************

CardTests
--------------


Test Failed, something else happened; Hand does not have 3 additional cards. 

Test Failed, something else happened; 1 card was not added to the discard. 
Test Passed, other player's hand has 1 additional card. 

Test Passed, Coins were not altered. 

Test Passed, 1 Buy was added. 

Test Failed, something else happened; Player 1 from both games do not have the same size deck. 

Random Tests
--------------
Test 1 Check if 4 cards were added to the hand           -- PASSED 0 out of 1000.  0%.
Test 2 Check if discard pile has one additional card     -- PASSED 0 out of 1000.  0%.

Test 3 Check if Council Room card is on top of discard   -- PASSED 0 out of 1000.  0%.

Test 4 Check if 1 card was added to other player's hand  -- PASSED 1000 out of 1000.  100%.

Test 5 Check if Actions were decreased by 1              -- PASSED 0 out of 1000.  0%.

Test 6 Check if Coins were unaltered                     -- PASSED 1000 out of 1000.  100%.

Test 7 Check if Buys were increased by 1                 -- PASSED 1000 out of 1000.  100%.

Test 8 Check if deck total is unaltered                  -- PASSED 0 out of 1000.  0%.

Analysis - 

In this case my tests either passed every time, or failed every time.  After investigating the code: 

!!!  COUNCIL ROOM BUG #1 - Current player gets 5 cards:
The For loop that begins on line 1284 will execute for all players in the game, including the current player and draw an additional card.  If the loop to draw 4 cards at the top were reduced to 3, or if there was a conditional check implemented to be sure the current player wasn't receiving an additional card, this would be solved. It turns out that the number of actions is not directly decremented in the card function, so this test should be disregarded. 

Coverage - function effectCouncilRoom called 1002 returned 100% blocks executed 100%

My tests executed 100% of the blocks from the function effectCouncilRoom().  This isn't a surprising result from black box testing.  It would only be alarming if it was less than 100%. 
