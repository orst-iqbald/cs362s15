//Author:                 Howard Chen
//Class/Assignment:       CS362/Assignment 4
//Term:                   Spring 2015
//File Name:              randomhistory.txt

-------------------------------------------------------------------------------
RUN ALL RANDOM TESTS (with coverage): 
  make coverallrand
    - OUTPUT: randomtestadventurer.out
              randomtestcard.out
    
RUN SINGLE TESTS (with coverage): 
  make randadvcov
    - OUTPUT: randomtestadventurer.out
  make randcardcov
    - OUTPUT: randomtestcard.out
-------------------------------------------------------------------------------
randomtestadventurer.c: cardAdventurer()
Lines executed:13.15% of 578
Branches executed:8.67% of 415
Taken at least once:7.71% of 415
Calls executed:5.43% of 92

randomtestadventurer.c runs 10 iterations of random game states through 
cardAdventurer(). The randomtestadventurer.c generates random numbers of players,
deckCounts, discardCounts, handCounts, and playedCardCount for each game state.
The report indicates that for the function cardAdventurer() called 10, returned
100% blocks executed 100%.  This is a good sign to get this kind of coverage. My
previous test only had 93% executed and was modified to include the line that
had not been executed. My previous coverage was 12.80% of dominion.c. There was
a slight increase in coverage from the last iteration.

-------------------------------------------------------------------------------
randomtestcard.c: cardVillage()
Lines executed:14.19% of 578
Branches executed:9.16% of 415
Taken at least once:8.19% of 415
Calls executed:7.61% of 92

randomtestcard.c runs 10 iterations of random game states through cardVillage().
The randomtestcard.c generates random numbers of players, deckCounts, 
discardCounts, handCounts, and playedCardCount for each game state. The report
indicates that for the function cardVillage() called 1, returned 100% blocks
executed 100%. Much like previous tests, it is a good sign to get this kind of
coverage. Again this does not mean all bugs were found, just a good indication
that bugs are more likely to be caught. My previous coverage was 13.84% which 
is slightly lower than my new test. 

-------------------------------------------------------------------------------
Assignment 4 - Data Analysis

The last assignment I had already implemented the random tester, but I was
still able to increase the coverage for both random testers. Each random tester
will output the tests failed at each iteration. This is very helpful in
pinpointing the location of the errors. This example if from the test report of
randomtestcard.out: 
    
    cardVillage() FAIL: +2 ACTIONS
    cardVillage() INFO: Adding TOO MANY ACTIONS
    cardVillage() FAIL: +1 DRAW
    cardVillage() INFO: Does NOT DRAW CORRECT # of Cards
    TEST #9: cardVillage() FAILED 2 out of 3 TESTS

These errors are not surprising since these are the errors I had introduced into
cardVillage(). If this random tester was implemented on someone else's
dominion.c code, I am confident that I would be able to find the source of the
error (at least in the village and adventurer cards).


