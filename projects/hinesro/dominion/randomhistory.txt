## Reflection on Random Testing

After doing this assignment, random testing seems to make much more sense 
than writing specific unit tests. One of the main reasons for using computers
is to automate tasks that would be boring, redundant, or time consuming for
humans to perform manually. The same goes for writing tests. But the benefits
seem to go beyond spending less time for more tests, random testing might also
explore cases and inputs that a human writing a single unit test might not
consider for whatever reason (or might not think it's worth the time 
investment).  


## callCouncilRoom() random test -- randomtestcard.c

The test runs with randomly generated input a predetermined number of times. 
The coverage in reference only to the function it's testing is much better
than what gets reported by gcov (which references the entire dominion file, 
not just the functions under test), resulting in 100% statement coverage for
callCouncilRoom, and 95% branch coverage. This is in contrast to the 
standard unit test, which achieved much less coverage due to the lack of 
automatically generated tests with huge input ranges.

Coverages (dominion.c):
	Branch: 		20.17%
    Line: 			23.58%
	Taken >= 1x: 	17.39%
    Total calls: 	12.77%


## callAdventurer() random test -- randomtestadventurer.c

Like randomtestcard, randomtestadventurer runs with randomly generated 
input a pretermined number of times. It's able to achieve full branch
and statement coverage within the function under test (callAdventurer()).
The random tester is a big improvement over the last unit test of the
adventurer card, achieving more coverage with less code by automating
the process of generating different test cases. Although many of the 
tests are likely redundant, some of them are bound to be more interesting
edge cases, and the effort required in designing these is not needed,
as randomization takes care of this for us. 

Coverages (dominion.c):
	Branch: 		22.73%
	Line:			25.80%
	Taken >= 1x:	20.54%
	Total calls:	12.77%
