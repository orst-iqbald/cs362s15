Discuss gcov findings from Assignment3




TESTING whoseTurn()...

Lines executed:16.31% of 558
Branches executed:15.83% of 417
Taken at least once:12.71% of 417
Calls executed:7.37% of 95

function whoseTurn called 3 returned 100% blocks executed 100%
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}

This test was very thorough on this smaller function. 100% coverage. No branches to cover.


================================================================================================================================



TESTING numHandCards()...

Lines executed:16.67% of 558
Branches executed:15.83% of 417
Taken at least once:12.71% of 417
Calls executed:8.42% of 95

function numHandCards called 1 returned 100% blocks executed 100%
        1:  311:int numHandCards(struct gameState *state) {
        1:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}

This test was thorough as well. Executed all lines within it. 100% coverage. No branches to cover.



================================================================================================================================




TESTING supplyCount()...

Lines executed:17.03% of 558
Branches executed:15.83% of 417
Taken at least once:12.71% of 417
Calls executed:8.42% of 95

function supplyCount called 1 returned 100% blocks executed 100%
        1:  320:int supplyCount(int card, struct gameState *state) {
        1:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:

Another one with no branches. 100% coverage. A thorough test.



================================================================================================================================




TESTING getCost()...

Lines executed:22.40% of 558
Branches executed:22.54% of 417
Taken at least once:19.42% of 417
Calls executed:8.42% of 95

function getCost called 28 returned 100% blocks executed 100%
       28:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:


This test was very thorough. Covered every branch and every possibility, including the error condition of -1.


================================================================================================================================


Testing Adventurer card...

Lines executed:24.19% of 558
Branches executed:24.46% of 417
Taken at least once:20.62% of 417
Calls executed:9.47% of 95

function adventurerCard called 1 returned 100% blocks executed 64%
        1: 1271:int adventurerCard(int currentPlayer, int drawntreasure, struct gameState *state) {
        -: 1272:  int cardDrawn;
        1: 1273:  int z = 0;// this is the counter for the temp hand
        -: 1274:  int temphand[MAX_HAND];// moved above the if statement
        -: 1275:
        4: 1276:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2: 1277:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1278:        shuffle(currentPlayer, state);
call    0 never executed
        -: 1279:    }
        -: 1280: 
        2: 1281:    drawCard(currentPlayer, state);
call    0 returned 100%
        2: 1282:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1283: 
        2: 1284:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2: 1285:      drawntreasure++;
        -: 1286:    }else{
    #####: 1287:      temphand[z]=cardDrawn;
    #####: 1288:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1289:      z++;
        -: 1290:    }
        -: 1291:  }
        -: 1292:
        2: 1293:  while(z-1>0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1294:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1295:    z=z-1;
        -: 1296:  }
        -: 1297:  
        1: 1298:  return 0;
        -: 1299:}

Not so good test. Only executed 64% and had sopme branches never hit. Need to develop portion of the test that checks for non-treasure cards drawn to improve thsi one.




================================================================================================================================



Testing Smithy card...

Lines executed:26.70% of 558
Branches executed:26.38% of 417
Taken at least once:21.82% of 417
Calls executed:11.58% of 95

function smithyCard called 1 returned 100% blocks executed 100%
        1: 1301:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -: 1302:    
        -: 1303:    //+3 Cards
        -: 1304:    int i;
        4: 1305:    for (i = 0; i < 3; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1306:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1307:    }
        -: 1308:    
        -: 1309:    //discard card from hand
        1: 1310:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -: 1311:    
        1: 1312:    return 0;
        -: 1313:}

Thorough test. Covered all lines and branches.




================================================================================================================================



Testing Great Hall card...

Lines executed:27.96% of 558
Branches executed:26.38% of 417
Taken at least once:22.06% of 417
Calls executed:13.68% of 95

function great_hallCard called 1 returned 100% blocks executed 100%
        1: 1315:int great_hallCard(int currentPlayer, struct gameState *state, int handPos){
        -: 1316:  //+1 Card
        1: 1317:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1318:      
        -: 1319:  //+1 Actions
        1: 1320:  state->numActions--;
        -: 1321:      
        -: 1322:  //discard card from hand
        1: 1323:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1324:  
        1: 1325:  return 0;
        -: 1326:}

Thorough test. Covered all lines.




================================================================================================================================

Testing Outpost card...

Lines executed:28.67% of 558
Branches executed:26.38% of 417
Taken at least once:22.06% of 417
Calls executed:14.74% of 95

function outpostCard called 1 returned 100% blocks executed 100%
        1: 1328:int outpostCard(int currentPlayer, struct gameState *state, int handPos){
        -: 1329:  //set outpost flag
        1: 1330:  state->outpostPlayed++;
        -: 1331:
        -: 1332:  //discard card
        1: 1333:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -: 1334:  
        1: 1335:  return 0;
        -: 1336:}

Thorough test. Covered all lines.