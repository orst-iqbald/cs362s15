Step 1: The random character

I decided that the simplest approach would be to create an array that consists solely of characters that will be useful at some point in the program and then randomly generate indicies for this array, returning whichever character gets randomly indexed. Since the first phase of the program requires only a single character match, this was not that complicated. There is always only one character that must be matched, and your progress builds. You never can fall back into a previous state once you have advanced.

Step 2: The random string

(NOTE: I want to say here that I did make one tiny alteration to the body of testme(), which is the inclusion of the free() function to clean up the allocated character array that I produce inside of inputString(). I remember this being good practice from previous courses. If there is an alternate way to return the string that avoids having to use malloc, I couldn't remember it. Hopefully this isn't a problem.)

This was slightly more complicated, but still not all that bad. To begin, I created an array that consisted only of useful characters. Unlike in step 1, however, they now had to all be lined up in the correct order. So I created a second array that would hold all of the indicies that I would need.

In the character array, I only had 1 occurrence of 'e'. This is because reducing the length of the random order I need to 5 instead of 6 brings the number of possible permutations down from 720 to 120, dramatically improving performance, I imagine.

I created a counter variable and set it to 0. I then randomly generated the first index value (0 to 4). This first value is always stored. Then I increment the counter and move on to the second index value. The second value is compared to the first stored value, and, if it is found to be identical, is discarded. This continues for each successive index that is generated: I compare it to the previously generated indicies to make sure that each generated index is a unique value, not a repeat. This process guarantees that I always have some combination of the numbers 0, 1, 2, 3, and 4.

Once I have these numbers, I use them as indicies into the character array and assign the characters to a character pointer in the appropriate order. The character at index #2 is always inserted into the character string that is going to be returned twice, in the appropriate places. I then return the string and it gets checked against the conditional statement. If it passes the test, and if I am already up to the appropriate state, then the error message is displayed and the program is terminated.