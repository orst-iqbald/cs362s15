#Documentation of dominion project randomtests
Author: Kevin Parks

randomtestadventurer: doAdventurer
    The random tester does the bulk of work by generating a randomized
    deck by which doAdventurer can draw from. Having the deck randomly
    generated gives us the ability to generate cases where
    few or many cards must be drawn before 2 treasure cards are found
    and the procedure can complete.
    
    Of primary interest with doAdventurer are cases when the deck is
    or becomes empty during the drawing phase of the procedure. In these
    cases, we depend on methods like shuffle and drawCard to
    reorganize the deck in such a way that we can continue drawing
    cards until we reach a treasure card, or some exit condition occurs.
    
    There remains a deadlock case with the shuffle method that always
    returns '-1' when the deck is empty. This is because the drawCard 
    method has been left responsible for moving the discarded pile 
    back into the deck and then calling shuffle on its own. However, 
    in the case of the adventurer card method, a call to shuffle
    occurs in the case the deck is empty, but before a call to
    drawCard has been made, so the procedure exits in this case,
    resulting in fewer than 2 treasure cards being drawn.
    
    For the deadlock shuffle case, my random tester simply checks
    that a number of treasure cards between 0 and 2 have been
    realized in the player's hand. This test would then allow
    for the following rule to occur, yet the test still pass:
    
    “Adventurer – If you have to shuffle in the middle, shuffle. 
    Don’t shuffle in the revealed cards as these cards do not go 
    to the Discard pile until you have finished revealing cards. 
    If you run out of cards after shuffling and still only have 
    one Treasure, you get just that one Treasure.”
    http://dominiongame.info/2012/08/dominion-cards-adventurer/
    
    As we can't move past the call to shuffle when an empty deck
    is encountered, the random tester was unable to reach branches
    in the conditional call to drawCard. Specifically, we never reach
    the branch when shuffle doesn't return -1 because we only reach
    this branch when the deck is empty, which always causes shuffle
    to return -1. Additionally, the branch when drawCard returns -1
    could never be realized as the condition of having an empty
    deck and discard had to be true, in which case, the previously
    mentioned shuffle condition would occur first.
    
    Coverage of this test compared to the non-random tester was the
    same, although, the random test method did seem to be easier
    to generate and implement than the non-random method.

randomtestcard: doSteward
    The random tester again does the bulk of the work for this test,
    this time by generating a random player's hand by either adding
    or removing from the initialized gameState hand. Then, it
    randomly selects which action the doSteward function should take,
    of which there are only 3: +2 coins, +2 cards, trash 2 cards.
    
    The +2 coins is trivial as it simply adds two coins to a running
    sum. The +2 cards case has one issue, when the hand count was 0
    prior to running the test. In this case, the player would draw
    two cards that our function is unaware of, and have to discard
    1 of them at the end of the procedure. I was unable to track this
    card and test for accuracy due to this.
    
    The most interesting case is the trash 2 cards. This causes issues
    because the function has no checks as to the current state of the
    user's hand prior to simply trashing cards. For example, if the player
    had only 1 card in their hand to begin with, the trash case discards
    2 cards and then we must discard a final card at the end of the function.
    How can the player discard more cards then are in his/her hand?
    
    The rules are clear on this interaction:
    "If you choose to trash 2 cards and have 2 or more cards in your hand
    after playing the Steward, then you must trash exactly 2 cards.
    You may choose to trash 2 cards, even if you only have 1 card left in 
    your hand after playing the Steward; just trash the remaining card in 
    your hand."
    http://wiki.dominionstrategy.com/index.php/Steward
    
    There is no issue in my test when the player enters the function
    having at least 3 cards. However, when we have less than this,
    the function carelessly calls discard on a handPos in the player's
    hand that doesn't exist. Thus, we end up having an incorrect hand
    count and end up with a '-1' card in the playedCards pile. For these
    cases instead of using an assert, I switched to a print statement
    so that the test could continue. This happens often and halted the
    test too early in many cases.
    
    The issues mentioned above didn't hinder our coverage of the function.
    I was able to obtain 100% branch and statement coverage again, the
    same as with the non-random tester. Again, this random method did
    seem easier to implement.