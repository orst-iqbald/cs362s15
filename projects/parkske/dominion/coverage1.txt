#coverage discussion of Assignment 2 for dominion.c
#author: Kevin Parks

Summary:
    Lines executed: 31.09% of 595
    Branches executed: 25.06% of 431
    Taken at least once: 22.27% of 431
    Calls executed: 22.11% of 95
    
    We've barely scratched the surface of dominion.c with these tests. We're missing out on what
    I would expect to be major impact functions during gameplay by not having ever called the
    following: playCard, buyCard, endTurn, etc. These are functional critical to gameplay and
    definitely need to have very high confidence before the game could be played reliably
    by anyone.

Unittest1: updateCoins
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    This test considers cases when the player's hand has 0 coin cards, or all of 1 coin card (copper|silver|gold).
    The test does force each branch to be executed, but could benefit from additional tests for modification of the
    bonus value. Furthermore, only >= 0 values were tested for each. It would be good to include more boundary cases
    by including negative values as well.
    
Unittest2: gainCard
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    This test is fairly robust as it does test the expected bounds of the game by attempting to run gainCard
    on every card type available in the game. As such, gainCard must report back the state of that card 
    properly in order for the function to work. I can't think of anything to add to this test at the moment.
    
Unittest3: discardCard
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    This test could be improved by adding more randomization to which card is discarded from the player's hand, as
    well as randomizing which flag value is set. Presently, I randomly select either the 0 or 1 index card to
    discard, and then swap the flag every other run. While this allowed me to hit every branch, there are many
    combinations of this function that are technically missed. For example, discarding the last card in a full hand.

Unittest4: isGameOver
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    This method is pretty straight-forward. Either the province stack is empty, or 3 other supply piles are empty.
    If either of these is true, the game is over. My test simply selects a random value of 0 or 1 for  province
    count, then tests the outcome of the function. Then, it does a similar task for the supply piles, randomly
    setting these to a value between 0 - 7, and running the test many times in order to achieve some results
    when the isGameOver state is met. To increase the strength of this test, the two sub-tests should be combined
    into a 3rd test that allows them to interact with each other. They are separate now, which implies when combined
    they should work, but this integeration should have a test associated with it.
    
Cardtest1: adventurer
    Returned: 100%
    Blocks Executed: 95%
    Branches Missed: 2
    
    Testing this method proved difficult as it relies on other functions, drawCard and shuffle, to have taken care
    of some preconditions. Specifically, it tries to overcome the case of an empty deck by calling shuffle,
    but, shuffle cannot complete when the deck is empty. As such, it was actually impossible for me to
    reach a few of these branches as a state in the game couldn't be created that would satisfy each
    previous branch in order to reach the sub-branch. These are reasonable guards for run-time, but for testing
    I believe these missed branches can be safely ignored.
    
Cardtest2: smithy
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    This method is straight-forward, only relying on testing of a few outcomes. However, knowing what
    I know about how gainCard and shuffle work, some additional preconditions of having an empty
    deck prior to calling should be added to achieve more confidence in the functionality. In addition,
    this test needs an extra loop to call the primary test loop many more times.
    
Cardtest3: village
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    Again, straight-forward function. This needs an added precondition for an empty deck that would
    cause some additional behavior to occur in the drawCard call, otherwise the test covers sufficiently.
    It should also have more runs and randomization added for the state to increase confidence.
    
Cardtest4: steward
    Returned: 100%
    Blocks Executed: 100%
    Branches Missed: 0
    
    This needs an added precondition for an empty deck that would cause some additional behavior 
    to occur in the drawCard call. Testing whether a card has truly been trashed also appears
    to be difficult to track as these cards are simply removed from the hand in the discardCard
    function. That method should definitely have this behavior tested with confidence.
    