        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
 23949135:    8:int compare(const void* a, const void* b) {
 23949135:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
 23949135:   11:	if (*(int*)a < *(int*)b)
  6386436:   12:		return -1;
 17562699:   13:	return 0;
        -:   14:}
        -:   15:
   798404:   16:struct gameState* newGame() {
   798404:   17:	struct gameState* g = malloc(sizeof(struct gameState));
   798404:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
   798304:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
   798304:   44:	SelectStream(1);
   798304:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
   798304:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
        1:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
   798303:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
  8781333:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
 87813330:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
 79830300:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
   798303:   73:	if (numPlayers == 2)
        -:   74:	{
   798300:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
        3:   77:	else if (numPlayers == 3)
        -:   78:	{
        3:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
   798303:   87:	if (numPlayers == 2)
        -:   88:	{
   798300:   89:		state->supplyCount[estate] = 8;
   798300:   90:		state->supplyCount[duchy] = 8;
   798300:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
        3:   95:		state->supplyCount[estate] = 12;
        3:   96:		state->supplyCount[duchy] = 12;
        3:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
   798303:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
   798303:  102:	state->supplyCount[silver] = 40;
   798303:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
 16764363:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
131719995:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
123736965:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
  7983030:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
  3193212:  115:					if (numPlayers == 2){
  1596600:  116:						state->supplyCount[i] = 8;
        -:  117:					}
        6:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
  6386424:  122:					state->supplyCount[i] = 10;
        -:  123:				}
  7983030:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
115753935:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
  2394912:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
  1596609:  140:		state->deckCount[i] = 0;
  6386436:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
  4789827:  143:			state->deck[i][j] = estate;
  4789827:  144:			state->deckCount[i]++;
        -:  145:		}
 12772872:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
 11176263:  148:			state->deck[i][j] = copper;
 11176263:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
  2394912:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
  1596609:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
  2394912:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{
        -:  165:		//initialize hand size to zero
  1596609:  166:		state->handCount[i] = 0;
  1596609:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
 22352484:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
 21554181:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
   798303:  182:	state->outpostPlayed = 0;
   798303:  183:	state->phase = 0;
   798303:  184:	state->numActions = 1;
   798303:  185:	state->numBuys = 1;
   798303:  186:	state->playedCardCount = 0;
   798303:  187:	state->whoseTurn = 0;
   798303:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
  4789818:  192:	for (it = 0; it < 5; it++){
  3991515:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
   798303:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
   798303:  198:	return 0;
        -:  199:}
        -:  200:
  1596609:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
  1596609:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
  1596609:  209:	if (state->deckCount[player] < 1)
    #####:  210:		return -1;
  1596609:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 19159308:  214:	while (state->deckCount[player] > 0) {
 15966090:  215:		card = floor(Random() * state->deckCount[player]);
 15966090:  216:		newDeck[newDeckPos] = state->deck[player][card];
 15966090:  217:		newDeckPos++;
 53486382:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
 37520292:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
 15966090:  221:		state->deckCount[player]--;
        -:  222:	}
 17562699:  223:	for (i = 0; i < newDeckPos; i++) {
 15966090:  224:		state->deck[player][i] = newDeck[i];
 15966090:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
  1596609:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG)
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
   991813:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
   991813:  326:	int count = 0;
        -:  327:
144960202:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
143968389:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
150754656:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
149762843:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
154197094:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
153205281:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
   991813:  343:	return count;
        -:  344:}
        -:  345:
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
      100:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
      100:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
       10:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       90:  401:	j = 0;
     2340:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
     2250:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
      222:  406:			j++;
        -:  407:		}
        -:  408:	}
       90:  409:	if ( j >= 3)
        -:  410:	{
       40:  411:		return 1;
        -:  412:	}
        -:  413:
       50:  414:	return 0;
        -:  415:}
        -:  416:
     8097:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
     8097:  420:	int score = 0;
        -:  421:	//score from hand
     8097:  422:	int curses = 0, estates = 0, duchys = 0, provinces = 0, great_halls = 0, gardenss = 0;
  1961399:  423:	for (i = 0; i < state->handCount[player]; i++)
        -:  424:	{
  1953302:  425:		if (state->hand[player][i] == curse) { score = score - 1; curses++; };
  1953302:  426:		if (state->hand[player][i] == estate) { score = score + 1; estates++; };
  1953302:  427:		if (state->hand[player][i] == duchy) { score = score + 3; duchys++; };
  1953302:  428:		if (state->hand[player][i] == province) { score = score + 6;provinces++;  };
  1953302:  429:		if (state->hand[player][i] == great_hall) { score = score + 1;great_halls++; };
  1953302:  430:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); gardenss++; };
        -:  431:	}
        -:  432:	//printf("%d\n%d\n%d\n%d\n%d\n%d\n",curses,estates,duchys,provinces,great_halls,gardenss);	
        -:  433:
        -:  434:	//score from discard
  1946812:  435:	for (i = 0; i < state->discardCount[player]; i++)
        -:  436:	{
  1938715:  437:		if (state->discard[player][i] == curse) { score = score - 1; };
  1938715:  438:		if (state->discard[player][i] == estate) { score = score + 1; };
  1938715:  439:		if (state->discard[player][i] == duchy) { score = score + 3; };
  1938715:  440:		if (state->discard[player][i] == province) { score = score + 6; };
  1938715:  441:		if (state->discard[player][i] == great_hall) { score = score + 1; };
  1938715:  442:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:	}
        -:  444:
        -:  445:	//score from deck
  1946812:  446:	for (i = 0; i < state->discardCount[player]; i++)
        -:  447:	{
  1938715:  448:		if (state->deck[player][i] == curse) { score = score - 1; };
  1938715:  449:		if (state->deck[player][i] == estate) { score = score + 1; };
  1938715:  450:		if (state->deck[player][i] == duchy) { score = score + 3; };
  1938715:  451:		if (state->deck[player][i] == province) { score = score + 6; };
  1938715:  452:		if (state->deck[player][i] == great_hall) { score = score + 1; };
  1938715:  453:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:	}
        -:  455:
     8097:  456:	return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:	int i;
        -:  461:	int j;
        -:  462:	int highScore;
        -:  463:	int currentPlayer;
        -:  464:
        -:  465:	//get score for each player
    #####:  466:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:	{
        -:  468:		//set unused player scores to -9999
    #####:  469:		if (i >= state->numPlayers)
        -:  470:		{
    #####:  471:			players[i] = -9999;
        -:  472:		}
        -:  473:		else
        -:  474:		{
    #####:  475:			players[i] = scoreFor (i, state);
        -:  476:		}
        -:  477:	}
        -:  478:
        -:  479:	//find highest score
    #####:  480:	j = 0;
    #####:  481:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:	{
    #####:  483:		if (players[i] > players[j])
        -:  484:		{
    #####:  485:			j = i;
        -:  486:		}
        -:  487:	}
    #####:  488:	highScore = players[j];
        -:  489:
        -:  490:	//add 1 to players who had less turns
    #####:  491:	currentPlayer = whoseTurn(state);
    #####:  492:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:	{
    #####:  494:		if ( players[i] == highScore && i > currentPlayer )
        -:  495:		{
    #####:  496:			players[i]++;
        -:  497:		}
        -:  498:	}
        -:  499:
        -:  500:	//find new highest score
    #####:  501:	j = 0;
    #####:  502:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:	{
    #####:  504:		if ( players[i] > players[j] )
        -:  505:		{
    #####:  506:			j = i;
        -:  507:		}
        -:  508:	}
    #####:  509:	highScore = players[j];
        -:  510:
        -:  511:	//set winners in array to 1 and rest to 0
    #####:  512:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:	{
    #####:  514:		if ( players[i] == highScore )
        -:  515:		{
    #####:  516:			players[i] = 1;
        -:  517:		}
        -:  518:		else
        -:  519:		{
    #####:  520:			players[i] = 0;
        -:  521:		}
        -:  522:	}
        -:  523:
    #####:  524:	return 0;
        -:  525:}
        -:  526:
  3991517:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:	int deckCounter;
  3991517:  530:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:
        -:  532:		//Step 1 Shuffle the discard pile back into a deck
        -:  533:		int i;
        -:  534:		//Move discard to deck
    #####:  535:		for (i = 0; i < state->discardCount[player];i++){
    #####:  536:			state->deck[player][i] = state->discard[player][i];
    #####:  537:			state->discard[player][i] = -1;
        -:  538:		}
        -:  539:
    #####:  540:		state->deckCount[player] = state->discardCount[player];
    #####:  541:		state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:		//Shufffle the deck
    #####:  544:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:
        -:  546:		if (DEBUG){//Debug statements
        -:  547:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:		}
        -:  549:
    #####:  550:		state->discardCount[player] = 0;
        -:  551:
        -:  552:		//Step 2 Draw Card
    #####:  553:		count = state->handCount[player];//Get current player's hand count
        -:  554:
        -:  555:		if (DEBUG){//Debug statements
        -:  556:			printf("Current hand count: %d\n", count);
        -:  557:		}
        -:  558:
    #####:  559:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:		if (deckCounter == 0)
    #####:  562:			return -1;
        -:  563:
    #####:  564:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:		state->deckCount[player]--;
    #####:  566:		state->handCount[player]++;//Increment hand count
        -:  567:	}
        -:  568:
        -:  569:	else{
  3991517:  570:		int count = state->handCount[player];//Get current hand count for player
        -:  571:		int deckCounter;
        -:  572:		if (DEBUG){//Debug statements
        -:  573:			printf("Current hand count: %d\n", count);
        -:  574:		}
        -:  575:
  3991517:  576:		deckCounter = state->deckCount[player];//Create holder for the deck count
  3991517:  577:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  3991517:  578:		state->deckCount[player]--;
  3991517:  579:		state->handCount[player]++;//Increment hand count
        -:  580:	}
        -:  581:
  3991517:  582:	return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:	switch( cardNumber )
        -:  588:	{
        -:  589:		case curse:
    #####:  590:			return 0;
        -:  591:		case estate:
    #####:  592:			return 2;
        -:  593:		case duchy:
    #####:  594:			return 5;
        -:  595:		case province:
    #####:  596:			return 8;
        -:  597:		case copper:
    #####:  598:			return 0;
        -:  599:		case silver:
    #####:  600:			return 3;
        -:  601:		case gold:
    #####:  602:			return 6;
        -:  603:		case adventurer:
    #####:  604:			return 6;
        -:  605:		case council_room:
    #####:  606:			return 5;
        -:  607:		case feast:
    #####:  608:			return 4;
        -:  609:		case gardens:
    #####:  610:			return 4;
        -:  611:		case mine:
    #####:  612:			return 5;
        -:  613:		case remodel:
    #####:  614:			return 4;
        -:  615:		case smithy:
    #####:  616:			return 4;
        -:  617:		case village:
    #####:  618:			return 3;
        -:  619:		case baron:
    #####:  620:			return 4;
        -:  621:		case great_hall:
    #####:  622:			return 3;
        -:  623:		case minion:
    #####:  624:			return 5;
        -:  625:		case steward:
    #####:  626:			return 3;
        -:  627:		case tribute:
    #####:  628:			return 5;
        -:  629:		case ambassador:
    #####:  630:			return 3;
        -:  631:		case cutpurse:
    #####:  632:			return 4;
        -:  633:		case embargo:
    #####:  634:			return 2;
        -:  635:		case outpost:
    #####:  636:			return 5;
        -:  637:		case salvager:
    #####:  638:			return 4;
        -:  639:		case sea_hag:
    #####:  640:			return 4;
        -:  641:		case treasure_map:
    #####:  642:			return 4;
        -:  643:	}
        -:  644:
    #####:  645:	return -1;
        -:  646:}
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:	int i;
        -:  651:	int j;
        -:  652:	int k;
        -:  653:	int x;
        -:  654:	int index;
    #####:  655:	int currentPlayer = whoseTurn(state);
    #####:  656:	int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:	int tributeRevealedCards[2] = {-1, -1};
        -:  659:	int temphand[MAX_HAND];// moved above the if statement
    #####:  660:	int drawntreasure=0;
        -:  661:	int cardDrawn;
    #####:  662:	int z = 0;// this is the counter for the temp hand
    #####:  663:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:		nextPlayer = 0;
        -:  665:	}
        -:  666:
        -:  667:
        -:  668:	//uses switch to select card and perform actions
    #####:  669:	switch( card )
        -:  670:	{
        -:  671:		case adventurer:
    #####:  672:			return h_adventurer(currentPlayer, state);
        -:  673:
        -:  674:		case council_room:
        -:  675:			//+4 Cards
    #####:  676:			for (i = 0; i < 4; i++)
        -:  677:			{
    #####:  678:				drawCard(currentPlayer, state);
        -:  679:			}
        -:  680:
        -:  681:			//+1 Buy
    #####:  682:			state->numBuys++;
        -:  683:
        -:  684:			//Each other player draws a card
    #####:  685:			for (i = 0; i < state->numPlayers; i++)
        -:  686:			{
    #####:  687:				if ( i != currentPlayer )
        -:  688:				{
    #####:  689:					drawCard(i, state);
        -:  690:				}
        -:  691:			}
        -:  692:
        -:  693:			//put played card in played card pile
    #####:  694:			discardCard(handPos, currentPlayer, state, 0);
        -:  695:
    #####:  696:			return 0;
        -:  697:
        -:  698:		case feast:
        -:  699:			//gain card with cost up to 5
        -:  700:			//Backup hand
    #####:  701:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  702:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  704:			}
        -:  705:			//Backup hand
        -:  706:
        -:  707:			//Update Coins for Buy
    #####:  708:			updateCoins(currentPlayer, state, 5);
    #####:  709:			x = 1;//Condition to loop on
    #####:  710:			while( x == 1) {//Buy one card
    #####:  711:				if (supplyCount(choice1, state) <= 0){
        -:  712:					if (DEBUG)
        -:  713:						printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:					if (DEBUG){
        -:  716:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:					}
        -:  718:				}
    #####:  719:				else if (state->coins < getCost(choice1)){
    #####:  720:					printf("That card is too expensive!\n");
        -:  721:
        -:  722:					if (DEBUG){
        -:  723:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:					}
        -:  725:				}
        -:  726:				else{
        -:  727:
        -:  728:					if (DEBUG){
        -:  729:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:					}
        -:  731:
    #####:  732:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:					x = 0;//No more buying cards
        -:  734:
        -:  735:					if (DEBUG){
        -:  736:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:					}
        -:  738:
        -:  739:				}
        -:  740:			}
        -:  741:
        -:  742:			//Reset Hand
    #####:  743:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:				state->hand[currentPlayer][i] = temphand[i];
    #####:  745:				temphand[i] = -1;
        -:  746:			}
        -:  747:			//Reset Hand
        -:  748:
    #####:  749:			return 0;
        -:  750:
        -:  751:		case gardens:
    #####:  752:			return h_gardens();
        -:  753:
        -:  754:		case mine:
    #####:  755:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  756:
    #####:  757:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  758:			{
    #####:  759:				return -1;
        -:  760:			}
        -:  761:
    #####:  762:			if (choice2 > treasure_map || choice2 < curse)
        -:  763:			{
    #####:  764:				return -1;
        -:  765:			}
        -:  766:
    #####:  767:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  768:			{
    #####:  769:				return -1;
        -:  770:			}
        -:  771:
    #####:  772:			gainCard(choice2, state, 2, currentPlayer);
        -:  773:
        -:  774:			//discard card from hand
    #####:  775:			discardCard(handPos, currentPlayer, state, 0);
        -:  776:
        -:  777:			//discard trashed card
    #####:  778:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:			{
    #####:  780:				if (state->hand[currentPlayer][i] == j)
        -:  781:				{
    #####:  782:					discardCard(i, currentPlayer, state, 0);
    #####:  783:					break;
        -:  784:				}
        -:  785:			}
        -:  786:
    #####:  787:			return 0;
        -:  788:
        -:  789:		case remodel:
    #####:  790:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  791:
    #####:  792:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  793:			{
    #####:  794:				return -1;
        -:  795:			}
        -:  796:
    #####:  797:			gainCard(choice2, state, 0, currentPlayer);
        -:  798:
        -:  799:			//discard card from hand
    #####:  800:			discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:			//discard trashed card
    #####:  803:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:			{
    #####:  805:				if (state->hand[currentPlayer][i] == j)
        -:  806:				{
    #####:  807:					discardCard(i, currentPlayer, state, 0);
    #####:  808:					break;
        -:  809:				}
        -:  810:			}
        -:  811:
        -:  812:
    #####:  813:			return 0;
        -:  814:
        -:  815:		case smithy:
    #####:  816:			return h_smithy(handPos, currentPlayer, state);
        -:  817:
        -:  818:		case village:
        -:  819:			//+1 Card
    #####:  820:			drawCard(currentPlayer, state);
        -:  821:
        -:  822:			//+2 Actions
    #####:  823:			state->numActions = state->numActions + 2;
        -:  824:
        -:  825:			//discard played card from hand
    #####:  826:			discardCard(handPos, currentPlayer, state, 0);
    #####:  827:			return 0;
        -:  828:
        -:  829:		case baron:
    #####:  830:			state->numBuys++;//Increase buys by 1!
    #####:  831:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  832:				int p = 0;//Iterator for hand!
    #####:  833:				int card_not_discarded = 1;//Flag for discard set!
    #####:  834:				while(card_not_discarded){
    #####:  835:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  836:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  837:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  838:						state->discardCount[currentPlayer]++;
    #####:  839:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  840:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  841:						}
    #####:  842:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  843:						state->handCount[currentPlayer]--;
    #####:  844:						card_not_discarded = 0;//Exit the loop
        -:  845:					}
    #####:  846:					else if (p > state->handCount[currentPlayer]){
        -:  847:						if(DEBUG) {
        -:  848:							printf("No estate cards in your hand, invalid choice\n");
        -:  849:							printf("Must gain an estate if there are any\n");
        -:  850:						}
    #####:  851:						if (supplyCount(estate, state) > 0){
    #####:  852:							gainCard(estate, state, 0, currentPlayer);
    #####:  853:							state->supplyCount[estate]--;//Decrement estates
    #####:  854:							if (supplyCount(estate, state) == 0){
    #####:  855:								isGameOver(state);
        -:  856:							}
        -:  857:						}
    #####:  858:						card_not_discarded = 0;//Exit the loop
        -:  859:					}
        -:  860:
        -:  861:					else{
    #####:  862:						p++;//Next card
        -:  863:					}
        -:  864:				}
        -:  865:			}
        -:  866:
        -:  867:			else{
    #####:  868:				if (supplyCount(estate, state) > 0){
    #####:  869:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  870:					state->supplyCount[estate]--;//Decrement Estates
    #####:  871:					if (supplyCount(estate, state) == 0){
    #####:  872:						isGameOver(state);
        -:  873:					}
        -:  874:				}
        -:  875:			}
        -:  876:
        -:  877:
    #####:  878:			return 0;
        -:  879:
        -:  880:		case great_hall:
    #####:  881:			return h_great_hall(handPos,currentPlayer,state);
        -:  882:
        -:  883:		case minion:
        -:  884:			//+1 action
    #####:  885:			state->numActions++;
        -:  886:
        -:  887:			//discard card from hand
    #####:  888:			discardCard(handPos, currentPlayer, state, 0);
        -:  889:
    #####:  890:			if (choice1)		//+2 coins
        -:  891:			{
    #####:  892:				state->coins = state->coins + 2;
        -:  893:			}
        -:  894:
    #####:  895:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  896:			{
        -:  897:				//discard hand
    #####:  898:				while(numHandCards(state) > 0)
        -:  899:				{
    #####:  900:					discardCard(handPos, currentPlayer, state, 0);
        -:  901:				}
        -:  902:
        -:  903:				//draw 4
    #####:  904:				for (i = 0; i < 4; i++)
        -:  905:				{
    #####:  906:					drawCard(currentPlayer, state);
        -:  907:				}
        -:  908:
        -:  909:				//other players discard hand and redraw if hand size > 4
    #####:  910:				for (i = 0; i < state->numPlayers; i++)
        -:  911:				{
    #####:  912:					if (i != currentPlayer)
        -:  913:					{
    #####:  914:						if ( state->handCount[i] > 4 )
        -:  915:						{
        -:  916:							//discard hand
    #####:  917:							while( state->handCount[i] > 0 )
        -:  918:							{
    #####:  919:								discardCard(handPos, i, state, 0);
        -:  920:							}
        -:  921:
        -:  922:							//draw 4
    #####:  923:							for (j = 0; j < 4; j++)
        -:  924:							{
    #####:  925:								drawCard(i, state);
        -:  926:							}
        -:  927:						}
        -:  928:					}
        -:  929:				}
        -:  930:
        -:  931:			}
    #####:  932:			return 0;
        -:  933:
        -:  934:		case steward:
    #####:  935:			return h_steward(choice1,choice2,choice3,handPos,currentPlayer,state);
        -:  936:
        -:  937:		case tribute:
    #####:  938:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  939:				if (state->deckCount[nextPlayer] > 0){
    #####:  940:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:					state->deckCount[nextPlayer]--;
        -:  942:				}
    #####:  943:				else if (state->discardCount[nextPlayer] > 0){
    #####:  944:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  945:					state->discardCount[nextPlayer]--;
        -:  946:				}
        -:  947:				else{
        -:  948:					//No Card to Reveal
        -:  949:					if (DEBUG){
        -:  950:						printf("No cards to reveal\n");
        -:  951:					}
        -:  952:				}
        -:  953:			}
        -:  954:
        -:  955:			else{
    #####:  956:				if (state->deckCount[nextPlayer] == 0){
    #####:  957:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  958:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  959:						state->deckCount[nextPlayer]++;
    #####:  960:						state->discard[nextPlayer][i] = -1;
    #####:  961:						state->discardCount[nextPlayer]--;
        -:  962:					}
        -:  963:
    #####:  964:					shuffle(nextPlayer,state);//Shuffle the deck
        -:  965:				}
    #####:  966:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  967:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  968:				state->deckCount[nextPlayer]--;
    #####:  969:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:				state->deckCount[nextPlayer]--;
        -:  972:			}
        -:  973:
    #####:  974:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  975:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  976:				state->playedCardCount++;
    #####:  977:				tributeRevealedCards[1] = -1;
        -:  978:			}
        -:  979:
    #####:  980:			for (i = 0; i <= 2; i ++){
    #####:  981:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  982:					state->coins += 2;
        -:  983:				}
        -:  984:
    #####:  985:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  986:					drawCard(currentPlayer, state);
    #####:  987:					drawCard(currentPlayer, state);
        -:  988:				}
        -:  989:				else{//Action Card
    #####:  990:					state->numActions = state->numActions + 2;
        -:  991:				}
        -:  992:			}
        -:  993:
    #####:  994:			return 0;
        -:  995:
        -:  996:		case ambassador:
    #####:  997:			j = 0;		//used to check if player has enough cards to discard
        -:  998:
    #####:  999:			if (choice2 > 2 || choice2 < 0)
        -: 1000:			{
    #####: 1001:				return -1;
        -: 1002:			}
        -: 1003:
    #####: 1004:			if (choice1 == handPos)
        -: 1005:			{
    #####: 1006:				return -1;
        -: 1007:			}
        -: 1008:
    #####: 1009:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1010:			{
    #####: 1011:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1012:				{
    #####: 1013:					j++;
        -: 1014:				}
        -: 1015:			}
    #####: 1016:			if (j < choice2)
        -: 1017:			{
    #####: 1018:				return -1;
        -: 1019:			}
        -: 1020:
        -: 1021:			if (DEBUG)
        -: 1022:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1023:
        -: 1024:			//increase supply count for choosen card by amount being discarded
    #####: 1025:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1026:
        -: 1027:			//each other player gains a copy of revealed card
    #####: 1028:			for (i = 0; i < state->numPlayers; i++)
        -: 1029:			{
    #####: 1030:				if (i != currentPlayer)
        -: 1031:				{
    #####: 1032:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1033:				}
        -: 1034:			}
        -: 1035:
        -: 1036:			//discard played card from hand
    #####: 1037:			discardCard(handPos, currentPlayer, state, 0);
        -: 1038:
        -: 1039:			//trash copies of cards returned to supply
    #####: 1040:			for (j = 0; j < choice2; j++)
        -: 1041:			{
    #####: 1042:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1043:				{
    #####: 1044:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1045:					{
    #####: 1046:						discardCard(i, currentPlayer, state, 1);
    #####: 1047:						break;
        -: 1048:					}
        -: 1049:				}
        -: 1050:			}
        -: 1051:
    #####: 1052:			return 0;
        -: 1053:
        -: 1054:		case cutpurse:
        -: 1055:
    #####: 1056:			updateCoins(currentPlayer, state, 2);
    #####: 1057:			for (i = 0; i < state->numPlayers; i++)
        -: 1058:			{
    #####: 1059:				if (i != currentPlayer)
        -: 1060:				{
    #####: 1061:					for (j = 0; j < state->handCount[i]; j++)
        -: 1062:					{
    #####: 1063:						if (state->hand[i][j] == copper)
        -: 1064:						{
    #####: 1065:							discardCard(j, i, state, 0);
    #####: 1066:							break;
        -: 1067:						}
    #####: 1068:						if (j == state->handCount[i])
        -: 1069:						{
    #####: 1070:							for (k = 0; k < state->handCount[i]; k++)
        -: 1071:							{
        -: 1072:								if (DEBUG)
        -: 1073:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1074:							}
    #####: 1075:							break;
        -: 1076:						}
        -: 1077:					}
        -: 1078:
        -: 1079:				}
        -: 1080:
        -: 1081:			}
        -: 1082:
        -: 1083:			//discard played card from hand
    #####: 1084:			discardCard(handPos, currentPlayer, state, 0);
        -: 1085:
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:
        -: 1089:		case embargo:
        -: 1090:			//+2 Coins
    #####: 1091:			state->coins = state->coins + 2;
        -: 1092:
        -: 1093:			//see if selected pile is in play
    #####: 1094:			if ( state->supplyCount[choice1] == -1 )
        -: 1095:			{
    #####: 1096:				return -1;
        -: 1097:			}
        -: 1098:
        -: 1099:			//add embargo token to selected supply pile
    #####: 1100:			state->embargoTokens[choice1]++;
        -: 1101:
        -: 1102:			//trash card
    #####: 1103:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:			return 0;
        -: 1105:
        -: 1106:		case outpost:
    #####: 1107:			return h_outpost(handPos,currentPlayer,state);
        -: 1108:
        -: 1109:		case salvager:
        -: 1110:			//+1 buy
    #####: 1111:			state->numBuys++;
        -: 1112:
    #####: 1113:			if (choice1)
        -: 1114:			{
        -: 1115:				//gain coins equal to trashed card
    #####: 1116:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1117:				//trash card
    #####: 1118:				discardCard(choice1, currentPlayer, state, 1);
        -: 1119:			}
        -: 1120:
        -: 1121:			//discard card
    #####: 1122:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1123:			return 0;
        -: 1124:
        -: 1125:		case sea_hag:
    #####: 1126:			return h_sea_hag(currentPlayer,state);
        -: 1127:
        -: 1128:		case treasure_map:
        -: 1129:			//search hand for another treasure_map
    #####: 1130:			index = -1;
    #####: 1131:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1132:			{
    #####: 1133:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1134:				{
    #####: 1135:					index = i;
    #####: 1136:					break;
        -: 1137:				}
        -: 1138:			}
    #####: 1139:			if (index > -1)
        -: 1140:			{
        -: 1141:				//trash both treasure cards
    #####: 1142:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1143:				discardCard(index, currentPlayer, state, 1);
        -: 1144:
        -: 1145:				//gain 4 Gold cards
    #####: 1146:				for (i = 0; i < 4; i++)
        -: 1147:				{
    #####: 1148:					gainCard(gold, state, 1, currentPlayer);
        -: 1149:				}
        -: 1150:
        -: 1151:				//return success
    #####: 1152:				return 1;
        -: 1153:			}
        -: 1154:
        -: 1155:			//no second treasure_map found in hand
    #####: 1156:			return -1;
        -: 1157:	}
        -: 1158:
    #####: 1159:	return -1;
        -: 1160:}
        -: 1161:
    #####: 1162:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1163:{
        -: 1164:
        -: 1165:	//if card is not trashed, added to Played pile
    #####: 1166:	if (trashFlag < 1)
        -: 1167:	{
        -: 1168:		//add card to played pile
    #####: 1169:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1170:		state->playedCardCount++;
        -: 1171:	}
        -: 1172:
        -: 1173:	//set played card to -1
    #####: 1174:	state->hand[currentPlayer][handPos] = -1;
        -: 1175:
        -: 1176:	//remove card from player's hand
    #####: 1177:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1178:	{
        -: 1179:		//reduce number of cards in hand
    #####: 1180:		state->handCount[currentPlayer]--;
        -: 1181:	}
    #####: 1182:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1183:	{
        -: 1184:		//reduce number of cards in hand
    #####: 1185:		state->handCount[currentPlayer]--;
        -: 1186:	}
        -: 1187:	else
        -: 1188:	{
        -: 1189:		//replace discarded card with last card in hand
    #####: 1190:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1191:		//set last card to -1
    #####: 1192:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1193:		//reduce number of cards in hand
    #####: 1194:		state->handCount[currentPlayer]--;
        -: 1195:	}
        -: 1196:
    #####: 1197:	return 0;
        -: 1198:}
        -: 1199:
    #####: 1200:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1201:{
        -: 1202:	//Note: supplyPos is enum of choosen card
        -: 1203:
        -: 1204:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1205:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1206:	{
    #####: 1207:		return -1;
        -: 1208:	}
        -: 1209:
        -: 1210:	//added card for [whoseTurn] current player:
        -: 1211:	// toFlag = 0 : add to discard
        -: 1212:	// toFlag = 1 : add to deck
        -: 1213:	// toFlag = 2 : add to hand
        -: 1214:
    #####: 1215:	if (toFlag == 1)
        -: 1216:	{
    #####: 1217:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1218:		state->deckCount[player]++;
        -: 1219:	}
    #####: 1220:	else if (toFlag == 2)
        -: 1221:	{
    #####: 1222:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1223:		state->handCount[player]++;
        -: 1224:	}
        -: 1225:	else
        -: 1226:	{
    #####: 1227:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1228:		state->discardCount[player]++;
        -: 1229:	}
        -: 1230:
        -: 1231:	//decrease number in supply pile
    #####: 1232:	state->supplyCount[supplyPos]--;
        -: 1233:
    #####: 1234:	return 0;
        -: 1235:}
        -: 1236:
   798303: 1237:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1238:{
        -: 1239:	int i;
        -: 1240:
        -: 1241:	//reset coin count
   798303: 1242:	state->coins = 0;
        -: 1243:
        -: 1244:	//add coins for each Treasure card in player's hand
  4789818: 1245:	for (i = 0; i < state->handCount[player]; i++)
        -: 1246:	{
  3991515: 1247:		if (state->hand[player][i] == copper)
        -: 1248:		{
  3193212: 1249:			state->coins += 1;
        -: 1250:		}
   798303: 1251:		else if (state->hand[player][i] == silver)
        -: 1252:		{
    #####: 1253:			state->coins += 2;
        -: 1254:		}
   798303: 1255:		else if (state->hand[player][i] == gold)
        -: 1256:		{
    #####: 1257:			state->coins += 3;
        -: 1258:		}
        -: 1259:	}
        -: 1260:
        -: 1261:	//add bonus
   798303: 1262:	state->coins += bonus;
        -: 1263:
   798303: 1264:	return 0;
        -: 1265:}
        -: 1266:
    #####: 1267:int h_smithy(int handPos, int currentPlayer, struct gameState *state){
        -: 1268:	//+3 Cards
    #####: 1269:	int i = 0;
    #####: 1270:	for (i = 0; i < 3; i++)
        -: 1271:	{
    #####: 1272:		drawCard(currentPlayer, state);
        -: 1273:	}
        -: 1274:
        -: 1275:	//discard card from hand
    #####: 1276:	discardCard(handPos, currentPlayer, state, i);
    #####: 1277:	return 0;
        -: 1278:}
        -: 1279:
        1: 1280:int h_adventurer(int currentPlayer, struct gameState *state){
        1: 1281:	int z = 0;
        1: 1282:	int drawntreasure = 0;
        1: 1283:	int cardDrawn = 0;
        -: 1284:	int temphand[MAX_HAND];// moved above the if statement
        4: 1285:	while(drawntreasure<2){
        2: 1286:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1287:			shuffle(currentPlayer, state);
        -: 1288:		}
        2: 1289:		drawCard(currentPlayer, state);
        2: 1290:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2: 1291:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2: 1292:			drawntreasure++;
        -: 1293:		else{
    #####: 1294:			temphand[z]=cardDrawn;
    #####: 1295:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1296:			z++;
        -: 1297:		}
        -: 1298:	}
        2: 1299:	while(z-1>=0){
    #####: 1300:		state->discard[currentPlayer][state->discardCount[currentPlayer]]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1301:		z=z-1;
        -: 1302:	}
        1: 1303:	return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int h_steward(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
    #####: 1307:	if (choice1 == 1)
        -: 1308:	{
        -: 1309:		//+2 cards
    #####: 1310:		drawCard(currentPlayer, state);
    #####: 1311:		drawCard(currentPlayer, state);
        -: 1312:	}
    #####: 1313:	else if (choice1 == 2)
        -: 1314:	{
        -: 1315:		//+2 coins
    #####: 1316:		state->coins = state->coins + 2;
        -: 1317:	}
        -: 1318:	else
        -: 1319:	{
        -: 1320:		//trash 2 cards in hand
    #####: 1321:		discardCard(choice3, currentPlayer, state, 1);
    #####: 1322:		discardCard(choice3, currentPlayer, state, 1);
        -: 1323:	}
        -: 1324:
        -: 1325:	//discard card from hand
    #####: 1326:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1327:	return 0;
        -: 1328:}
        -: 1329:
    #####: 1330:int h_sea_hag(int currentPlayer, struct gameState *state){
    #####: 1331:	int i = 0;
    #####: 1332:	for (i = 0; i < state->numPlayers; i++){
    #####: 1333:		if (i != currentPlayer){
    #####: 1334:			state->discard[i][state->discardCount[i]--] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1335:			state->discardCount[i]++;
    #####: 1336:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1337:		}
        -: 1338:	}
    #####: 1339:	return 0;
        -: 1340:}
        -: 1341:
        -: 1342:
    #####: 1343:int h_outpost(int handPos, int currentPlayer, struct gameState *state){
        -: 1344:	//set outpost flag
    #####: 1345:	state->outpostPlayed++;
        -: 1346:
        -: 1347:	//discard card
    #####: 1348:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1349:	return 0;
        -: 1350:}
        -: 1351:
        1: 1352:int h_gardens(){
        1: 1353:	return -1;
        -: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
    #####: 1357:int h_great_hall(int handPos, int currentPlayer, struct gameState *state){
        -: 1358:			//+1 Card
    #####: 1359:			drawCard(currentPlayer, state);
        -: 1360:
        -: 1361:			//+1 Actions
    #####: 1362:			state->numActions++;
        -: 1363:
        -: 1364:			//discard card from hand
    #####: 1365:			discardCard(handPos, currentPlayer, state, 0);
        -: 1366:
    #####: 1367:			return 0;
        -: 1368:}
