/*-------------------------------------------------------------------------
 * Daryl Cooke - CS362
 * Assignment 4 analysis
 * 5/5/2015
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 * randomtestadventurer : effectAdventurer() function
 *-----------------------------------------------------------------------*/
 randomtestadventurer runs 100 randomly generated game states through the
 effectAdventurer() function and checks for errors. It has the following
 coverage:
  Lines executed:25.80% of 566
  Branches executed:22.73% of 396
  Taken at least once:20.45% of 396
  Calls executed:12.77% of 94

 In particular, it has 100% branch and statement coverage inside the
 effectAdventurer() function. This is extremely thorough, it also has
 100% statement and 95% branch coverage for the initializeGame()
 function. This is a good indication that our random values are being
 selected in a  meaningful way to successfully test our code.

 Our previous non-random testing suite for effectAdventurer() covered
 24.38% of dominion.c. This random tester has achieved some coverage 
 improvement over the non-random tester.

/*-------------------------------------------------------------------------
 * randomtestcard : effectCouncilRoom() function
 *-----------------------------------------------------------------------*/
 randomtestcard runs 100 randomly generated game states through the
 effectCouncilRoom() function and checks for errors. It has the following
 coverage:
  Lines executed:23.85% of 566
  Branches executed:20.71% of 396
  Taken at least once:17.93% of 396
  Calls executed:12.77% of 94

 In particular, it has 100% branch and statement coverage inside the
 effectCouncilRoom() function. This is extremely thorough, it also has
 100% statement and 95% branch coverage for the initializeGame() function.
 This is a good indication that our random values are being selected in a
 meaningful way to successfully test our code.

 Our previous non-random testing suite for effectCouncilRoom() covered
 19.79% of dominion.c. This random tester has achieved some coverage
 improvement over the non-random tester.

/*-------------------------------------------------------------------------
 * Conclusion  -  Assignment 4 analysis
 *-----------------------------------------------------------------------*/
 Random testing can be very powerful, in particular it allows you to check
 many different variations of the gamestate without having to generate them
 by hand. These two random testers have increased my code coverage, and were
 able to reveal several bugs in meaningful and debuggable ways.

 The random testers output looks as follows on failure:
 Pre-State:
  handCount: 16
  deckCount: 139
  discardCount: 26
  Cardpos: 14
  Player: 1
  playedCardCount: 2
  FAILURE: The number of treasure cards in the players hand is incorrect.
  Prev: 7, Post: 4, Seed: 3305
  FAILURE: The handCount was not properly inrcremented.
  Prev: 16, Post: 11, Seed: 3305

 You'll notice the random tester logs the entire randomly generated gamestate,
 as well as points of failure, the comparison values that failed, and the seed
 for further debugging. This is extremely valuable and will allow us to find
 and replicate bugs precisely. Upon success the random testers output looks
 as follows:
 Pre-State:
  handCount: 16
  deckCount: 139
  discardCount: 26
  Cardpos: 14
  Player: 1
  playedCardCount: 2
  PASSED.

 These diagnostic logs are invaluable in checking the correctness of our
 testing specification. By developing more random testers we will be able
 to achieve high code coverage for regression testing as we modify the
 dominion base code.
 