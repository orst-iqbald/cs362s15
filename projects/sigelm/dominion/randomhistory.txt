Michael Sigel
CS 362
Assignment 4
randomhistory.txt

INSTRUCTIONS:
To run and make these two programs just do the following:
'make randomtestadventurer'
'make randomtestcard'
To produce the .out files just do the same with .out on the end of the filename, once compiled and ran.
The rules for these two programs have been updated in the makefile towards the bottom of the file. I have tried
to just keep it as simple as possible, so I leave functions like 'make all' alone for simplicity and ease.

My overall assesment of testing after running these two tests is that they can be very powerful if used correctly.
It can allow you to check different variations and states of the code for what it is you are trying to test 
(in our case, Dominion). These two tests increased my code coverage and found some bugs along the way,
in meaningful ways.

For our tests we wanted to log the entire randomly generated gamestate that would also display to us when
it would fail. From there, we wanted to show the values that failed and the seed for further debugging. This allows
us to be able to replicate and find bugs as we wish. The more random testers we create, the higher the code coverage
we will have, as well look through this Dominion code.

For both of the following testers that we built, we run 100 randomly generated game stats. This will give us some
meaningful data versus just a few random tests (less of a skew). We covered the handCount, deckCount, discardCount,
Cardpos, Player (which player are we looking at), playedCardCount, numBuys and if it was a FAIL.
********************************************************************************************************************

randomtestadventurer.c: effectAdventurer() function

File 'dominion.c'
Lines executed:37.46% of 566
Branches executed:33.84% of 396
Taken at least once:26.77% of 396
Calls executed:28.72% of 94
dominion.c:creating 'dominion.c.gcov'

Within the actual effectAdventurer() function we have 100% branch and statement coverage. This tester is actually
quite precise and thorough. This shows to us that our random values are actually being selected in a meaningful way.
Which in turn means we are successfully testing our code.

********************************************************************************************************************

randomtestcard.c: effectCouncilRoom() function

File 'dominion.c'
Lines executed:37.28% of 566
Branches executed:33.84% of 396
Taken at least once:26.01% of 396
Calls executed:28.72% of 94
dominion.c:creating 'dominion.c.gcov'

This is almost virutally identical to the test coverage from the randomtestadventurer test. We have 100% branch and
statement coverage as before, with slight variations in 'taken at least once' and 'lines executed'. These are very small
differences however, so we resulted in another strong test case. This means we are successfully testing our code.

********************************************************************************************************************