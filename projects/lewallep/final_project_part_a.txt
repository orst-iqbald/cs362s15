Final Project Part A:

Ian Taylor
Philip Lewallen
Thomas Cox

Explain testIsValid Function of UrlValidator test code.

The testIsValid method takes an Object array of testObjects and a long variable options as arguments.  Two hard coded URLs are checked via assertion for correctness.  The method then test the 5 parts of a URL. scheme, authority, port, path, query.  The URL is constructed vial the list created at the bottom of the UrlValidatorTest class.  Valid results are print and invalid results are overlooked.

Give how many total number of urls it is testing.

The testIsValid Method is testing 31922 total URLs.  At the top of the method there is a test for both these URLs.
 assertTrue(urlVal.isValid("http://www.google.com"));
 assertTrue(urlVal.isValid("http://www.google.com/"));

Then the method provides 1890 valid test and 31920 total test inside the do-while loop.

Also, explain how it is building all the urls.
    The program takes pre defined arrays of objects and uses these elements in each array to iterate through, and then take these separate parts of URL’s and combine them to form complete URL’s.  It combines the URL’s with the .append() function.
    There are six arrays of these pair objects which have a fragment of the URL and a boolean attribute identifying if the URL fragment is either a valid fragment or an invalid fragment.

 Give an example of valid url being tested and an invalid url being 
tested by testIsValid() method.
    First an instance of the class URLValidator is initialized and then we check to see if the URL is valid.  If it is the system prints out an “.”.  If it is not, then the system prints out an “x”


Do you think that a real world test
 (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote
 (in terms of concepts & complexity)? Explain in few lines.
    I think the complexity of the overall concept is the same.  However this certainly took a little more code to ensure the inputs were both valid and invalid.  So the setup is more involved and requires more specific variables to be inserted as it would be a waste to simply have a random generator spitting out characters we know would make an incorrect URL.  And while the test is a very quick boolean test against two strings, it did take more effort and complexity for the URL validator than it did for some of the card tests I personally implemented.
    
