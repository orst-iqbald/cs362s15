        -:    0:Source:tests/unitTests/cardTest4.c
        -:    0:Graph:cardTest4.gcno
        -:    0:Data:cardTest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include <math.h>
        -:    5:
        -:    6:#include "rngs.h"
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:
        -:   10:
        1:   11:int main (int argc, char **argv) {
        -:   12:
        1:   13:  int NUM_TESTS = 100;
        1:   14:  int numDraws = 0;
        -:   15:  int j, i, n, p, r;
        1:   16:  int handPos, fails = 0;
        -:   17:
        -:   18:  struct gameState G;
        -:   19:  struct gameState post;
        1:   20:  SelectStream(2);
        1:   21:  PutSeed(3);
        -:   22:
      101:   23:    for (r = 0; r < NUM_TESTS; r++) {
  2630100:   24:        for (i = 0; i < sizeof(struct gameState); i++) {
  2630000:   25:          ((char *) &G)[i] = floor(Random() * 256);
        -:   26:        }
        -:   27:  //      printf("Village Room test %d of %d \n", r, NUM_TESTS);
        -:   28:
      100:   29:        G.numPlayers = MAX_PLAYERS;
      100:   30:        G.numBuys = floor(Random() * 15);
      100:   31:        G.numActions = floor(random() * 15);
      100:   32:        G.playedCardCount = floor(Random() * 20);
        -:   33:
        -:   34:        /* Randomly assign Counts to each player */
      600:   35:        for(n = 0; n <= G.numPlayers; n++){
      500:   36:            G.handCount[n] = floor(Random() * MAX_HAND);
      500:   37:            G.deckCount[n] = floor(Random() * MAX_DECK);
      500:   38:            G.discardCount[n] = floor(Random() * MAX_DECK);
        -:   39:
        -:   40:            /* Randomly Assign Cards to each player */
    99205:   41:            for (i = 0; i < G.handCount[n]; i++){
    98705:   42:                G.hand[n][i] = floor(Random() * 26);
        -:   43:            }
   120757:   44:            for (i = 0; i < G.discardCount[p]; i++){
   120257:   45:                G.discard[n][i] = floor(Random() * 26);
        -:   46:            }
    61056:   47:            for (i = 0; i < G.discardCount[p]; i++){
    60556:   48:                G.deck[n][i] = floor(Random() * 26);
        -:   49:            }
        -:   50:            
        -:   51:        }
        -:   52:        
      100:   53:        G.whoseTurn = floor(Random() * 4);
      100:   54:        p = G.whoseTurn;
        -:   55:
      100:   56:        memcpy((void *) &post, (void *) &G, sizeof(struct gameState));
        -:   57:
      100:   58:        post.handCount[p];
      100:   59:        post.numActions = post.numActions + 2;
        -:   60:
      100:   61:        cardEffect(village, 0, 0, 0, &G, 0, 0);
        -:   62:        
        -:   63:    
      100:   64:        if(post.handCount[p] != G.handCount[p]){
        -:   65:        //    printf("FAILED!\n");
    #####:   66:            fails++;
        -:   67:        }
      100:   68:        if(post.numActions != G.numActions){
        -:   69:         //   printf("FAILED!\n");
    #####:   70:            fails++;
        -:   71:        }
        -:   72:
        -:   73:        
        -:   74:
        -:   75:    } 
        -:   76:
        1:   77:    printf("%d num of fails out of %d!\n", fails, NUM_TESTS); 
        -:   78:
        -:   79:
        1:   80:    return 0;
        -:   81:}
        -:   82:
        -:   83:
        -:   84:
