I decided to start by creating a random gameState generator called genRandState().  It assigns a random but valid value to every variable in struct gameState. I chose to stick with only valid values because the gameState is only modified internally by the game code and so doesn't span any trust boundaries. Whether this assumption is truly merited or not, it is the philosophy of all the dominion code I've seen so far. So, feeding this code invalid values isn't going to produce bugs that the developers would care about. Generated values are evenly distibuted along the range of valid values. These ranges not only respect the sizes of the various arrays, but they are also consistent with the rules of the game and other gameState variables that they depend on.  So numPlayers has a range of [0,3] and the range of i in playedCards[i] is dependent on playedCardCount. One of the big things that isn't valid about the gameStates generated with this function is that the supply is not limited to having exactly 10 Kingdom cards. I set every variable for completeness even though the variables concerning the embargo and outposts card won't play a role in the random tests I'm going to perform (but hey, who knows, maybe they will. Practicing that paranoia...).

I then created a function called insertCardRand() that inserts a given card into a random hand position of the current player's hand. I use this to make sure that the player has a particular card so that they can play it in the test.

After that, writing the randomtestcard test was pretty easy.  I just used memcpy() to make a copy of the randomly generated gameState and then compared them after executing the card function.