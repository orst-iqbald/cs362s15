Group members:
	Jeffrey Hilger
	Danish Iqbal
	Tyler Bias

1. Explain testIsValid Function of UrlValidator test code.

testIsValid first tests 2 hard coded URLs.  It then randomly generates URLs
in a loop, building them from the different parts of a URL (scheme, 
authority, port, path, query) which are tagged as valid or invalid.  These
URLs are then tested and results are printed to the console.

2. Give how many total number of urls it is testing. 

2 hard coded URLS
+ 31,920 URLs generated in loop
= 31,922 URLs in total

3. Also, explain how it is building all the urls. 

It builds URLs by generating a scheme, authority, port, path and query and
then combining them together.  They are combined as follows:

<scheme>://<authority><port><path>?<query>

4. Give an example of valid url being tested and an invalid url being tested by testIsValid() method.  

An example of a valid URL would be: http://www.google.com:123/asdf?test=true
	
An example of an invalid URL would be:  http://www.google.com:123a/asdf?test=true
This is because the port (:123a) is invalid; it's required to be numerical.
	
5. Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different 
than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 

The testIsValid() function feels similar conceptually to the unit and card 
tests we were required to write in our assignments.  It tests a few hard-coded
URLs, then randomly generates a fair number, and ensures that they are valid.
The main difference between our assignments and the real world tester seems
to be scope; the real world tester tests all the parts of the URL and 
generates enough random URLs to ensure validity probabilistically.  Our 
assignments have been more limited to a handful of unit tests and specific
cards.
