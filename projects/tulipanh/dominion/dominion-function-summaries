dominion.c functions:

int compare(const void* a, const void* b)
	- Compares two pointers, returns 1 if a is higher than b, -1 if a is lower than b, 0 if they are the same
struct gameState* newGame()
	- Allocates a new struct gameState and returns a pointer to this new struct
int* kingdomCards9int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10)
	- Creates an integer array of size 10 containing integers k1 thru k10 in indices 0 thru 9
int initializeGame(int numPlayer, int kingdomCards[10], int randomSeed, struct gameState *state)
	- Checks that the number of players is valid and checks that all the kingdom cards are different. Returns -1 if either is false. Sets state variables accordingly.
	- Sets the number of curse cards, victory cards, and treasure cards in the state variables according to the number of players.
	- Sets the number of kingdom cards appropriately. If the card is one of the ten chosen cards, set to 10. If the card is a victory kingdom card(Garden, Great Hall), set to 8 or 12 depending on number of players. If the card is not chosen, set to -1. 
	- Sets the players' starting decks, 3 estate cards and 7 coppers. 
	- Shuffles the players' decks. Returns -1 if shuffle() fails. 
	- Sets the players' initial hands to empty. Sets the number of embargo tokens to 0 for all supply piles.
	- Sets up outpostPlayed, phase, numActions, numBuys, playedCardCount, whoseTurn, and handCount variables for the first turn.
	- Calls drawCard() five times for the first player. Sets number of coins for first player to 0. Returns 0.
int shuffle(int player, struct gameState *state)
	- Places all the cards in the deck of player, held in state, in a pseudo-random order.
int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
	- Checks if the current player is in the right phase and has enough actions left to play a card. Returns -1 otherwise.
	- Checks if the chosen card is an action card. If not, returns -1. 
	- Plays the card using cardEffect(). Returns -1 if this function call fails.
	- Reduces the number of actions left this turn. Calls updateCoins() using the coin_bonus returned by the cardEffect().
int buyCard(int supplyPos, struct gameState *state)
	- Attemps to buy the chosen card, supplyPos, for the current player. If no more buys left, or no more of those cards left, or not enough money, returns -1. Otherwise, places the card in the player's discard, subtracts the cost from the player's money, decrements the number of buys left, returns 0.
int numHandCards(struct gameState *state)
	- Returns the number of cards in the hand of the current player.
int handCard(int handPos, struct gameState *state)
	- Returns the card in the given hand position of the current player.
int supplyCount(int card, struct gameState *state)
	- Returns number left on the board of the card given by card. 
int fullDeckCount(int player, int card, struct gameState *state)
	- Returns the total number owned of the card given by card by the player given by player.
int whoseTurn(struct gameState *state)
	- Returns the number of the player whose turn it currently is.
int endTurn(struct gameState *state)
	- Discards the current player's hand, changes current player to whoever's turn in next, resets outpostPlayed, phase, numActions, coins, numBuys, playedCardCount, and handCount to starting values, draws 5 cards for the player, and calls updateCoins() to set to 0. Returns 0.
int isGameOver(struct gameState *state)
	- Checks if Provice pile is empty or if three supply piles are empty (i.e. equal to 0, not -1). Returns 1 either of these conditions are met, 0 if neither are met.
int scoreFor(int player, struct gameState *state)
	- Counts up the points in the given player's hand, discard, and deck. Returns the score count.
int getWinners(int players[MAX_PLAYERS], struct gameState *state)
	- Determines which player won the game after determining each player's score.
int drawCard(int player, struct gameState *state)
	- Draws a card for the given player. If the deck is empty, reshuffles discard pile into deck.
int getCost(int cardNumber)
	- Returns the money-cost of the given card.
int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
	- Implements the effect of the action card played. 
int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
	- Removes the given card from the player's hand, places in Played pile if played as an action.
int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
	- Removes a given card from its supply pile and adds it to discard, deck, or hand depending on toFlag. If supply number is less than 1, return -1. Decrease supply count for the given card.
int updateCoins(int player, struct gameState *state, int bonus)
	- Changes the player's number of coins depending on the treasure cards in his hand and the bonus being added (e.g. due to an action card).
