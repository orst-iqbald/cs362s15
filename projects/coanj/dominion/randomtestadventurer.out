TESTING newAdventurer() card:

Iteration #0	Seed #19109885

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Estate       
5  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 7, Returned = 8

Iteration #1	Seed #41864241

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Gold         
6  Gold         
7  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Estate       
5  Gold         
6  Gold         
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #2	Seed #79539006

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Silver       


Iteration #3	Seed #36119707

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Gold         
6  Gold         

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Gold         
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #4	Seed #118063492

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       
1  Copper       
2  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Silver       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #5	Seed #109966467

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Silver       
6  Silver       
7  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Copper       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #6	Seed #74709184

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Gold         

Player 0's hand:
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Gold         
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 4, Returned = 5

Iteration #7	Seed #94637711

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Gold         
6  Copper       
7  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Gold         
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #8	Seed #49623943

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Gold         
6  Copper       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Copper       
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #9	Seed #15567692

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Estate       
5  Copper       
6  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Gold         
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #10	Seed #74343425

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Estate       
4  Estate       
5  Silver       
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Copper       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 7, Returned = 8

Iteration #11	Seed #106784258

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Gold         
6  Copper       
7  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Gold         
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #12	Seed #50387548

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Copper       
6  Gold         
7  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Gold         
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #13	Seed #41674715

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Copper       
7  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #14	Seed #118820576

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #15	Seed #65014922

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Gold         
7  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Copper       
6  Gold         
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #16	Seed #91409057

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       
1  Gold         

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Gold         


Iteration #17	Seed #40778793

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Gold         
6  Gold         

Player 0's hand:
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Gold         
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #18	Seed #90073456

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Estate       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #19	Seed #98606844

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Gold         
6  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #20	Seed #105685092

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Silver       
6  Silver       
7  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Silver       
6  Gold         
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #21	Seed #5182207

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       
1  Copper       
2  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Silver       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #22	Seed #98498086

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Gold         
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #23	Seed #122672519

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Estate       
5  Copper       
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #24	Seed #47920575

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Silver       
6  Gold         
7  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Silver       
6  Silver       
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #25	Seed #60815346

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Gold         
1  Copper       
2  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Estate       
5  Gold         
6  Gold         
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #26	Seed #49516292

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       
1  Copper       
2  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #27	Seed #4009331

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Copper       
7  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #28	Seed #112301239

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Copper       
7  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Estate       
4  Copper       
5  Copper       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #29	Seed #10424282

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Silver       
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Copper       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #30	Seed #26359975

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Estate       
5  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Gold         
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #31	Seed #113372609

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       
1  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Silver       


Iteration #32	Seed #21486960

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Copper       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #33	Seed #28807808

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Gold         
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #34	Seed #104655074

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Gold         
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Copper       
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #35	Seed #86844222

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Silver       
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Copper       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #36	Seed #33679335

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Silver       
6  Copper       
7  Gold         

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Silver       
6  Gold         
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #37	Seed #78020254

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Gold         
6  Copper       
7  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Gold         
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #38	Seed #52115220

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Gold         
6  Copper       
7  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Gold         
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #39	Seed #111611208

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Estate       
5  Copper       
6  Copper       

Player 0's hand:
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #40	Seed #176134

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Copper       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       


Iteration #41	Seed #94585541

Player 0's deck: 
#  Card
0  Estate       
1  Estate       
2  Copper       
3  Estate       
4  Copper       
5  Copper       
6  Silver       
7  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Gold         
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 7, Returned = 8

Iteration #42	Seed #82394226

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Silver       
6  Copper       
7  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Silver       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #43	Seed #2623114

Player 0's deck: 
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Estate       
5  Copper       
6  Silver       
7  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #44	Seed #10644847

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Silver       

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #45	Seed #58769003

Player 0's deck: 
#  Card
0  Estate       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Silver       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Silver       
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #46	Seed #56486968

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Copper       
3  Copper       
4  Copper       
5  Copper       
6  Copper       

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Estate       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Estate       
5  Copper       
6  Copper       
7  Copper       

Failed - Number of treasure cards incorrect. Expected = 5, Returned = 6

Iteration #47	Seed #101616927

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Gold         
1  Gold         
2  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Copper       
4  Copper       
5  Gold         
6  Gold         
7  Gold         

Failed - Number of treasure cards incorrect. Expected = 7, Returned = 8

Iteration #48	Seed #18124493

Player 0's deck: 
#  Card
0  Copper       
1  Estate       
2  Estate       
3  Copper       
4  Copper       
5  Silver       
6  Silver       
7  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Silver       
6  Gold         
7  Silver       

Failed - Number of treasure cards incorrect. Expected = 6, Returned = 7

Iteration #49	Seed #99184697

Deck was empty, shuffling.
Player 0's deck: 
#  Card
0  Silver       
1  Gold         

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Adventurer   

Playing Adventure Card...

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Copper       
3  Estate       
4  Copper       
5  Silver       
6  Gold         

FINISHED newAdventurer() card:

File 'dominion.c'
Lines executed:32.70% of 575
Branches executed:33.81% of 417
Taken at least once:23.50% of 417
Calls executed:22.11% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:34
        -:    0:Programs:34
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 41400 returned 100% blocks executed 83%
    41400:    8:int compare(const void* a, const void* b) {
    41400:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    41400:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    11040:   12:    return -1;
    30360:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1380 returned 100% blocks executed 88%
     1380:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1380:   44:  SelectStream(1);
call    0 returned 100%
     1380:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1380:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1380:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    15180:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   151800:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   138000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1380:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
     1380:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1380:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
     1380:   89:      state->supplyCount[estate] = 8;
     1380:   90:      state->supplyCount[duchy] = 8;
     1380:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1380:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1380:  102:  state->supplyCount[silver] = 40;
     1380:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    28980:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   227700:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   213900:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13800:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     2760:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1380:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    12420:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13800:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   200100:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4140:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
     2760:  140:      state->deckCount[i] = 0;
    11040:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8280:  143:	  state->deck[i][j] = estate;
     8280:  144:	  state->deckCount[i]++;
        -:  145:	}
    22080:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    19320:  148:	  state->deck[i][j] = copper;
    19320:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4140:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
     2760:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4140:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2760:  166:      state->handCount[i] = 0;
     2760:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    38640:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    37260:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1380:  182:  state->outpostPlayed = 0;
     1380:  183:  state->phase = 0;
     1380:  184:  state->numActions = 1;
     1380:  185:  state->numBuys = 1;
     1380:  186:  state->playedCardCount = 0;
     1380:  187:  state->whoseTurn = 0;
     1380:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     8280:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     6900:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1380:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1380:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2774 returned 100% blocks executed 100%
     2774:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2774:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2774:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       14:  210:    return -1;
     2760:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    33120:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    27600:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    27600:  216:    newDeck[newDeckPos] = state->deck[player][card];
    27600:  217:    newDeckPos++;
    89452:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
    61852:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    27600:  221:    state->deckCount[player]--;
        -:  222:  }
    30360:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    27600:  224:    state->deck[player][i] = newDeck[i];
    27600:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2760:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 1380 returned 100% blocks executed 73%
     1380:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     1380:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     1380:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     1380:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     1380:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     1380:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     1380:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     1380:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     1380:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     1380:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 1380 returned 100% blocks executed 100%
     1380:  315:int handCard(int handPos, struct gameState *state) {
     1380:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1380:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 653 returned 100% blocks executed 100%
      653:  320:int supplyCount(int card, struct gameState *state) {
      653:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2760 returned 100% blocks executed 100%
     2760:  346:int whoseTurn(struct gameState *state) {
     2760:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 7066 returned 100% blocks executed 85%
     7066:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     7066:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        7:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        7:  538:    state->deckCount[player] = state->discardCount[player];
        7:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        7:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        7:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        7:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        7:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        7:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     7059:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     7059:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     7059:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7059:  576:    state->deckCount[player]--;
     7059:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     7059:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function newSmithy called 0 returned 0% blocks executed 0%
    #####:  646:void newSmithy(int currentPlayer, int handPos, struct gameState* state) {
        -:  647:	//+3 Cards
        -:  648:	int i;
    #####:  649:	for (i = 0; i <= 3; i++) {
branch  0 never executed
branch  1 never executed
    #####:  650:		drawCard(currentPlayer, state);
call    0 never executed
        -:  651:	}
        -:  652:	//discard card from hand
    #####:  653:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  654:}
        -:  655:
function newAdventurer called 50 returned 100% blocks executed 100%
       50:  656:void newAdventurer(int currentPlayer, struct gameState* state) {
       50:  657:  int z = 0;
        -:  658:  int temphand[MAX_HAND];
        -:  659:  int cardDrawn;
       50:  660:  int drawntreasure=0;
      266:  661:  while(drawntreasure<3){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      166:  662:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        7:  663:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:    }
      166:  665:    drawCard(currentPlayer, state);
call    0 returned 100%
      166:  666:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      166:  667:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
branch  4 taken 69% (fallthrough)
branch  5 taken 31%
      150:  668:      drawntreasure++;
        -:  669:    else{
       16:  670:      temphand[z]=cardDrawn;
       16:  671:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       16:  672:      z++;
        -:  673:    }
        -:  674:  }
      116:  675:  while(z-1>=0){
branch  0 taken 24%
branch  1 taken 76% (fallthrough)
       16:  676:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       16:  677:    z=z-1;
        -:  678:  }
       50:  679:}
        -:  680:
function newBaron called 1330 returned 100% blocks executed 68%
     1330:  681:void newBaron(int choice1, int currentPlayer, struct gameState* state) {
        -:  682:	state->numBuys; //Increase buys by 1!
     1330:  683:	if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
     1021:  684:        int p = 0;//Iterator for hand!
     1021:  685:        int card_not_discarded = 1;//Flag for discard set!
     4447:  686:          while(card_not_discarded){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     2405:  687:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
     1021:  688:              state->coins += 4;//Add 4 coins to the amount of coins
     1021:  689:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1021:  690:              state->discardCount[currentPlayer]++;
     5682:  691:              for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
     4661:  692:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  693:              }
     1021:  694:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1021:  695:              state->handCount[currentPlayer]--;
     1021:  696:              card_not_discarded = 0;//Exit the loop
        -:  697:            }
     1384:  698:            else if (p > state->handCount[currentPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  699:              if(DEBUG) {
        -:  700:                printf("No estate cards in your hand, invalid choice\n");
        -:  701:                printf("Must gain an estate if there are any\n");
        -:  702:              }
    #####:  703:              if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  704:                gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  705:                state->supplyCount[estate]--;//Decrement estates
    #####:  706:                if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  707:                  isGameOver(state);
call    0 never executed
        -:  708:                }
        -:  709:              }
    #####:  710:              card_not_discarded = 0;//Exit the loop
        -:  711:            }
        -:  712:            else{
     1384:  713:              p++;//Next card
        -:  714:            }
        -:  715:          }
        -:  716:  }
        -:  717:  else{
      309:  718:    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 56% (fallthrough)
branch  2 taken 44%
      172:  719:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
      172:  720:      state->supplyCount[estate]--;//Decrement Estates
      172:  721:      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  722:        isGameOver(state);
call    0 never executed
        -:  723:      }
        -:  724:    }
        -:  725:  }
     1330:  726:}
        -:  727:
function newTribute called 0 returned 0% blocks executed 0%
    #####:  728:void newTribute(int nextPlayer, int tributeRevealedCards[2], int currentPlayer, struct gameState* state) {
        -:  729:	int i;
    #####:  730:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  731:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  732:			tributeRevealedCards[0] =
    #####:  733:					state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  734:			state->deckCount[nextPlayer]--;
    #####:  735:		} else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  736:			tributeRevealedCards[0] =
    #####:  737:					state->discard[nextPlayer][state->discardCount[nextPlayer]
    #####:  738:							- 1];
    #####:  739:			state->discardCount[nextPlayer]--;
        -:  740:		} else {
        -:  741:			//No Card to Reveal
        -:  742:			if (DEBUG) {
        -:  743:				printf("No cards to reveal\n");
        -:  744:			}
        -:  745:		}
        -:  746:	}
        -:  747:
        -:  748:	else {
    #####:  749:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  750:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  751:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####:  752:				state->deckCount[nextPlayer]++;
    #####:  753:				state->discard[nextPlayer][i] = -1;
    #####:  754:				state->discardCount[nextPlayer]--;
        -:  755:			}
        -:  756:
    #####:  757:			shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -:  758:		}
    #####:  759:		tributeRevealedCards[0] =
    #####:  760:				state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  761:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  762:		state->deckCount[nextPlayer]--;
    #####:  763:		tributeRevealedCards[1] =
    #####:  764:				state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  765:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  766:		state->deckCount[nextPlayer]--;
        -:  767:	}
    #####:  768:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {
branch  0 never executed
branch  1 never executed
        -:  769:		//If we have a duplicate card, just drop one 
    #####:  770:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  771:		state->playedCardCount++;
    #####:  772:		tributeRevealedCards[1] = -1;
        -:  773:	}
    #####:  774:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  775:		if (tributeRevealedCards[i] == copper
branch  0 never executed
branch  1 never executed
    #####:  776:				|| tributeRevealedCards[i] == silver
branch  0 never executed
branch  1 never executed
    #####:  777:				|| tributeRevealedCards[i] == gold) {
branch  0 never executed
branch  1 never executed
        -:  778:			//Treasure cards
    #####:  779:			state->coins *= 2;
    #####:  780:		} else if (tributeRevealedCards[i] == estate
branch  0 never executed
branch  1 never executed
    #####:  781:				|| tributeRevealedCards[i] == duchy
branch  0 never executed
branch  1 never executed
    #####:  782:				|| tributeRevealedCards[i] == province
branch  0 never executed
branch  1 never executed
    #####:  783:				|| tributeRevealedCards[i] == gardens
branch  0 never executed
branch  1 never executed
    #####:  784:				|| tributeRevealedCards[i] == great_hall) {
branch  0 never executed
branch  1 never executed
        -:  785:			//Victory Card Found
    #####:  786:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  787:			drawCard(currentPlayer, state);
call    0 never executed
        -:  788:		} else {
        -:  789:			//Action Card
    #####:  790:			state->numActions = state->numActions + 2;
        -:  791:		}
        -:  792:	}
    #####:  793:}
        -:  794:
function newCutpurse called 0 returned 0% blocks executed 0%
    #####:  795:void newCutpurse(int currentPlayer, int handPos, struct gameState* state) {
        -:  796:  int i,j,k;
    #####:  797:  updateCoins(currentPlayer, state, 1);
call    0 never executed
    #####:  798:  for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:      for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  801:        if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  802:          discardCard(j, i, state, 0);
call    0 never executed
    #####:  803:          break;
        -:  804:        }
    #####:  805:        if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  806:          for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  807:            if (DEBUG)
        -:  808:              printf("Player %d reveals card number %d\n", i,
        -:  809:                  state->hand[i][k]);
        -:  810:          }
    #####:  811:          break;
        -:  812:        }
        -:  813:      }
        -:  814:
        -:  815:    }
        -:  816:
        -:  817:  }
        -:  818:  //discard played card from hand
    #####:  819:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  820:}
        -:  821:
function cardEffect called 1380 returned 100% blocks executed 5%
     1380:  822:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  823:{
        -:  824:  int i;
        -:  825:  int j;
        -:  826:  int k;
        -:  827:  int x;
        -:  828:  int index;
     1380:  829:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1380:  830:  int nextPlayer = currentPlayer + 1;
        -:  831:
     1380:  832:  int tributeRevealedCards[2] = {-1, -1};
        -:  833:  int temphand[MAX_HAND];// moved above the if statement
     1380:  834:  int drawntreasure=0;
        -:  835:  int cardDrawn;
     1380:  836:  int z = 0;// this is the counter for the temp hand
     1380:  837:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  838:    nextPlayer = 0;
        -:  839:  }
        -:  840:  
        -:  841:	
        -:  842:  //uses switch to select card and perform actions
     1380:  843:  switch( card ) 
branch  0 taken 4%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 96%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  844:    {
        -:  845:    case adventurer:
       50:  846:		newAdventurer(currentPlayer, state);
call    0 returned 100%
       50:  847:      return 0;
        -:  848:			
        -:  849:    case council_room:
        -:  850:      //+4 Cards
    #####:  851:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  852:	{
    #####:  853:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  854:	}
        -:  855:			
        -:  856:      //+1 Buy
    #####:  857:      state->numBuys++;
        -:  858:			
        -:  859:      //Each other player draws a card
    #####:  860:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      drawCard(i, state);
call    0 never executed
        -:  865:	    }
        -:  866:	}
        -:  867:			
        -:  868:      //put played card in played card pile
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      return 0;
        -:  872:			
        -:  873:    case feast:
        -:  874:      //gain card with cost up to 5
        -:  875:      //Backup hand
    #####:  876:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  877:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  878:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  879:      }
        -:  880:      //Backup hand
        -:  881:
        -:  882:      //Update Coins for Buy
    #####:  883:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  884:      x = 1;//Condition to loop on
    #####:  885:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  886:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  887:	  if (DEBUG)
        -:  888:	    printf("None of that card left, sorry!\n");
        -:  889:
        -:  890:	  if (DEBUG){
        -:  891:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  892:	  }
        -:  893:	}
    #####:  894:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  895:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  896:
        -:  897:	  if (DEBUG){
        -:  898:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  899:	  }
        -:  900:	}
        -:  901:	else{
        -:  902:
        -:  903:	  if (DEBUG){
        -:  904:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  905:	  }
        -:  906:
    #####:  907:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  908:	  x = 0;//No more buying cards
        -:  909:
        -:  910:	  if (DEBUG){
        -:  911:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  912:	  }
        -:  913:
        -:  914:	}
        -:  915:      }     
        -:  916:
        -:  917:      //Reset Hand
    #####:  918:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  919:	state->hand[currentPlayer][i] = temphand[i];
    #####:  920:	temphand[i] = -1;
        -:  921:      }
        -:  922:      //Reset Hand
        -:  923:      			
    #####:  924:      return 0;
        -:  925:			
        -:  926:    case gardens:
    #####:  927:      return -1;
        -:  928:			
        -:  929:    case mine:
    #####:  930:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  931:
    #####:  932:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:		
    #####:  937:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  938:	{
    #####:  939:	  return -1;
        -:  940:	}
        -:  941:
    #####:  942:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:	{
    #####:  944:	  return -1;
        -:  945:	}
        -:  946:
    #####:  947:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:      //discard trashed card
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  958:	      break;
        -:  959:	    }
        -:  960:	}
        -:  961:			
    #####:  962:      return 0;
        -:  963:			
        -:  964:    case remodel:
    #####:  965:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  966:
    #####:  967:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  968:	{
    #####:  969:	  return -1;
        -:  970:	}
        -:  971:
    #####:  972:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  976:
        -:  977:      //discard trashed card
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  983:	      break;
        -:  984:	    }
        -:  985:	}
        -:  986:
        -:  987:
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case smithy:
        -:  991:      //+3 Cards
    #####:  992:		newSmithy(currentPlayer, handPos, state);
call    0 never executed
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case village:
        -:  996:      //+1 Card
    #####:  997:      drawCard(currentPlayer, state);
call    0 never executed
        -:  998:			
        -:  999:      //+2 Actions
    #####: 1000:      state->numActions = state->numActions + 2;
        -: 1001:			
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case baron:
     1330: 1007:		newBaron(choice1, currentPlayer, state);
call    0 returned 100%
     1330: 1008:      return 0;
        -: 1009:		
        -: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
        -: 1021:    case minion:
        -: 1022:      //+1 action
    #####: 1023:      state->numActions++;
        -: 1024:			
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1027:			
    #####: 1028:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  state->coins = state->coins + 2;
        -: 1031:	}
        -: 1032:			
    #####: 1033:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //discard hand
    #####: 1036:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1037:	    {
    #####: 1038:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1039:	    }
        -: 1040:				
        -: 1041:	  //draw 4
    #####: 1042:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:	    {
    #####: 1044:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1045:	    }
        -: 1046:				
        -: 1047:	  //other players discard hand and redraw if hand size > 4
    #####: 1048:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1049:	    {
    #####: 1050:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1051:		{
    #####: 1052:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1053:		    {
        -: 1054:		      //discard hand
    #####: 1055:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1056:			{
    #####: 1057:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1058:			}
        -: 1059:							
        -: 1060:		      //draw 4
    #####: 1061:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1062:			{
    #####: 1063:			  drawCard(i, state);
call    0 never executed
        -: 1064:			}
        -: 1065:		    }
        -: 1066:		}
        -: 1067:	    }
        -: 1068:				
        -: 1069:	}
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case steward:
    #####: 1073:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1074:	{
        -: 1075:	  //+2 cards
    #####: 1076:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1077:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1078:	}
    #####: 1079:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1080:	{
        -: 1081:	  //+2 coins
    #####: 1082:	  state->coins = state->coins + 2;
        -: 1083:	}
        -: 1084:      else
        -: 1085:	{
        -: 1086:	  //trash 2 cards in hand
    #####: 1087:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1088:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1089:	}
        -: 1090:			
        -: 1091:      //discard card from hand
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case tribute:
    #####: 1096:		newTribute(nextPlayer, tributeRevealedCards, currentPlayer, state);
call    0 never executed
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case ambassador:
    #####: 1100:      j = 0;		//used to check if player has enough cards to discard
        -: 1101:
    #####: 1102:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1103:	{
    #####: 1104:	  return -1;				
        -: 1105:	}
        -: 1106:
    #####: 1107:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  return -1;
        -: 1110:	}
        -: 1111:
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1115:	    {
    #####: 1116:	      j++;
        -: 1117:	    }
        -: 1118:	}
    #####: 1119:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;				
        -: 1122:	}
        -: 1123:
        -: 1124:      if (DEBUG) 
        -: 1125:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1126:
        -: 1127:      //increase supply count for choosen card by amount being discarded
    #####: 1128:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1129:			
        -: 1130:      //each other player gains a copy of revealed card
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1136:	    }
        -: 1137:	}
        -: 1138:
        -: 1139:      //discard played card from hand
    #####: 1140:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1141:
        -: 1142:      //trash copies of cards returned to supply
    #####: 1143:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1148:		{
    #####: 1149:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1150:		  break;
        -: 1151:		}
        -: 1152:	    }
        -: 1153:	}			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:		
        -: 1157:    case cutpurse:
        -: 1158:
    #####: 1159:		newCutpurse(currentPlayer, handPos, state);
call    0 never executed
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:		
        -: 1163:    case embargo: 
        -: 1164:      //+2 Coins
    #####: 1165:      state->coins = state->coins + 2;
        -: 1166:			
        -: 1167:      //see if selected pile is in play
    #####: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  return -1;
        -: 1171:	}
        -: 1172:			
        -: 1173:      //add embargo token to selected supply pile
    #####: 1174:      state->embargoTokens[choice1]++;
        -: 1175:			
        -: 1176:      //trash card
    #####: 1177:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:			
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:			
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1198:	}
        -: 1199:			
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:				
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:			
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:	
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 988 returned 100% blocks executed 89%
      988: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:	
        -: 1251:  //if card is not trashed, added to Played pile 
      988: 1252:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1253:    {
        -: 1254:      //add card to played pile
      988: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      988: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //set played card to -1
      988: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:	
        -: 1262:  //remove card from player's hand
      988: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
       73: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
      915: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else 	
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
      915: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
      915: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
      915: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:	
      988: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 172 returned 100% blocks executed 70%
      172: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:	
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
      172: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1292:    {
    #####: 1293:      return -1;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
      172: 1301:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
      172: 1306:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
      172: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      172: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //decrease number in supply pile
      172: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:	 
      172: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 2760 returned 100% blocks executed 100%
     2760: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:	
        -: 1327:  //reset coin count
     2760: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
    16384: 1331:  for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    13624: 1332:      if (state->hand[player][i] == copper){
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
     9393: 1333:  	  state->coins += 1;
        -: 1334:      }
     4231: 1335:      else if (state->hand[player][i] == silver){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       40: 1336:  	  state->coins += 2;
        -: 1337:      }
     4191: 1338:      else if (state->hand[player][i] == gold){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       35: 1339:  	  state->coins += 3;
        -: 1340:      }
        -: 1341:  }	
        -: 1342:
        -: 1343:  //add bonus
     2760: 1344:  state->coins += bonus;
        -: 1345:
     2760: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
