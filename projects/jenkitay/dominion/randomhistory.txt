/*******************************************************************************
- Taylor Jenkins
- jenkitay@onid.oregonstate.edu
- CS 362 - Software Engineering II
- Assignment 4
- filename: randomhistory.txt
- Description: Write up of the development of my random testers
*******************************************************************************/

I chose to test the adventurer and sea hag cards. Their effects are as follows:

Effect of adventurer card:
   Reveal cards from your deck until you reveal 2 treasure cards. If 2 treasure
   cards are not found within the deck, then shuffle the discard pile which will 
   become the new deck. Begin searching the new deck until 2 treasure cards are
   found. Put those two treasure cards in your hand and discard the other 
   revealed cards.
   
Effect of sea hag card:
   Each other player discards the top card of his deck, then gains a
   curse card, which is placed on top of the deck.
   
*******************************************************************************
Testing the adventurer card:

randomtestadventurer.c randomly initializes a game state (the number of players 
and the number and types of cards in hand, deck, discard, and played cards). 
Because my intent with this test is initially to focus on finding errors in the 
program associated with correct input, I limited the range of randomization to 
within and at the limits of allowable input. The other reason I chose to limit 
my input to allowable values, was because the purpose of my testing was to test
the effect of the adventurer card, and handling incorrect input is not one of 
the functions of the adventurer card.

To prevent my output file from becoming too large, I chose to limit the number 
of tests to 1000, or until 10,000 errors were reported. Here are the results of
this test:

10014 adventurer tests FAILED
test 1 failed 4334 times.
test 2 failed 1879 times.
test 3 failed 1853 times.
test 4 failed 0 times.
test 5 failed 1948 times.

Coverage:

Despite only testing a single function, the test managed to achieve coverage of 
roughly a quarter of the dominion code.

File 'dominion.c'
Lines executed:24.74% of 582
Branches executed:21.10% of 417
Taken at least once:19.42% of 417
Calls executed:12.12% of 99
dominion.c:creating 'dominion.c.gcov'

File 'rngs.c'
Lines executed:57.38% of 61
Branches executed:50.00% of 32
Taken at least once:37.50% of 32
Calls executed:18.75% of 16
rngs.c:creating 'rngs.c.gcov'

I attribute only 84.87% line coverage of the test program to test 4 having never
failed. 

File 'randomtestadventurer.c'
Lines executed:84.87% of 152
Branches executed:93.48% of 92
Taken at least once:79.35% of 92
Calls executed:71.74% of 46

Coverage of adventurerCardEffect function:

Beyond simply executing each path significantly more times, there was no
improvement of coverage of the adventurerCardEffect function, since the unit
tests also achieved 100% coverage.

function adventurerCardEffect called 1951 returned 100% blocks executed 100%
     1951:  723:int adventurerCardEffect(struct gameState *state)
        -:  724:{
        -:  725:   int i;
     1951:  726:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  727:
     8236:  728:   for (i = 0; i < state->numPlayers; i++){
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
     6285:  729:      if (i != currentPlayer){
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
     4334:  730:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]];           
     4334:  731:        state->deckCount[i]--;
     4334:  732:        state->discardCount[i]++;
     4334:  733:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  734:      }
        -:  735:   }
     1951:  736:      return 0;
        -:  737:}

        
        
*******************************************************************************
Testing the Sea Hag card:


randomtestcard.c randomly initializes a game state (the number of players 
and the number and types of cards in hand, deck, discard, and played cards). 
Because my intent with this test is initially to focus on finding errors in the 
program associated with correct input, I limited the range of randomization to 
within and at the limits of allowable input. The other reason I chose to limit 
my input to allowable values, was because the purpose of my testing was to test
the effect of the Sea Hag card, and handling incorrect input is not one of 
the functions of the Sea Hag card.

To prevent my output file from becoming too large, I chose to limit the number 
of tests to 1000, or until 10,000 errors were reported. Here are the results of
this test:

10018 sea_hag tests FAILED
test 1 failed 0 times.
test 2 failed 1043 times.
test 3 failed 3367 times.
test 4 failed 0 times.
test 5 failed 3303 times.
test 6 failed 2305 times.

Coverage:

Despite only testing a single function, the test managed to achieve coverage of 
roughly a quarter of the dominion code.

File 'dominion.c'
Lines executed:23.20% of 582
Branches executed:20.14% of 417
Taken at least once:18.47% of 417
Calls executed:11.11% of 99

File 'rngs.c'
Lines executed:57.38% of 61
Branches executed:50.00% of 32
Taken at least once:37.50% of 32
Calls executed:18.75% of 16
rngs.c:creating 'rngs.c.gcov'

File 'randomtestcard.c'
Lines executed:95.31% of 128
Branches executed:100.00% of 62
Taken at least once:85.48% of 62
Calls executed:84.44% of 45

Coverage of sea_hagCardEffect function:

Coverage of the sea_hagCardEffect function improved from 93% of blocks executed 
with unit testing to 100% with random testing.

function sea_hagCardEffect called 1043 returned 100% blocks executed 100%
     1043:  646:int sea_hagCardEffect(struct gameState *state)
        -:  647:{
     1043:  648:   int z = 0;// this is the counter for the temp hand
     1043:  649:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1043:  650:   int drawntreasure=0;
        -:  651:   int cardDrawn;
        -:  652:   int temphand[MAX_HAND];// moved above the if statement
        -:  653:
    29851:  654:   while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  655:      //if the deck is empty we need to shuffle discard and add to deck
    27765:  656:      if (state->deckCount[currentPlayer] <1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       64:  657:         shuffle(currentPlayer, state);
call    0 returned 100%
        -:  658:      }
    27765:  659:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  660:
        -:  661:      //top card of hand is most recently drawn card.
    27765:  662:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  663:
    29851:  664:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == copper)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2086:  665:         drawntreasure++;
        -:  666:      else{
    25679:  667:         temphand[z]=cardDrawn;
        -:  668:
        -:  669:         //this should just remove the top card (the most recently drawn one).
    25679:  670:         state->handCount[currentPlayer]--;
        -:  671:
    25679:  672:         z++;
        -:  673:      }
        -:  674:   }
    28808:  675:   while(z >= 0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  676:      // discard all cards in play that have been drawn
    26722:  677:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    26722:  678:      z=z-1;
        -:  679:   }
     1043:  680:   return 0;
        -:  681:
        -:  682:}

