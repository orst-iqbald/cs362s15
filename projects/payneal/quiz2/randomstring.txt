inputChar(): 

To make sure random  chars were created I combined a random int generator with 
ascii values and held ints as chars, that way all possible chars that were needed for testme() to reach state 9 were obtainable do to the inevitible numbers game. 


inputString(): 

I first created a string and set it to “reset” because that was the last state requirement needed to be reached. This was mainly done because I have learned that as a tester I always need to have the end game in sight and that was the final state needed to be reached. I then created a pointer so that “reset” could be passed along or returned to testme() once called in the function. Prior to returning “reset” a loop the size of “reset” ,without the terminating character being considered, was created. This was done so that at times I could replaced various characters within “reset” with the inputChar function because once the state reached  8 I didn’t want the program to immediately end. This also gave me an opportunity to see if inputChar() created a char that could be placed into a string. 

Issues: 
I first started with using ascii values 91 - 125 but then realized I couldn’t get pass state two, So at that point I added an additional if statement to include 40 and 41 randomly the ascii values for case 2 and 8, after that I couldn’t get pass case 4 because the space character was as value 30 at that point I had no interest in adding an additional if statement for that one missing character so I put my tester hat on and decided it was better to attack these cases in a brute force manner so I used a wider range from 32 to 125. This not only allowed me to write less code but also expanded the cases in which I would be testing and since not me but the computer would be doing this work I figured why not. Also I have various commented out code that was used to verify that the values of certain highly dependent variables where being collected and passed correctly. 

I enjoyed this assignment because it increased my understanding of how to “tame my buzzer”. 

Hear me roar, 
Ali Payne