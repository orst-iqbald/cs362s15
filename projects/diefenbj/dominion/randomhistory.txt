[SEE MY PROJECT FOLDER ON GITHUB FOR MUCH NICER DOCUMENTATION]
# diefenbj's dominion project

## HW4 Random Tests
My random tests cover the [`Adventurer`][1] and [`Embargo`][2] functions
I refactored out of [`dominion.c`](dominion.c).

### Random Testing: Adventurer
Before I wrote the testing code, I had to decide on whether or not
randomizing bits in the `gameState` would be a good idea. Despite
the endorsement to do this, I decided against it, due to the
_pre-conditions_ of the card handling cases. Both `h_adventurer()`
and `h_embargo()` expected a valid/initialized `gameState`. Randomizing
bits would have certainly produced unfunctional states, such as
setting a `deckCount` to be greater than 500, the max size.

I only wanted to randomize the properties of `gameState` that would
change output from `h_adventurer`. Eventually, I settled on randomizing
the following:
 - Deck size & composition
 - Discard size & composition
 - Hand size & composition

Since the deck and discard could be shuffled around (`h_adventurer`
could reset the deck/discard) I made sure there would be no illegal
amount of cards between the two by randomizing the sizes as: 
> `0 < handSize < 499, 0 < deckCount < 499, 0 < discardCount < 499, 
deckCount + discardCount <= rand() % 500`

I randomly filled in cards up to the size of each stack of cards,
restraining card values to `curse <= cardValue <= treasure_map`.
I decided on 2000 random tests ([as found in `betterTestDrawCard.c`][3]).

#### Success/Failure Conditions
The Adventurer card is supposed to reveal two cards
from your deck until you reveal two treasure cards, and adds those
two cards to the hand (discarding the rest). This means that for
testing to be right, it had to make sure only those two treasure
cards were added. I had 3 fail conditions:
 - If calling `h_adventurer` returned something other than `0`
 - If the `handCount` did not increase by `2`
 - If the last two drawn cards were not treasure cards

Otherwise, it was considered a successful test.

#### Results & Coverage
Quick Stats:
 - [0 Failures][4]
 - [21.53%][5] of lines executed in `dominion.c`
 - [Total line & branch converage][6] of `h_adventurer`

The coverage is low due to the requirement to test just the
Adventurer card handling code, not the entire `dominion.c`.
As seen, it has 100% coverage of the necessary code. No bugs
were found.

### Random Testing: Embargo
As with the Adventurer testing, I did not randomize bits. I chose
to randomize based on every state variable that the Embargo card
worked with:
 - Discard size & composition
 - Hand size & composition
 - Player's coin count
 - The card to place an Embargo on
 - Current embargo counts
 - Current supply counts

As with the Adventurer testing, I limited values to legal values (or,
if the value was especially unimportant, to a small range).

#### Success/Failure Conditions
The Embargo card is only successful if the chosen card to embargo is
still able to be drawn (a.k.a. `supplyCount != -1`). If so, it
adds an Embargo on the chosen card. However, it adds +2 gold either
way. This means that the fail conditions are as follows:
 - If `h_embargo()` returns `-1` but the supply count of the chosen 
 card is not `-1`
 - If `h_embargo()` returned `0` but two coins were not added
 - If `h_embargo()` returned `0` but the chosen card's embargo count 
 is not one greater than before

Otherwise, it was successful.

#### Results & Coverage
Quick Stats:
 - [0 Failures][7]
 - [18.92%][8] of lines executed in `dominion.c`
 - [Total line & branch converage][9] of `h_embargo`

The coverage is low due to the requirement to test just the
Embargo card handling code, not the entire `dominion.c`.
As seen, it has 100% coverage of the necessary code. No bugs
were found.

[0]:References_Below
[1]:https://github.com/TheVulch/cs362s15/blob/cfdcda1af5456711e868f7aa98cd266d94cba1b3/projects/diefenbj/dominion/dominion.c#L1249-L1274
[2]:https://github.com/TheVulch/cs362s15/blob/cfdcda1af5456711e868f7aa98cd266d94cba1b3/projects/diefenbj/dominion/dominion.c#L1276-L1292
[3]:https://github.com/TheVulch/cs362s15/blob/cfdcda1af5456711e868f7aa98cd266d94cba1b3/projects/diefenbj/dominion/betterTestDrawCard.c#L35
[4]:https://github.com/TheVulch/cs362s15/blob/a9e8938c9e2016ffbb1b9288716dd6258da125fa/projects/diefenbj/dominion/randomtestadventurer.out#L2002
[5]:https://github.com/TheVulch/cs362s15/blob/a9e8938c9e2016ffbb1b9288716dd6258da125fa/projects/diefenbj/dominion/randomtestadventurer.out#L2004
[6]:https://github.com/TheVulch/cs362s15/blob/a9e8938c9e2016ffbb1b9288716dd6258da125fa/projects/diefenbj/dominion/randomtestadventurer.out#L3777-L3817
[7]:https://github.com/TheVulch/cs362s15/blob/a9e8938c9e2016ffbb1b9288716dd6258da125fa/projects/diefenbj/dominion/randomtestcard.out#L2002
[8]:https://github.com/TheVulch/cs362s15/blob/a9e8938c9e2016ffbb1b9288716dd6258da125fa/projects/diefenbj/dominion/randomtestcard.out#L2004
[9]:https://github.com/TheVulch/cs362s15/blob/a9e8938c9e2016ffbb1b9288716dd6258da125fa/projects/diefenbj/dominion/randomtestcard.out#L3819-L3839

