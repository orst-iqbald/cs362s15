Assignment 3, Begin Test:

unittest1.c:
-------------------- Test: buyCard() --------------------
Attempt to buy adventurer with  3 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  3 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  3 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  4 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  4 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  4 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  5 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  5 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  5 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  6 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  6 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  6 coins, 0 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  3 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  3 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  3 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  4 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  4 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  4 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  5 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  5 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  5 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  6 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  6 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  6 coins, 0 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  3 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  3 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  3 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  4 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  4 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  4 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  5 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  5 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  5 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  6 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  6 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  6 coins, 1 left buys, and  0 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  3 coins, 1 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  3 coins, 1 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  3 coins, 1 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy adventurer with  4 coins, 1 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  4 coins, 1 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy     smithy with  4 coins, 1 left buys, and  1 left in stack
buyCard() succeeded, which is expected.
Attempt to buy adventurer with  5 coins, 1 left buys, and  1 left in stack
buyCard() failed, which is expected.
Attempt to buy       mine with  5 coins, 1 left buys, and  1 left in stack
buyCard() succeeded, which is expected.
Attempt to buy     smithy with  5 coins, 1 left buys, and  1 left in stack
buyCard() succeeded, which is expected.
Attempt to buy adventurer with  6 coins, 1 left buys, and  1 left in stack
buyCard() succeeded, which is expected.
Attempt to buy       mine with  6 coins, 1 left buys, and  1 left in stack
buyCard() succeeded, which is expected.
Attempt to buy     smithy with  6 coins, 1 left buys, and  1 left in stack
buyCard() succeeded, which is expected.
-------------------- Test: buyCard() completed --------------------

File 'dominion.c'
Lines executed:20.83% of 581
Branches executed:24.82% of 419
Taken at least once:15.04% of 419
Calls executed:12.63% of 95
dominion.c:creating 'dominion.c.gcov'

unittest2.c:
-------------------- Test: updateCoins() --------------------
Copper 0 + Silver 0 + Gold 0 + Bonus 0 = Total 0, which is expected.
Copper 0 + Silver 0 + Gold 0 + Bonus 1 = Total 1, which is expected.
Copper 0 + Silver 0 + Gold 0 + Bonus 2 = Total 2, which is expected.
Copper 0 + Silver 0 + Gold 1 + Bonus 0 = Total 3, which is expected.
Copper 0 + Silver 0 + Gold 1 + Bonus 1 = Total 4, which is expected.
Copper 0 + Silver 0 + Gold 1 + Bonus 2 = Total 5, which is expected.
Copper 0 + Silver 1 + Gold 0 + Bonus 0 = Total 2, which is expected.
Copper 0 + Silver 1 + Gold 0 + Bonus 1 = Total 3, which is expected.
Copper 0 + Silver 1 + Gold 0 + Bonus 2 = Total 4, which is expected.
Copper 0 + Silver 1 + Gold 1 + Bonus 0 = Total 5, which is expected.
Copper 0 + Silver 1 + Gold 1 + Bonus 1 = Total 6, which is expected.
Copper 0 + Silver 1 + Gold 1 + Bonus 2 = Total 7, which is expected.
Copper 0 + Silver 2 + Gold 0 + Bonus 0 = Total 4, which is expected.
Copper 0 + Silver 2 + Gold 0 + Bonus 1 = Total 5, which is expected.
Copper 0 + Silver 2 + Gold 0 + Bonus 2 = Total 6, which is expected.
Copper 0 + Silver 2 + Gold 1 + Bonus 0 = Total 7, which is expected.
Copper 0 + Silver 2 + Gold 1 + Bonus 1 = Total 8, which is expected.
Copper 0 + Silver 2 + Gold 1 + Bonus 2 = Total 9, which is expected.
Copper 1 + Silver 0 + Gold 0 + Bonus 0 = Total 1, which is expected.
Copper 1 + Silver 0 + Gold 0 + Bonus 1 = Total 2, which is expected.
Copper 1 + Silver 0 + Gold 0 + Bonus 2 = Total 3, which is expected.
Copper 1 + Silver 0 + Gold 1 + Bonus 0 = Total 4, which is expected.
Copper 1 + Silver 0 + Gold 1 + Bonus 1 = Total 5, which is expected.
Copper 1 + Silver 0 + Gold 1 + Bonus 2 = Total 6, which is expected.
Copper 1 + Silver 1 + Gold 0 + Bonus 0 = Total 3, which is expected.
Copper 1 + Silver 1 + Gold 0 + Bonus 1 = Total 4, which is expected.
Copper 1 + Silver 1 + Gold 0 + Bonus 2 = Total 5, which is expected.
Copper 1 + Silver 1 + Gold 1 + Bonus 0 = Total 6, which is expected.
Copper 1 + Silver 1 + Gold 1 + Bonus 1 = Total 7, which is expected.
Copper 1 + Silver 1 + Gold 1 + Bonus 2 = Total 8, which is expected.
Copper 1 + Silver 2 + Gold 0 + Bonus 0 = Total 5, which is expected.
Copper 1 + Silver 2 + Gold 0 + Bonus 1 = Total 6, which is expected.
Copper 1 + Silver 2 + Gold 0 + Bonus 2 = Total 7, which is expected.
Copper 1 + Silver 2 + Gold 1 + Bonus 0 = Total 8, which is expected.
Copper 1 + Silver 2 + Gold 1 + Bonus 1 = Total 9, which is expected.
Copper 1 + Silver 2 + Gold 1 + Bonus 2 = Total 10, which is expected.
Copper 2 + Silver 0 + Gold 0 + Bonus 0 = Total 2, which is expected.
Copper 2 + Silver 0 + Gold 0 + Bonus 1 = Total 3, which is expected.
Copper 2 + Silver 0 + Gold 0 + Bonus 2 = Total 4, which is expected.
Copper 2 + Silver 0 + Gold 1 + Bonus 0 = Total 5, which is expected.
Copper 2 + Silver 0 + Gold 1 + Bonus 1 = Total 6, which is expected.
Copper 2 + Silver 0 + Gold 1 + Bonus 2 = Total 7, which is expected.
Copper 2 + Silver 1 + Gold 0 + Bonus 0 = Total 4, which is expected.
Copper 2 + Silver 1 + Gold 0 + Bonus 1 = Total 5, which is expected.
Copper 2 + Silver 1 + Gold 0 + Bonus 2 = Total 6, which is expected.
Copper 2 + Silver 1 + Gold 1 + Bonus 0 = Total 7, which is expected.
Copper 2 + Silver 1 + Gold 1 + Bonus 1 = Total 8, which is expected.
Copper 2 + Silver 1 + Gold 1 + Bonus 2 = Total 9, which is expected.
Copper 2 + Silver 2 + Gold 0 + Bonus 0 = Total 6, which is expected.
Copper 2 + Silver 2 + Gold 0 + Bonus 1 = Total 7, which is expected.
Copper 2 + Silver 2 + Gold 0 + Bonus 2 = Total 8, which is expected.
Copper 2 + Silver 2 + Gold 1 + Bonus 0 = Total 9, which is expected.
Copper 2 + Silver 2 + Gold 1 + Bonus 1 = Total 10, which is expected.
Copper 2 + Silver 2 + Gold 1 + Bonus 2 = Total 11, which is expected.
-------------------- Test: updateCoins() completed --------------------

File 'dominion.c'
Lines executed:21.17% of 581
Branches executed:24.82% of 419
Taken at least once:15.51% of 419
Calls executed:12.63% of 95
dominion.c:creating 'dominion.c.gcov'

unittest3.c:
-------------------- Test: shuffle() --------------------
Initial 12 cards: 0 1 2 3 4 5 6 7 8 9 10 11 Start shuffle:
1 0 6 11 7 5 9 10 8 2 3 4  Number of cards moved: 10 
5 10 4 9 1 2 6 8 3 0 11 7  Number of cards moved: 12 
4 10 7 9 5 2 11 1 6 0 3 8  Number of cards moved: 8 
10 11 8 2 0 9 5 7 6 1 4 3  Number of cards moved: 11 
9 3 1 5 0 2 7 10 8 11 6 4  Number of cards moved: 11 
6 9 5 7 2 8 0 10 11 1 4 3  Number of cards moved: 11 
7 8 11 4 2 10 0 5 1 3 9 6  Number of cards moved: 10 
7 6 11 0 5 4 2 8 1 9 3 10  Number of cards moved: 9 
1 0 2 9 5 8 11 6 4 10 3 7  Number of cards moved: 10 
7 0 5 6 4 8 3 10 2 9 11 1  Number of cards moved: 10 
0 5 11 1 4 8 6 10 2 3 7 9  Number of cards moved: 8 
5 7 8 4 1 6 10 3 2 0 9 11  Number of cards moved: 11 
4 9 10 0 6 8 2 7 1 11 5 3  Number of cards moved: 12 
2 11 1 7 4 10 0 3 5 8 6 9  Number of cards moved: 12 
7 5 9 10 6 4 0 1 3 11 8 2  Number of cards moved: 11 
11 0 4 7 9 10 5 3 1 6 2 8  Number of cards moved: 12 
8 11 7 9 3 1 2 5 6 4 0 10  Number of cards moved: 12 
5 6 1 7 0 8 9 3 2 10 11 4  Number of cards moved: 12 
3 10 0 5 8 9 6 11 7 4 1 2  Number of cards moved: 12 
9 4 7 10 5 1 11 6 8 2 0 3  Number of cards moved: 12 
10 2 0 5 7 4 11 9 1 3 6 8  Number of cards moved: 11 
2 6 0 8 10 1 11 7 3 4 5 9  Number of cards moved: 10 
1 7 10 3 6 2 4 5 8 11 0 9  Number of cards moved: 11 
11 0 6 4 10 8 1 2 3 5 7 9  Number of cards moved: 11 
1 4 11 0 7 3 5 9 6 2 10 8  Number of cards moved: 12 
3 4 7 9 2 1 0 10 6 5 11 8  Number of cards moved: 9 
0 3 2 4 8 11 7 6 10 1 5 9  Number of cards moved: 12 
7 2 10 4 11 5 0 6 9 3 8 1  Number of cards moved: 10 
2 8 10 9 7 3 4 0 6 1 5 11  Number of cards moved: 11 
1 11 8 4 2 5 9 0 10 7 3 6  Number of cards moved: 11 
0 3 7 5 2 1 6 9 10 8 4 11  Number of cards moved: 10 
9 3 11 0 4 8 1 6 2 5 10 7  Number of cards moved: 11 
2 3 10 8 7 4 0 9 11 6 1 5  Number of cards moved: 11 
6 7 2 9 1 0 4 8 10 11 5 3  Number of cards moved: 12 
4 1 5 8 11 2 6 9 7 0 10 3  Number of cards moved: 11 
7 8 5 1 3 10 0 9 4 2 11 6  Number of cards moved: 10 
11 10 2 9 3 0 7 1 5 4 6 8  Number of cards moved: 11 
7 8 11 10 2 3 4 1 0 9 5 6  Number of cards moved: 11 
3 6 4 7 9 1 10 2 8 11 0 5  Number of cards moved: 12 
7 3 0 4 1 6 11 8 5 2 9 10  Number of cards moved: 12 
8 3 1 7 9 4 5 11 0 6 2 10  Number of cards moved: 10 
8 2 9 5 10 6 11 4 3 1 0 7  Number of cards moved: 11 
5 0 9 7 8 11 2 1 10 3 6 4  Number of cards moved: 11 
3 10 5 7 1 6 4 9 11 8 2 0  Number of cards moved: 11 
3 11 6 4 7 9 2 8 5 10 1 0  Number of cards moved: 10 
6 4 3 7 2 10 9 1 8 5 0 11  Number of cards moved: 12 
8 3 4 2 10 0 5 1 11 9 6 7  Number of cards moved: 11 
11 5 4 2 7 1 3 8 0 6 9 10  Number of cards moved: 10 
8 9 2 0 3 7 11 4 5 10 1 6  Number of cards moved: 12 
1 8 5 10 11 4 0 9 7 2 3 6  Number of cards moved: 11 

-------------------- Test: shuffle() completed --------------------

File 'dominion.c'
Lines executed:21.34% of 581
Branches executed:24.82% of 419
Taken at least once:15.75% of 419
Calls executed:12.63% of 95
dominion.c:creating 'dominion.c.gcov'

unittest4.c:
-------------------- Test: scoreFor() --------------------
Test cards in hand
Curse 1 + Estate 0 + Duchy 0 + Province 0 + Garden 0 = Total -1, which is expected.
Curse 1 + Estate 1 + Duchy 0 + Province 0 + Garden 0 = Total 0, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 0 + Garden 0 = Total 3, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 0 = Total 9, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = Total 9, which is expected.
Curse 2 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = Total 8, which is expected.
Curse 1 + Estate 2 + Duchy 1 + Province 1 + Garden 1 = Total 10, which is expected.
Curse 1 + Estate 1 + Duchy 2 + Province 1 + Garden 1 = Total 12, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 2 + Garden 1 = Total 15, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 2 = Total 9, which is expected.
Curse 2 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = Total 8, which is expected.
Curse 1 + Estate 2 + Duchy 1 + Province 1 + Garden 1 = Total 10, which is expected.
Curse 1 + Estate 1 + Duchy 2 + Province 1 + Garden 1 = Total 12, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 2 + Garden 1 = Total 15, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 2 = Total 9, which is expected.
Curse 2 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = Total 8, which is expected.
Curse 1 + Estate 2 + Duchy 1 + Province 1 + Garden 1 = Total 10, which is expected.
Curse 1 + Estate 1 + Duchy 2 + Province 1 + Garden 1 = Total 12, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 2 + Garden 1 = Total 15, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 2 = Total 9, which is expected.
Curse 2 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = Total 8, which is expected.
Curse 1 + Estate 2 + Duchy 1 + Province 1 + Garden 1 = Total 10, which is expected.
Curse 1 + Estate 1 + Duchy 2 + Province 1 + Garden 1 = Total 12, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 2 + Garden 1 = Total 15, which is expected.

Test cards in deck
Curse 1 + Estate 0 + Duchy 0 + Province 0 + Garden 0 = 0 Total, which is NOT expected.
Curse 1 + Estate 1 + Duchy 0 + Province 0 + Garden 0 = 0 Total, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 0 + Garden 0 = 0 Total, which is NOT expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 0 = 0 Total, which is NOT expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = 0 Total, which is NOT expected.
Curse 2 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 1 + Province 1 + Garden 1 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 2 + Province 1 + Garden 1 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 2 + Province 2 + Garden 1 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 2 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 3 + Estate 2 + Duchy 2 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 3 + Estate 3 + Duchy 2 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 3 + Duchy 3 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 3 + Province 3 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 2 + Province 3 + Garden 3 = 0 Total, which is NOT expected.
Curse 3 + Estate 2 + Duchy 2 + Province 2 + Garden 3 = 0 Total, which is NOT expected.
Curse 3 + Estate 3 + Duchy 2 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 3 + Duchy 3 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 3 + Province 3 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 2 + Province 3 + Garden 3 = 0 Total, which is NOT expected.
Curse 3 + Estate 2 + Duchy 2 + Province 2 + Garden 3 = 0 Total, which is NOT expected.
Curse 3 + Estate 3 + Duchy 2 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 3 + Duchy 3 + Province 2 + Garden 2 = 0 Total, which is NOT expected.
Curse 2 + Estate 2 + Duchy 3 + Province 3 + Garden 2 = 0 Total, which is NOT expected.

Test cards in discard
Curse 1 + Estate 0 + Duchy 0 + Province 0 + Garden 0 = -1 Total, which is expected.
Curse 1 + Estate 1 + Duchy 0 + Province 0 + Garden 0 = 0 Total, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 0 + Garden 0 = 3 Total, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 0 = 9 Total, which is expected.
Curse 1 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = 9 Total, which is expected.
Curse 2 + Estate 1 + Duchy 1 + Province 1 + Garden 1 = 8 Total, which is expected.
Curse 2 + Estate 2 + Duchy 1 + Province 1 + Garden 1 = 9 Total, which is expected.
Curse 2 + Estate 2 + Duchy 2 + Province 1 + Garden 1 = 12 Total, which is expected.
Curse 2 + Estate 2 + Duchy 2 + Province 2 + Garden 1 = 18 Total, which is expected.
Curse 2 + Estate 2 + Duchy 2 + Province 2 + Garden 2 = 18 Total, which is expected.
Curse 3 + Estate 2 + Duchy 2 + Province 2 + Garden 2 = 17 Total, which is expected.
Curse 3 + Estate 3 + Duchy 2 + Province 2 + Garden 2 = 18 Total, which is expected.
Curse 2 + Estate 3 + Duchy 3 + Province 2 + Garden 2 = 22 Total, which is expected.
Curse 2 + Estate 2 + Duchy 3 + Province 3 + Garden 2 = 27 Total, which is expected.
Curse 2 + Estate 2 + Duchy 2 + Province 3 + Garden 3 = 24 Total, which is expected.
Curse 3 + Estate 2 + Duchy 2 + Province 2 + Garden 3 = 17 Total, which is expected.
Curse 3 + Estate 3 + Duchy 2 + Province 2 + Garden 2 = 18 Total, which is expected.
Curse 2 + Estate 3 + Duchy 3 + Province 2 + Garden 2 = 22 Total, which is expected.
Curse 2 + Estate 2 + Duchy 3 + Province 3 + Garden 2 = 27 Total, which is expected.
Curse 2 + Estate 2 + Duchy 2 + Province 3 + Garden 3 = 24 Total, which is expected.
Curse 3 + Estate 2 + Duchy 2 + Province 2 + Garden 3 = 17 Total, which is expected.
Curse 3 + Estate 3 + Duchy 2 + Province 2 + Garden 2 = 18 Total, which is expected.
Curse 2 + Estate 3 + Duchy 3 + Province 2 + Garden 2 = 22 Total, which is expected.
Curse 2 + Estate 2 + Duchy 3 + Province 3 + Garden 2 = 27 Total, which is expected.

-------------------- Test: scoreFor() completed --------------------

File 'dominion.c'
Lines executed:26.85% of 581
Branches executed:37.23% of 419
Taken at least once:26.01% of 419
Calls executed:14.74% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest1.c:
-------------------- Test Card Function: bug_smithycardplay() --------------------
Test if card quantity is correct:
Cards in hand: 8, which is NOT expected.
Cards in deck: 1, which is NOT expected.
Cards in discard: 1, which is expected.

-------------------- Test Complete: bug_smithycardplay() --------------------

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:39.14% of 419
Taken at least once:27.21% of 419
Calls executed:16.84% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest2.c:
-------------------- Test Card Function: bug_adventurercardplay() --------------------
Test if two new cards in hand are treasures:
Total number of cards drawn: 2, which is expected.
First new card: 4, which is expected.
Second new card: 4, which is expected.
Cards in discard: 0, which is NOT expected.
Coins after buying: 7, which is expected.

-------------------- Test Complete: bug_adventurercardplay() --------------------

File 'dominion.c'
Lines executed:31.15% of 581
Branches executed:41.05% of 419
Taken at least once:28.40% of 419
Calls executed:17.89% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest3.c:
-------------------- Test Card Function: bug_remodelCardPlay() --------------------
Test if function works with enough coins:
Silver card is now: 5, which is NOT expected.
Cards in hand: 5, which is NOT expected.
Cards played: 0, which is NOT expected.

Test if function works with inadequate coins:
Copper card is now: 4, which is expected.
Cards in hand: 3, which is NOT expected.
Cards played: 2, which is NOT expected.

-------------------- Test Complete: bug_remodelCardPlay() --------------------

File 'dominion.c'
Lines executed:33.39% of 581
Branches executed:42.48% of 419
Taken at least once:29.83% of 419
Calls executed:23.16% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest4.c:
-------------------- Test Card Function: bug_greathallCardPlay() --------------------
Test if function works with enough actions:
Total number of cards drawn: 2, Cards in hand: 5, which is NOT expected.
which is NOT expected.
Actions available: 3, which is NOT expected.
Cards played: 1, which is expected.

-------------------- Test Complete: bug_greathallCardPlay() --------------------

File 'dominion.c'
Lines executed:38.90% of 581
Branches executed:50.36% of 419
Taken at least once:31.74% of 419
Calls executed:32.63% of 95
dominion.c:creating 'dominion.c.gcov'

