        -:    0:Source:tests/unitTests/cardTest1.c
        -:    0:Graph:cardTest1.gcno
        -:    0:Data:cardTest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include <math.h>
        -:    5:
        -:    6:#include "rngs.h"
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:
        1:   10:int main (int argc, char **argv) {
        -:   11:
        1:   12:  int NUM_TESTS = 100;
        1:   13:  int numDraws = 0;
        -:   14:  int j, i, n, p, r;
        1:   15:  int handPos, fails = 0;
        -:   16:
        -:   17:  struct gameState G;
        -:   18:  struct gameState post;
        1:   19:  SelectStream(2);
        1:   20:  PutSeed(3);
        -:   21:
      101:   22:    for (n = 0; n < NUM_TESTS; n++) {
  2630100:   23:        for (i = 0; i < sizeof(struct gameState); i++) {
  2630000:   24:          ((char *) &G)[i] = floor(Random() * 256);
        -:   25:        }
        -:   26:        //printf("Smithy test %d of %d \n", n, NUM_TESTS);
        -:   27:
        -:   28:
      100:   29:        p = floor(Random() * 2);
      100:   30:        G.deckCount[p] = floor(Random() * MAX_DECK);
      100:   31:        G.discardCount[p] = floor(Random() * MAX_DECK);
      100:   32:        G.handCount[p] = floor(Random() * MAX_HAND);
      100:   33:        handPos = floor(Random() * G.handCount[p]);
        -:   34:
        -:   35:        /* Make card at handPos a smithy card */
      100:   36:        G.hand[p][handPos] = smithy;
        -:   37:
        -:   38:        /*
        -:   39:        printf("\tPlayer        = %d\n", p);
        -:   40:        printf("\tDeckcount     = %d\n", G.deckCount[p]);
        -:   41:        printf("\tDiscardCount  = %d\n", G.discardCount[p]);
        -:   42:        printf("\tHandCount     = %d\n", G.handCount[p]);
        -:   43:        printf("\tNumDraws      = %d\n", numDraws);
        -:   44:        printf("\tHandpos       = %d\n", handPos);
        -:   45:        */
        -:   46:
      100:   47:        memcpy((void *) &post, (void *) &G, sizeof(struct gameState));
        -:   48:
      100:   49:        smithyEffect(p, handPos, &G);
        -:   50:
      100:   51:        post.handCount[p] += 2; //added three more cards
        -:   52:
        -:   53:        /*
        -:   54:        printf("\tHandCount Post  = %d\n", post.handCount[p]);
        -:   55:        printf("\tHandCount  G    = %d\n", G.handCount[p]);
        -:   56:        printf("\tDiscardCount Post  = %d\n", post.discardCount[p]);
        -:   57:        printf("\tDiscardCount  G    = %d\n", G.discardCount[p]);
        -:   58:        */
        -:   59:
        -:   60:        //printf("\t\tSmithy test %d of %d .....", n, NUM_TESTS);
      100:   61:        if(post.handCount[p] != G.handCount[p]){
        -:   62:         //   printf("\n\t\tFAILED!!\n");
        -:   63:          //  printf("\t\tAT HAND COUNT!\n");
    #####:   64:            fails++;
        -:   65:        }
      100:   66:        if(post.discardCount[p] != G.discardCount[p]){
        -:   67:           // printf("\n\t\tFAILED!!\n");
        -:   68:           // printf("\t\tAT DISCARD COUNT!\n");
    #####:   69:            fails++;
        -:   70:        }
      100:   71:        if(fullDeckCount(p, 0, &G) != fullDeckCount(p, 0, &post)){
        -:   72:            //printf("\n\t\tFAILED!!\n");
        -:   73:            //printf("\t\tAT FULLDECK COUNT!\n");
    #####:   74:            fails++;
        -:   75:        }
        -:   76:
        -:   77:        
        -:   78:
        -:   79:    } 
        -:   80:
        1:   81:        printf("%d num of fails out of %d!\n", fails, NUM_TESTS); 
        -:   82:
        -:   83:
        1:   84:    return 0;
        -:   85:}
        -:   86:
        -:   87:
        -:   88:
