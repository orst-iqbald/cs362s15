updateCoins(): PASS with handCount: 20, cardChoice: COPPER, bonus: 100
updateCoins(): PASS with handCount: 20, cardChoice: SILVER, bonus: 100
updateCoins(): PASS with handCount: 20, cardChoice: GOLD, bonus: 100
updateCoins(): PASS with handCount: 2, cardChoice: COPPER, bonus: 100
updateCoins(): PASS with handCount: 2, cardChoice: SILVER, bonus: 100
updateCoins(): PASS with handCount: 2, cardChoice: GOLD, bonus: 100
File 'unittest1.c'
Lines executed:97.73% of 44
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:
        -:    8:void fillHand(struct gameState *gameOne, int player, int cardChoice, int handSize);
        -:    9:void testHand(struct gameState *gameOne, int handCount, int bonus);
        -:   10:
        6:   11:void fillHand(struct gameState *gameOne, int player, int cardChoice, int handSize)
        -:   12:{
        6:   13:	int i = 0; 
        6:   14:	gameOne->handCount[player] = handSize;
        -:   15:
       72:   16:	for(i = 0; i < gameOne->handCount[player]; i++)
        -:   17:	{
       66:   18:		gameOne->hand[player][i] = cardChoice;
        -:   19:	}
        -:   20:
        6:   21:	return;
        -:   22:}
        -:   23:
        6:   24:void testHand(struct gameState *gameOne, int handCount, int bonus) 
        -:   25:{
        6:   26:	if (gameOne->coins == (handCount * 1) + bonus)
        2:   27:		printf("updateCoins(): PASS with handCount: %d, cardChoice: COPPER, bonus: %d\n", handCount, bonus);
        4:   28:	else if (gameOne->coins == (handCount * 2) + bonus)
        2:   29:		printf("updateCoins(): PASS with handCount: %d, cardChoice: SILVER, bonus: %d\n", handCount, bonus);
        2:   30:	else if (gameOne->coins == (handCount * 3) + bonus)
        2:   31:		printf("updateCoins(): PASS with handCount: %d, cardChoice: GOLD, bonus: %d\n", handCount, bonus);
        -:   32:	else
    #####:   33:		printf("updateCoins(): FAIL\n");
        -:   34:
        6:   35:	return;
        -:   36:}
        -:   37:
        1:   38:int main(int argc, char **argv)
        -:   39:{
        -:   40:	int eValueUpdateCoins;
        -:   41:	int gameStatus;
        -:   42: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   43:        sea_hag, tribute, smithy};
        1:   44:	struct gameState *gameOne = newGame();
        1:   45:	int player = 0;
        1:   46:	int handCount = 20;
        1:   47:	int bonus = 100;
        1:   48:	int numPlayers = 2;
        -:   49:
        1:   50:	gameStatus = initializeGame(numPlayers, k, 6, gameOne);
        -:   51:
        -:   52:	//Set all of the coins to copper
        1:   53:	fillHand(gameOne, player, copper, handCount);
        1:   54:	eValueUpdateCoins = updateCoins(player, gameOne, bonus);
        1:   55:	testHand(gameOne, handCount, bonus);
        -:   56:
        1:   57:	fillHand(gameOne, player, silver, handCount);
        1:   58:	eValueUpdateCoins = updateCoins(player, gameOne, bonus);
        1:   59:	testHand(gameOne, handCount, bonus);
        -:   60:
        1:   61:	fillHand(gameOne, player, gold, handCount);
        1:   62:	eValueUpdateCoins = updateCoins(player, gameOne, bonus);
        1:   63:	testHand(gameOne, handCount, bonus);
        -:   64:
        1:   65:	handCount = 2;
        -:   66:
        1:   67:	fillHand(gameOne, player, copper, handCount);
        1:   68:	eValueUpdateCoins = updateCoins(player, gameOne, bonus);
        1:   69:	testHand(gameOne, handCount, bonus);
        -:   70:
        1:   71:	fillHand(gameOne, player, silver, handCount);
        1:   72:	eValueUpdateCoins = updateCoins(player, gameOne, bonus);
        1:   73:	testHand(gameOne, handCount, bonus);
        -:   74:
        1:   75:	fillHand(gameOne, player, gold, handCount);
        1:   76:	eValueUpdateCoins = updateCoins(player, gameOne, bonus);
        1:   77:	testHand(gameOne, handCount, bonus);
        -:   78:
        -:   79:
        1:   80:	free(gameOne);
        -:   81:
        1:   82:	return 0;
        -:   83:}currentTurn(): PASS when turrentTurn = 2
currentTurn(): PASS when turrentTurn = 1
currentTurn(): PASS when turrentTurn = 0
File 'unittest2.c'
Lines executed:95.24% of 21
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:
        -:    8:void makeTurn(struct gameState *game, int turn);
        -:    9:void testTurn(struct gameState *game, int turn);
        -:   10:
        3:   11:void makeTurn(struct gameState *game, int turn)
        -:   12:{
        3:   13:	game->whoseTurn = turn;
        -:   14:
        3:   15:	return;
        -:   16:}
        -:   17:
        3:   18:void testTurn(struct gameState *game, int turn)
        -:   19:{
        3:   20:	int currentTurn = whoseTurn(game);
        3:   21:	if (currentTurn == turn)
        3:   22:		printf("currentTurn(): PASS when turrentTurn = %d\n", turn);
        -:   23:	else
    #####:   24:		printf("currentTurn(): FAIL when currentTurn = %d\n", turn);
        -:   25:
        3:   26:	return;
        -:   27:}
        -:   28:
        1:   29:int main(int argc, char **argv)
        -:   30:{
        1:   31:	struct gameState *game = newGame();
        -:   32:	int gameStatus;
        -:   33: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   34:        sea_hag, tribute, smithy};
        1:   35:	int players = 3;
        -:   36:
        1:   37:	gameStatus = initializeGame(players, k, 10, game);
        -:   38:	
        1:   39:	makeTurn(game, 2);
        1:   40:	testTurn(game, 2);
        -:   41:
        1:   42:	makeTurn(game, 1);
        1:   43:	testTurn(game, 1);
        -:   44:
        1:   45:	makeTurn(game, 0);
        1:   46:	testTurn(game, 0);
        -:   47:
        1:   48:	return 0;
        -:   49:}supplyCount: PASSED.  Input Value = 50, supplyCount() value = 50
supplyCount: PASSED.  Input Value = 51, supplyCount() value = 51
supplyCount: PASSED.  Input Value = 52, supplyCount() value = 52
supplyCount: PASSED.  Input Value = 53, supplyCount() value = 53
supplyCount: PASSED.  Input Value = 54, supplyCount() value = 54
supplyCount: PASSED.  Input Value = 55, supplyCount() value = 55
supplyCount: PASSED.  Input Value = 56, supplyCount() value = 56
supplyCount: PASSED.  Input Value = 57, supplyCount() value = 57
supplyCount: PASSED.  Input Value = 58, supplyCount() value = 58
supplyCount: PASSED.  Input Value = 59, supplyCount() value = 59
supplyCount: PASSED.  Input Value = 60, supplyCount() value = 60
supplyCount: PASSED.  Input Value = 61, supplyCount() value = 61
supplyCount: PASSED.  Input Value = 62, supplyCount() value = 62
supplyCount: PASSED.  Input Value = 63, supplyCount() value = 63
supplyCount: PASSED.  Input Value = 64, supplyCount() value = 64
supplyCount: PASSED.  Input Value = 65, supplyCount() value = 65
supplyCount: PASSED.  Input Value = 66, supplyCount() value = 66
supplyCount: PASSED.  Input Value = 67, supplyCount() value = 67
supplyCount: PASSED.  Input Value = 68, supplyCount() value = 68
supplyCount: PASSED.  Input Value = 69, supplyCount() value = 69
supplyCount: PASSED.  Input Value = 70, supplyCount() value = 70
supplyCount: PASSED.  Input Value = 71, supplyCount() value = 71
supplyCount: PASSED.  Input Value = 72, supplyCount() value = 72
supplyCount: PASSED.  Input Value = 73, supplyCount() value = 73
supplyCount: PASSED.  Input Value = 74, supplyCount() value = 74
supplyCount: PASSED.  Input Value = 75, supplyCount() value = 75
supplyCount: PASSED.  Input Value = 76, supplyCount() value = 76
File 'unittest3.c'
Lines executed:95.00% of 20
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:
        -:    8:void tSupplyCount(struct gameState *game);
        -:    9:
        1:   10:void tSupplyCount(struct gameState *game)
        -:   11:{
        1:   12:	int i = 0;
        1:   13:	int setValue = 50;
        1:   14:	int value = 0;
        -:   15:
        -:   16:	//Set a unique number of cards for each type of card.
       78:   17:	for (i = 0; i <= treasure_map  + setValue; i++)
        -:   18:	{
       77:   19:		game->supplyCount[i] = setValue + i;
        -:   20:	}
        -:   21:
        -:   22:	//Read all of the set values for the number of cards.
       28:   23:	for (i = 0; i <= treasure_map; i++)
        -:   24:	{
       27:   25:		value = supplyCount(i, game); 
       27:   26:		if (value == game->supplyCount[i])
       27:   27:			printf("supplyCount: PASSED.  Input Value = %d, supplyCount() value = %d\n", game->supplyCount[i], value);
        -:   28:		else
    #####:   29:			printf("supplyCount: FAILED\n");
        -:   30:	}
        -:   31:
        1:   32:	return;
        -:   33:}
        -:   34:
        1:   35:int main(int argc, char **argv)
        -:   36:{
        1:   37:	struct gameState *game = newGame();
        -:   38:	int gameStatus;
        -:   39: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   40:        sea_hag, tribute, smithy};
        1:   41:	int players = 2;
        -:   42:
        1:   43:	gameStatus = initializeGame(players, k, 15, game);
        -:   44:
        1:   45:	tSupplyCount(game);
        -:   46:
        1:   47:	free(game);
        -:   48:
        1:   49:	return 0;
        -:   50:}handCard(): PASSED
handCard(): PASSED
handCard(): PASSED
handCard(): PASSED
handCard(): PASSED
handCard(): PASSED
File 'unittest4.c'
Lines executed:95.00% of 20
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:
        -:    8:void tHandCard(int handPos, struct gameState *state, int currentPlayer);
        -:    9:
        6:   10:void tHandCard(int handPos, struct gameState *state, int currentPlayer)
        -:   11:{
        -:   12:
        6:   13:	state->whoseTurn = currentPlayer;
        6:   14:	state->hand[currentPlayer][handPos] = handPos;
        -:   15:
        6:   16:	if (state->hand[currentPlayer][handPos] == handCard(handPos, state))
        6:   17:		printf("handCard(): PASSED\n");
        -:   18:	else
    #####:   19:		printf("handCard(): FAILED\n");
        -:   20:
        6:   21:	return;
        -:   22:}
        -:   23:
        1:   24:int main(int argc, char **argv)
        -:   25:{
        1:   26:	struct gameState *game = newGame();
        -:   27:	int gameStatus;
        -:   28: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   29:        sea_hag, tribute, smithy};
        1:   30:	int players = 2;
        -:   31:
        1:   32:	gameStatus = initializeGame(players, k, 10, game);
        -:   33:
        1:   34:	tHandCard(0, game, 0);
        1:   35:	tHandCard(9, game, 0);
        1:   36:	tHandCard(0, game, 1);
        1:   37:	tHandCard(9, game, 1);
        1:   38:	tHandCard(5, game, 0);
        1:   39:	tHandCard(5, game, 1);
        -:   40:
        1:   41:	free(game);
        -:   42:
        1:   43:	return 0;
        -:   44:}smithyCard(): FAILED  Initial handCount: 1  Final handCount: 4
smithyCard(): FAILED  Initial handCount: 0  Final handCount: 3
smithyCard(): FAILED  Initial handCount: 5  Final handCount: 6
smithyCard(): FAILED  Initial handCount: 10  Final handCount: 9
File 'cardtest1.c'
Lines executed:95.00% of 20
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:
        -:    8:void tSmithyCard(struct gameState *state, int currentPlayer, int handPos, int hCount);
        -:    9:
        4:   10:void tSmithyCard(struct gameState *state, int currentPlayer, int handPos, int hCount)
        -:   11:{
        4:   12:	state->handCount[currentPlayer] = hCount;
        -:   13:
        4:   14:	int initialCount = state->handCount[currentPlayer];
        4:   15:	int finalCount = 0;
        -:   16:
        4:   17:	smithyCard(state, currentPlayer, handPos);
        -:   18:
        4:   19:	finalCount = state->handCount[currentPlayer];
        -:   20:
        4:   21:	if (finalCount - initialCount == 2)
    #####:   22:		printf("smithyCard(): PASSED  Initial handCount: %d  Final handCount: %d\n", initialCount, finalCount);
        -:   23:	else
        4:   24:		printf("smithyCard(): FAILED  Initial handCount: %d  Final handCount: %d\n", initialCount, finalCount);
        -:   25:
        4:   26:	return;
        -:   27:}
        -:   28:
        1:   29:int main(int argc, char **argv)
        -:   30:{
        -:   31:
        1:   32:	struct gameState *game = newGame();
        -:   33:	int gameStatus;
        -:   34: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   35:        sea_hag, tribute, smithy};
        1:   36:	int players = 2;
        -:   37:
        1:   38:	gameStatus = initializeGame(players, k, 10, game);
        -:   39:
        1:   40:	tSmithyCard(game, 1, 2, 1);
        1:   41:	tSmithyCard(game, 1, 2, 0);
        1:   42:	tSmithyCard(game, 1, 2, 5);
        1:   43:	tSmithyCard(game, 1, 2, 10);
        -:   44:
        1:   45:	return 0;
        -:   46:}adventurerCard(): PASSED  Two cards were added.
adventureCard(): PASSED  Two treausre cards were added.
adventurerCard(): PASSED  Two cards were added.
adventureCard(): PASSED  Two treausre cards were added.
adventurerCard(): PASSED  Two cards were added.
adventureCard(): PASSED  Two treausre cards were added.
adventurerCard(): FAILED  Two cards were not added to the hand
adventureCard(): FAILED  Two treasure cards were not added.
File 'cardtest2.c'
Lines executed:90.48% of 42
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:
        4:    7:void adventurerTest(struct gameState *state, int currentPlayer, int z)
        -:    8:{
        4:    9:	int hSize = 100;
        4:   10:	int i = 0;
        -:   11:	int temphand[30];
        -:   12:	int initialHand[100];
        4:   13:	int handCountStart = 0;
        4:   14:	int handCountFinish = 0;
        4:   15:	int treasureStart = 0;
        4:   16:	int treasureFinish = 0;
        4:   17:	int nonTreasure = 0;
        -:   18:
        4:   19:	handCountStart = state->handCount[currentPlayer];
        -:   20:
       44:   21:	for (i = 0; i < 10; i++)
        -:   22:	{
       40:   23:		if (state->hand[currentPlayer][i] == 4)
        -:   24:		{
       12:   25:			treasureStart++;
        -:   26:		}
       28:   27:		else if (state->hand[currentPlayer][i] == 5)
        -:   28:		{
    #####:   29:			treasureStart++;
        -:   30:		}
       28:   31:		else if (state->hand[currentPlayer][i] == 6)
        -:   32:		{
    #####:   33:			treasureStart++;
        -:   34:		}
        -:   35:	}
        -:   36:	
        4:   37:	adventurerCard(state, currentPlayer, z, temphand);
        -:   38:
        4:   39:	handCountFinish = state->handCount[currentPlayer];
        -:   40:
       25:   41:	for (i = 0; i < handCountFinish; i++)
        -:   42:	{
       21:   43:		if (state->hand[currentPlayer][i] == copper)
       19:   44:			treasureFinish++;
        2:   45:		else if (state->hand[currentPlayer][i] == silver)
    #####:   46:			treasureFinish++;
        2:   47:		else if (state->hand[currentPlayer][i] == gold)
    #####:   48:			treasureFinish++;
        -:   49:	}
        -:   50:
        4:   51:	if ((handCountFinish - handCountStart) == 2)
        3:   52:		printf("adventurerCard(): PASSED  Two cards were added.\n");
        -:   53:	else
        1:   54:		printf("adventurerCard(): FAILED  Two cards were not added to the hand\n");
        -:   55:
        4:   56:	if ((treasureFinish - treasureStart) == 2)
        3:   57:		printf("adventureCard(): PASSED  Two treausre cards were added.\n");
        -:   58:	else
        1:   59:		printf("adventureCard(): FAILED  Two treasure cards were not added.\n");
        -:   60:
        4:   61:	return;
        -:   62:}
        -:   63:
        1:   64:int main(int argc, char **argv)
        -:   65:{
        1:   66:	struct gameState *game = newGame();
        -:   67:	int gameStatus;
        -:   68: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   69:        sea_hag, tribute, smithy};
        1:   70:	int players = 2;
        1:   71:	gameStatus = initializeGame(players, k, 12, game);
        -:   72:
        1:   73:	adventurerTest(game, 1, 0);
        1:   74:	adventurerTest(game, 0, 0);
        1:   75:	adventurerTest(game, 1, 1);
        1:   76:	adventurerTest(game, 0, 1);
        -:   77:
        -:   78:
        1:   79:	return 0;
        -:   80:}
gardensCard(): PASSED
File 'cardtest3.c'
Lines executed:90.91% of 11
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:
        -:    7:
        1:    8:int main(int argc, char **argv)
        -:    9:{
        1:   10:	struct gameState *game = newGame();
        -:   11:	int gameStatus;
        -:   12: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   13:        sea_hag, tribute, smithy};
        1:   14:	int players = 2;
        1:   15:	gameStatus = initializeGame(players, k, 12, game);
        -:   16:
        1:   17:	int testValue = 100;
        -:   18:
        1:   19:	testValue = gardensCard();
        -:   20:
        1:   21:	if (testValue == -1)
        1:   22:		printf("gardensCard(): PASSED\n");
        -:   23:	else
    #####:   24:		printf("gardensCard(): FAILED\n");
        -:   25:
        1:   26:	return 0;
        -:   27:}
villageCard() ACTIONS: PASSED
villageCard() Card Count: PASSED
villageCard() ACTIONS: PASSED
villageCard() Card Count: PASSED
villageCard() ACTIONS: PASSED
villageCard() Card Count: PASSED
villageCard() ACTIONS: PASSED
villageCard() Card Count: PASSED
File 'cardtest4.c'
Lines executed:92.59% of 27
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:
        4:    7:void tVillage(int currentPlayer, struct gameState *state, int handPos)
        -:    8:{
        4:    9:	int cardsStart = 0;
        4:   10:	int cardsFinish = 0;
        4:   11:	int actionsStart = 0;
        4:   12:	int actionsFinish = 0;
        -:   13:	//Test the increase in the number of actions.
        4:   14:	actionsStart = state->numActions;
        4:   15:	cardsStart = state->handCount[currentPlayer];
        -:   16:	//Test for a card to be drawn
        -:   17:
        4:   18:	villageCard(currentPlayer, state, handPos);
        -:   19:
        4:   20:	actionsFinish = state->numActions;
        4:   21:	cardsFinish = state->handCount[currentPlayer];
        -:   22:	//Test that the village card is discarded.
        -:   23:
        -:   24:	/*
        -:   25:	printf("actionsStart %d\n", actionsStart);
        -:   26:	printf("actionsFinish %d\n", actionsFinish);
        -:   27:	printf("cardsStart %d\n", cardsStart);
        -:   28:	printf("cardsFinish %d\n", cardsFinish);
        -:   29:	*/
        -:   30:
        4:   31:	if (actionsFinish - actionsStart == 2)
        4:   32:		printf("villageCard() ACTIONS: PASSED\n");
        -:   33:	else
    #####:   34:		printf("villageCard() ACTIONS: FAILED\n");
        -:   35:
        4:   36:	if (cardsFinish == cardsStart)
        4:   37:		printf("villageCard() Card Count: PASSED\n");
        -:   38:	else
    #####:   39:		printf("villageCard() Card Count: FAILED\n");
        -:   40:
        4:   41:	return;
        -:   42:}
        -:   43:
        1:   44:int main(int argc, char **argv)
        -:   45:{
        1:   46:	struct gameState *game = newGame();
        -:   47:	int gameStatus;
        -:   48: 	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        1:   49:        sea_hag, tribute, smithy};
        1:   50:	int players = 2;
        1:   51:	gameStatus = initializeGame(players, k, 12, game);
        -:   52:
        1:   53:	tVillage(1, game, 0);
        1:   54:	tVillage(0, game, 0);
        1:   55:	tVillage(1, game, 1);
        1:   56:	tVillage(1, game, 1);
        -:   57:
        1:   58:	return 0;
        -:   59:}