Testing getCost...
Passed test 1
Passed test 2
Passed test 3
File 'unittest1.c'
Lines executed:100.00% of 16
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*****************************
        -:    2: * Unit Test for getCost()
        -:    3: ****************************/
        -:    4:
        -:    5://There's no try/catch in C, so
        -:    6://I'm assuming input is integer
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
        1:   15:int main(){
        -:   16:	int i;
        1:   17:	int seed = 100;
        -:   18:	int p;
        -:   19:	struct gameState G;
        -:   20:	
        1:   21:	printf("Testing getCost...\n");
        -:   22:
        -:   23:	//test all values in cards enum against -1
       28:   24:	for( i = 0; i <= 26; i++){
       27:   25:		p = getCost(i);
       27:   26:		assert (p != -1);
        -:   27:	}
        1:   28:	printf("Passed test 1\n");
        -:   29:
        -:   30:	//Test out of bounds value
        1:   31:	i = 27;
        1:   32:	p = getCost(i);
        1:   33:	assert (p == -1);
        1:   34:	printf("Passed test 2\n");
        -:   35:
        1:   36:	i = -1;
        1:   37:	p = getCost(i);
        1:   38:	assert (p == -1);
        1:   39:	printf("Passed test 3\n");
        -:   40:
        1:   41:	return 0;
        -:   42:}
Testing getCost...
Passed test 1
Passed test 2
Passed test 3
File 'unittest1.c'
Lines executed:100.00% of 16
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*****************************
        -:    2: * Unit Test for getCost()
        -:    3: ****************************/
        -:    4:
        -:    5://There's no try/catch in C, so
        -:    6://I'm assuming input is integer
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
        1:   15:int main(){
        -:   16:	int i;
        1:   17:	int seed = 100;
        -:   18:	int p;
        -:   19:	struct gameState G;
        -:   20:	
        1:   21:	printf("Testing getCost...\n");
        -:   22:
        -:   23:	//test all values in cards enum against -1
       28:   24:	for( i = 0; i <= 26; i++){
       27:   25:		p = getCost(i);
       27:   26:		assert (p != -1);
        -:   27:	}
        1:   28:	printf("Passed test 1\n");
        -:   29:
        -:   30:	//Test out of bounds value
        1:   31:	i = 27;
        1:   32:	p = getCost(i);
        1:   33:	assert (p == -1);
        1:   34:	printf("Passed test 2\n");
        -:   35:
        1:   36:	i = -1;
        1:   37:	p = getCost(i);
        1:   38:	assert (p == -1);
        1:   39:	printf("Passed test 3\n");
        -:   40:
        1:   41:	return 0;
        -:   42:}
Testing isGameOver...
Passed test 1
Passed test 2!
Does not break on out-of-range player (Passed test3)
Passed test 4!
Passed test 5!
File 'unittest2.c'
Lines executed:100.00% of 30
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************************
        -:    2: * Unit Test for isGameOver()
        -:    3: * *****************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   17:
        1:   18:	printf("Testing isGameOver...\n");
        -:   19:
        1:   20:	r = initializeGame(2,k,1000,&G);
        -:   21:	//Test with all supplyCounts == 0
       28:   22:	for (i = 0; i <= 26; i++){
       27:   23:		G.supplyCount[i] = 0;
        -:   24:	}
        1:   25:	p = isGameOver(&G);
        1:   26:	assert (p == 1);
        1:   27:	printf("Passed test 1\n");
        -:   28:
        -:   29:	//Test that play proceeds under normal circumstances
       28:   30:	for (i = 0; i <= 26; i++){
       27:   31:		G.supplyCount[i] = 1;
        -:   32:	}
        1:   33:	p = isGameOver(&G);
        1:   34:	assert(p != 1);
        1:   35:	printf("Passed test 2!\n");
        -:   36:
        -:   37:	//Test for player out of range
        1:   38:	G.whoseTurn = 3;
        1:   39:	p = isGameOver(&G);
        1:   40:	printf("Does not break on out-of-range player (Passed test3)\n");
        -:   41:
        -:   42:	//Test for provinces empty
        1:   43:	G.supplyCount[province] = 0;
        1:   44:	p = isGameOver(&G);
        1:   45:	assert (p == 1);
        1:   46:	printf("Passed test 4!\n");
        -:   47:
        -:   48:	//Test for curse cards empty and two other cards
       28:   49:	for (i = 0; i <= 26; i++){
       27:   50:		G.supplyCount[i] = 1;
        -:   51:	}
        1:   52:	G.supplyCount[curse] = 0;
        1:   53:	G.supplyCount[adventurer] = 0;
        1:   54:	G.supplyCount[council_room] = 0;
        1:   55:	p = isGameOver(&G);
        1:   56:	assert(p == 1);
        1:   57:	printf("Passed test 5!\n");
        -:   58:
        1:   59:	return 0;
        -:   60:}
Testing buyCard...
Passed test 1
Passed test 2
Passed test 3
Passed test 4
Passed test 5
Passed test 6
File 'unittest3.c'
Lines executed:100.00% of 41
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/****************************
        -:    2: * Unit Test for buyCard()
        -:    3: ***************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        1:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   16:	int p, r;
        1:   17:	r = initializeGame(2, k, 1000, &G);	
        -:   18:	
        1:   19:	printf("Testing buyCard...\n");
        -:   20:
        -:   21:	//Test with numBuys ==0
        1:   22:	G.numBuys = 0;
        1:   23:	p = buyCard(1, &G);
        1:   24:	assert(p == -1);
        1:   25:	printf("Passed test 1\n");
        -:   26:
        -:   27:	//Test with supply pile empty
        1:   28:	G.numBuys = 1;
        1:   29:	G.supplyCount[1] = 0;
        1:   30:	p = buyCard(1, &G);
        1:   31:	assert(p == -1);
        1:   32:	printf("Passed test 2\n");
        -:   33:	
        -:   34:	//Test with not enough coins
        1:   35:	G.numBuys = 1;
        1:   36:	G.coins = 0;
        1:   37:	G.supplyCount[1] = 2;
        1:   38:	p=buyCard(1, &G);
        1:   39:	assert (p== -1);
        1:   40:	printf("Passed test 3\n");
        -:   41:	
        -:   42:	//Test with each player
        4:   43:	for (i = 0; i < 3; i ++) {
        3:   44:		G.whoseTurn = i;
        3:   45:		G.numBuys = 1;
        3:   46:		G.supplyCount[1] = 1;
        3:   47:		G.coins = 20;
        3:   48:		p = buyCard(1, &G);
        3:   49:		assert (p != -1);
        -:   50:	}
        1:   51:	printf("Passed test 4\n");
        -:   52:
        -:   53:	//Make sure coins decrease
        1:   54:	G.numBuys = 1;
        1:   55:	G.supplyCount[1] = 2;
        1:   56:	G.coins = 20;
        1:   57:	p = buyCard(1, &G);
        1:   58:	i = getCost(1);
        1:   59:	assert (G.coins == 18);
        1:   60:	printf("Passed test 5\n");
        -:   61:
        -:   62:	//Make sure buys decrease
        1:   63:	G.numBuys = 2;
        1:   64:	G.supplyCount[1] = 2;
        1:   65:	G.coins = 20;
        1:   66:	p = buyCard(1, &G);
        1:   67:	assert (G.numBuys == 1);
        1:   68:	printf("Passed test 6\n");	
        -:   69:
        1:   70:	return 0;
        -:   71:}
Testing gainCrad...
Passed test 1
Passed test 2
File 'unittest4.c'
Lines executed:100.00% of 22
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************
        -:    2: * Unit Test for gainCard()
        -:    3: *****************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   17:	r = initializeGame(2, k, 1000, &G);
        -:   18:
        1:   19:	printf("Testing gainCrad...\n");
        -:   20:
        -:   21:	//assert return val of -1 for empty pile
        1:   22:	G.supplyCount[1] = 0;
        1:   23:	p = gainCard(1, &G, 1, 1);
        1:   24:	assert(p == -1);
        1:   25:	printf("Passed test 1\n");	
        -:   26:
        -:   27:	//Test all three values of toFlag
        4:   28:	for(i = 0; i < 3; i++) {
        3:   29:		G.supplyCount[1] = 1;
        3:   30:		G.handCount[1] = 2;
        3:   31:		G.discardCount[1] = 2;
        3:   32:		G.deckCount[1] = 20;
        3:   33:		p = gainCard(1, &G, i, 1);
        -:   34:			//Make sure supply decreases
        3:   35:		assert(G.supplyCount[1] == 0);
        3:   36:		if(i ==2) {
        1:   37:			assert (G.handCount[1] == 3);
        -:   38:		}
        2:   39:		else if(i == 1) {
        1:   40:			assert (G.deckCount[1] = 21);	
        -:   41:		}
        -:   42:		else { 
        1:   43:			assert(G.discardCount[1] = 3);
        -:   44:		}
        -:   45:	}
        1:   46:	printf("Passed test 2\n");
        -:   47:		
        1:   48:	return 0;	
        -:   49:}
Testing Smithy...
Passed test 1
Bug
File 'cardtest1.c'
Lines executed:100.00% of 12
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************
        -:    2: * Card Test for Smithy
        -:    3: ***********************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        1:   16:	int k[10] = {adventurer, smithy, great_hall, council_room, feast, gardens, mine, remodel, village, baron};
        -:   17:
        1:   18:	printf("Testing Smithy...\n");
        -:   19:
        1:   20:	r = initializeGame(2, k, 1000, &G); 
        -:   21:	//Make sure Smithy gets removed from hand
        1:   22:	G.handCount[1] = 5;
        1:   23:	p = playSmithy(&G, 1, 1);
        -:   24:	//Make sure hand increases to proper size
        1:   25:	assert (G.handCount[1] == 7);
        1:   26:	printf("Passed test 1\n");
        -:   27:		
        -:   28:	//Test when player has no actions
        1:   29:	G.numActions = 0;
        1:   30:	p = playSmithy(&G, 1, 1);
        1:   31:	printf("Bug\n");
        -:   32:
        1:   33:	return 0;
        -:   34:}
Testing getCost...
Passed test 1
Passed test 2
Passed test 3
File 'unittest1.c'
Lines executed:100.00% of 16
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*****************************
        -:    2: * Unit Test for getCost()
        -:    3: ****************************/
        -:    4:
        -:    5://There's no try/catch in C, so
        -:    6://I'm assuming input is integer
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
        2:   15:int main(){
        -:   16:	int i;
        2:   17:	int seed = 100;
        -:   18:	int p;
        -:   19:	struct gameState G;
        -:   20:	
        2:   21:	printf("Testing getCost...\n");
        -:   22:
        -:   23:	//test all values in cards enum against -1
       56:   24:	for( i = 0; i <= 26; i++){
       54:   25:		p = getCost(i);
       54:   26:		assert (p != -1);
        -:   27:	}
        2:   28:	printf("Passed test 1\n");
        -:   29:
        -:   30:	//Test out of bounds value
        2:   31:	i = 27;
        2:   32:	p = getCost(i);
        2:   33:	assert (p == -1);
        2:   34:	printf("Passed test 2\n");
        -:   35:
        2:   36:	i = -1;
        2:   37:	p = getCost(i);
        2:   38:	assert (p == -1);
        2:   39:	printf("Passed test 3\n");
        -:   40:
        2:   41:	return 0;
        -:   42:}
Testing isGameOver...
Passed test 1
Passed test 2!
Does not break on out-of-range player (Passed test3)
Passed test 4!
Passed test 5!
File 'unittest2.c'
Lines executed:100.00% of 30
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/********************************
        -:    2: * Unit Test for isGameOver()
        -:    3: * *****************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        2:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   17:
        2:   18:	printf("Testing isGameOver...\n");
        -:   19:
        2:   20:	r = initializeGame(2,k,1000,&G);
        -:   21:	//Test with all supplyCounts == 0
       56:   22:	for (i = 0; i <= 26; i++){
       54:   23:		G.supplyCount[i] = 0;
        -:   24:	}
        2:   25:	p = isGameOver(&G);
        2:   26:	assert (p == 1);
        2:   27:	printf("Passed test 1\n");
        -:   28:
        -:   29:	//Test that play proceeds under normal circumstances
       56:   30:	for (i = 0; i <= 26; i++){
       54:   31:		G.supplyCount[i] = 1;
        -:   32:	}
        2:   33:	p = isGameOver(&G);
        2:   34:	assert(p != 1);
        2:   35:	printf("Passed test 2!\n");
        -:   36:
        -:   37:	//Test for player out of range
        2:   38:	G.whoseTurn = 3;
        2:   39:	p = isGameOver(&G);
        2:   40:	printf("Does not break on out-of-range player (Passed test3)\n");
        -:   41:
        -:   42:	//Test for provinces empty
        2:   43:	G.supplyCount[province] = 0;
        2:   44:	p = isGameOver(&G);
        2:   45:	assert (p == 1);
        2:   46:	printf("Passed test 4!\n");
        -:   47:
        -:   48:	//Test for curse cards empty and two other cards
       56:   49:	for (i = 0; i <= 26; i++){
       54:   50:		G.supplyCount[i] = 1;
        -:   51:	}
        2:   52:	G.supplyCount[curse] = 0;
        2:   53:	G.supplyCount[adventurer] = 0;
        2:   54:	G.supplyCount[council_room] = 0;
        2:   55:	p = isGameOver(&G);
        2:   56:	assert(p == 1);
        2:   57:	printf("Passed test 5!\n");
        -:   58:
        2:   59:	return 0;
        -:   60:}
Testing buyCard...
Passed test 1
Passed test 2
Passed test 3
Passed test 4
Passed test 5
Passed test 6
File 'unittest3.c'
Lines executed:100.00% of 41
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/****************************
        -:    2: * Unit Test for buyCard()
        -:    3: ***************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        2:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   16:	int p, r;
        2:   17:	r = initializeGame(2, k, 1000, &G);	
        -:   18:	
        2:   19:	printf("Testing buyCard...\n");
        -:   20:
        -:   21:	//Test with numBuys ==0
        2:   22:	G.numBuys = 0;
        2:   23:	p = buyCard(1, &G);
        2:   24:	assert(p == -1);
        2:   25:	printf("Passed test 1\n");
        -:   26:
        -:   27:	//Test with supply pile empty
        2:   28:	G.numBuys = 1;
        2:   29:	G.supplyCount[1] = 0;
        2:   30:	p = buyCard(1, &G);
        2:   31:	assert(p == -1);
        2:   32:	printf("Passed test 2\n");
        -:   33:	
        -:   34:	//Test with not enough coins
        2:   35:	G.numBuys = 1;
        2:   36:	G.coins = 0;
        2:   37:	G.supplyCount[1] = 2;
        2:   38:	p=buyCard(1, &G);
        2:   39:	assert (p== -1);
        2:   40:	printf("Passed test 3\n");
        -:   41:	
        -:   42:	//Test with each player
        8:   43:	for (i = 0; i < 3; i ++) {
        6:   44:		G.whoseTurn = i;
        6:   45:		G.numBuys = 1;
        6:   46:		G.supplyCount[1] = 1;
        6:   47:		G.coins = 20;
        6:   48:		p = buyCard(1, &G);
        6:   49:		assert (p != -1);
        -:   50:	}
        2:   51:	printf("Passed test 4\n");
        -:   52:
        -:   53:	//Make sure coins decrease
        2:   54:	G.numBuys = 1;
        2:   55:	G.supplyCount[1] = 2;
        2:   56:	G.coins = 20;
        2:   57:	p = buyCard(1, &G);
        2:   58:	i = getCost(1);
        2:   59:	assert (G.coins == 18);
        2:   60:	printf("Passed test 5\n");
        -:   61:
        -:   62:	//Make sure buys decrease
        2:   63:	G.numBuys = 2;
        2:   64:	G.supplyCount[1] = 2;
        2:   65:	G.coins = 20;
        2:   66:	p = buyCard(1, &G);
        2:   67:	assert (G.numBuys == 1);
        2:   68:	printf("Passed test 6\n");	
        -:   69:
        2:   70:	return 0;
        -:   71:}
Testing gainCrad...
Passed test 1
Passed test 2
File 'unittest4.c'
Lines executed:100.00% of 22
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/******************************
        -:    2: * Unit Test for gainCard()
        -:    3: *****************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        2:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        2:   17:	r = initializeGame(2, k, 1000, &G);
        -:   18:
        2:   19:	printf("Testing gainCrad...\n");
        -:   20:
        -:   21:	//assert return val of -1 for empty pile
        2:   22:	G.supplyCount[1] = 0;
        2:   23:	p = gainCard(1, &G, 1, 1);
        2:   24:	assert(p == -1);
        2:   25:	printf("Passed test 1\n");	
        -:   26:
        -:   27:	//Test all three values of toFlag
        8:   28:	for(i = 0; i < 3; i++) {
        6:   29:		G.supplyCount[1] = 1;
        6:   30:		G.handCount[1] = 2;
        6:   31:		G.discardCount[1] = 2;
        6:   32:		G.deckCount[1] = 20;
        6:   33:		p = gainCard(1, &G, i, 1);
        -:   34:			//Make sure supply decreases
        6:   35:		assert(G.supplyCount[1] == 0);
        6:   36:		if(i ==2) {
        2:   37:			assert (G.handCount[1] == 3);
        -:   38:		}
        4:   39:		else if(i == 1) {
        2:   40:			assert (G.deckCount[1] = 21);	
        -:   41:		}
        -:   42:		else { 
        2:   43:			assert(G.discardCount[1] = 3);
        -:   44:		}
        -:   45:	}
        2:   46:	printf("Passed test 2\n");
        -:   47:		
        2:   48:	return 0;	
        -:   49:}
Testing Smithy...
Passed test 1
Bug
File 'cardtest1.c'
Lines executed:100.00% of 12
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/************************
        -:    2: * Card Test for Smithy
        -:    3: ***********************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        2:   16:	int k[10] = {adventurer, smithy, great_hall, council_room, feast, gardens, mine, remodel, village, baron};
        -:   17:
        2:   18:	printf("Testing Smithy...\n");
        -:   19:
        2:   20:	r = initializeGame(2, k, 1000, &G); 
        -:   21:	//Make sure Smithy gets removed from hand
        2:   22:	G.handCount[1] = 5;
        2:   23:	p = playSmithy(&G, 1, 1);
        -:   24:	//Make sure hand increases to proper size
        2:   25:	assert (G.handCount[1] == 7);
        2:   26:	printf("Passed test 1\n");
        -:   27:		
        -:   28:	//Test when player has no actions
        2:   29:	G.numActions = 0;
        2:   30:	p = playSmithy(&G, 1, 1);
        2:   31:	printf("Bug\n");
        -:   32:
        2:   33:	return 0;
        -:   34:}
Testing Adventurer...
Passed Test 1
Passed test 2
File 'cardtest2.c'
Lines executed:100.00% of 12
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/****************************
        -:    2: * Card Test for Adventurer
        -:    3: ***************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        2:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   17:
        2:   18:	r = initializeGame(2, k, 1000, &G);
        -:   19:	
        2:   20:	printf("Testing Adventurer...\n");
        -:   21:
        -:   22:	//Test when there's no treasure in deck
        2:   23:	G.deckCount[1] = 0;
        2:   24:	G.discardCount[1] = 0;
        -:   25://	p = playAdventurer(&G,1,1);
        -:   26://	assert(p == 0);
        2:   27:	printf("Passed Test 1\n");
        -:   28:		
        -:   29:	//Test when deck is empty
        2:   30:	G.deckCount[1] = 0;
       24:   31:	for ( i = 0; i < 11; i++){
       22:   32:		gainCard(2, &G, 0, 1);
        -:   33:	}
        -:   34://	p = playAdventurer(&G,1,1);
        -:   35://	assert(G.deckCount > 0);
        2:   36:	printf("Passed test 2\n");
        -:   37:	
        2:   38:	return 0;
        -:   39:}
Testing Remodel...
Bug: Cannot play with no cards in hand!
Bug: shouldn't be able to select empty pile
Passed test 3
File 'cardtest3.c'
Lines executed:100.00% of 15
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*************************
        -:    2: * Card Test for Remodel
        -:    3: ************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main(){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   17:
        1:   18:	r = initializeGame(2, k, 1000, &G);
        -:   19:	
        1:   20:	printf("Testing Remodel...\n");
        -:   21:	
        -:   22:	//Test with hand empty
        1:   23:	G.handCount[1] = 0;
        1:   24:	p = playRemodel(&G, 1, 1, 1, 2);
        1:   25:	printf("Bug: Cannot play with no cards in hand!\n");
        -:   26:	
        -:   27:	//Test with supply pile empty
        1:   28:	G.supplyCount[3] = 0;
        1:   29:	p = playRemodel(&G,1,1,1,3);
        1:   30:	assert(G.supplyCount[3] == 0);
        1:   31:	printf("Bug: shouldn't be able to select empty pile\n");
        -:   32:
        -:   33:	//Test with an expensive card (more than +2)
        1:   34:	p = playRemodel(&G,1,1,copper,province);
        1:   35:	assert(p == -1);
        1:   36:	printf("Passed test 3\n");
        -:   37:	
        1:   38:	return 0;	
        -:   39:}
Testing cutpurse...
Bug: coins don't increase
Bug:Player 2 hand count is incorrect
Bug: p2 hand size is incorrect
File 'cardtest4.c'
Lines executed:100.00% of 18
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*****************************
        -:    2: * Card Test for Cutpurse
        -:    3: ***************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main (){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   17:
        1:   18:	r = initializeGame(2, k, 1000, &G);
        -:   19:	
        1:   20:	printf("Testing cutpurse...\n");
        -:   21:
        -:   22:	//Test coins += 2
        1:   23:	G.coins = 2;
        1:   24:	p = playCutpurse(&G, 1, 1);
        -:   25:	//assert(G.coins == 4);
        1:   26:	printf("Bug: coins don't increase\n");	
        -:   27:
        -:   28:	//Test P1 hand - 1 when full of gold
        -:   29:	int golds[5];
        6:   30:	for (i = 0; i < 5; i++){
        5:   31:		golds[i] = gold;
        -:   32:	}
        1:   33:	memcpy(G.hand[2], golds, sizeof(int)*5);
        1:   34:	p = playCutpurse(&G,1,1);
        -:   35:	//assert(G.handCount[2] == 4);
        1:   36:	printf("Bug:Player 2 hand count is incorrect\n");
        -:   37:
        -:   38:
        -:   39:	//Test P1 hand == 5 when full of copper
        -:   40:	int coppers[5];
        6:   41:	for ( i = 0; i < 5; i++){
        5:   42:		coppers[i] = copper;
        -:   43:	}
        1:   44:	memcpy(G.hand[2], coppers, sizeof(int)*5);
        1:   45:	p = playCutpurse(&G,1,1);
        -:   46:	//assert(G.handCount[2] == 5);
        1:   47:	printf("Bug: p2 hand size is incorrect\n");
        -:   48:
        1:   49:	return 0;
        -:   50:}
