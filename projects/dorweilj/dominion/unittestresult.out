TESTING updateCoins():
All tests passed!
TESTING shuffle():
All tests passed!
TESTING initializeGame():
All tests passed!
TESTING buyCard():
All tests passed!
TESTING smithy_refact():
smithy card returned an incorrect handcount 8, should be 7
smithy card returned an incorrect handcount 3, should be 2
smithy card returned an incorrect handcount 3, should be 2
TESTING minion_refact():
other player handCound incorrect: 5	 should be:4
other player handCound incorrect: 5	 should be:4
other player handCound incorrect: 5	 should be:4
other player handCound incorrect: 5	 should be:4
other player handCound incorrect: 5	 should be:4
TESTING adventurer_refact():
fail! with value: 5 expected: 7
TESTING village_refact():
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
number of actions failed: -1, expected 3
File 'dominion.c'
Lines executed:35.98% of 567
Branches executed:34.70% of 415
Taken at least once:26.75% of 415
Calls executed:25.77% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:60
        -:    0:Programs:14
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 21198195 returned 100% blocks executed 100%
 21198195:    8:int compare(const void* a, const void* b) {
 21198195:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     3461:   10:    return 1;
 21194734:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
  5653932:   12:    return -1;
 15540802:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 704714 returned 100% blocks executed 94%
   704714:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   704714:   44:  SelectStream(1);
call    0 returned 100%
   704714:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
   704714:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   704714:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  7751854:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
 77518540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
 70471400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   704714:   73:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   74:    {
   701450:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     3264:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
     3264:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   704714:   87:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   88:    {
   701450:   89:      state->supplyCount[estate] = 8;
   701450:   90:      state->supplyCount[duchy] = 8;
   701450:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     3264:   95:      state->supplyCount[estate] = 12;
     3264:   96:      state->supplyCount[duchy] = 12;
     3264:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   704714:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   704714:  102:  state->supplyCount[silver] = 40;
   704714:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
 14798994:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
116277810:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
109230670:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  7047140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
  2818856:  115:		  if (numPlayers == 2){ 
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1402900:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     6528:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
  5637712:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  7047140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
102183530:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  2117406:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
  1412692:  140:      state->deckCount[i] = 0;
  5650768:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
  4238076:  143:	  state->deck[i][j] = estate;
  4238076:  144:	  state->deckCount[i]++;
        -:  145:	}
 11301536:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
  9888844:  148:	  state->deck[i][j] = copper;
  9888844:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  2117406:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
  1412692:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
  2117406:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
  1412692:  166:      state->handCount[i] = 0;
  1412692:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 19731992:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
 19027278:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   704714:  182:  state->outpostPlayed = 0;
   704714:  183:  state->phase = 0;
   704714:  184:  state->numActions = 1;
   704714:  185:  state->numBuys = 1;
   704714:  186:  state->playedCardCount = 0;
   704714:  187:  state->whoseTurn = 0;
   704714:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  4228284:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  3523570:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
   704714:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
   704714:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1412952 returned 100% blocks executed 100%
  1412952:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  1412952:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  1412952:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      118:  210:    return -1;
  1412834:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 16954447:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 14128779:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
 14128779:  216:    newDeck[newDeckPos] = state->deck[player][card];
 14128779:  217:    newDeckPos++;
 54415538:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
 40286759:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
 14128779:  221:    state->deckCount[player]--;
        -:  222:  }
 15541613:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 14128779:  224:    state->deck[player][i] = newDeck[i];
 14128779:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
  1412834:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 700000 returned 100% blocks executed 86%
   700000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
   700000:  280:  who = state->whoseTurn;
        -:  281:
   700000:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
   700000:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
   700000:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    74332:  293:    return -1;
        -:  294:  } else {
   625668:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
   625668:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
   625668:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
   625668:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
   625668:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 7356 returned 100% blocks executed 100%
     7356:  311:int numHandCards(struct gameState *state) {
     7356:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1325668 returned 100% blocks executed 100%
  1325668:  320:int supplyCount(int card, struct gameState *state) {
  1325668:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 9836 returned 100% blocks executed 100%
     9836:  346:int whoseTurn(struct gameState *state) {
     9836:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 3533666 returned 100% blocks executed 100%
  3533666:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  3533666:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      870:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       61:  538:    state->deckCount[player] = state->discardCount[player];
       61:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       61:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       61:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       61:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       61:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       61:  559:    if (deckCounter == 0)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       59:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  3533605:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  3533605:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  3533605:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  3533605:  576:    state->deckCount[player]--;
  3533605:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  3533607:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 2025668 returned 100% blocks executed 40%
  2025668:  583:int getCost(int cardNumber)
        -:  584:{
  2025668:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 10%
branch  8 taken 10%
branch  9 taken 10%
branch 10 taken 10%
branch 11 taken 10%
branch 12 taken 10%
branch 13 taken 10%
branch 14 taken 10%
branch 15 taken 10%
branch 16 taken 10%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
   198390:  602:      return 6;
        -:  603:    case council_room:
   200643:  604:      return 5;
        -:  605:    case feast:
   203090:  606:      return 4;
        -:  607:    case gardens:
   203004:  608:      return 4;
        -:  609:    case mine:
   200669:  610:      return 5;
        -:  611:    case remodel:
   203026:  612:      return 4;
        -:  613:    case smithy:
   202972:  614:      return 4;
        -:  615:    case village:
   205411:  616:      return 3;
        -:  617:    case baron:
   203001:  618:      return 4;
        -:  619:    case great_hall:
   205462:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurer_refact(currentPlayer, state);
call    0 never executed
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
call    0 never executed
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  710:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  719:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  790:
    #####:  791:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  792:	{
    #####:  793:	  return -1;
        -:  794:	}
        -:  795:
    #####:  796:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  797:
        -:  798:      //discard card from hand
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  800:
        -:  801:      //discard trashed card
    #####:  802:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  803:	{
    #####:  804:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  805:	    {
    #####:  806:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  807:	      break;
        -:  808:	    }
        -:  809:	}
        -:  810:
        -:  811:
    #####:  812:      return 0;
        -:  813:		
        -:  814:    case smithy:
    #####:  815:      smithy_refact(currentPlayer, handPos, state);
call    0 never executed
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case village:
    #####:  819:      village_refact(currentPlayer, handPos, state);
call    0 never executed
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case baron:
    #####:  823:      state->numBuys++;//Increase buys by 1!
    #####:  824:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  825:	int p = 0;//Iterator for hand!
    #####:  826:	int card_not_discarded = 1;//Flag for discard set!
    #####:  827:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  828:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  829:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  830:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  831:	    state->discardCount[currentPlayer]++;
    #####:  832:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  833:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  834:	    }
    #####:  835:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  836:	    state->handCount[currentPlayer]--;
    #####:  837:	    card_not_discarded = 0;//Exit the loop
        -:  838:	  }
    #####:  839:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  840:	    if(DEBUG) {
        -:  841:	      printf("No estate cards in your hand, invalid choice\n");
        -:  842:	      printf("Must gain an estate if there are any\n");
        -:  843:	    }
    #####:  844:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  846:	      state->supplyCount[estate]--;//Decrement estates
    #####:  847:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  848:		isGameOver(state);
call    0 never executed
        -:  849:	      }
        -:  850:	    }
    #####:  851:	    card_not_discarded = 0;//Exit the loop
        -:  852:	  }
        -:  853:			    
        -:  854:	  else{
    #####:  855:	    p++;//Next card
        -:  856:	  }
        -:  857:	}
        -:  858:      }
        -:  859:			    
        -:  860:      else{
    #####:  861:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  862:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  863:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  864:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  865:	    isGameOver(state);
call    0 never executed
        -:  866:	  }
        -:  867:	}
        -:  868:      }
        -:  869:	    
        -:  870:      
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case great_hall:
        -:  874:      //+1 Card
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:			
        -:  877:      //+1 Actions
    #####:  878:      state->numActions++;
        -:  879:			
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case minion:
    #####:  885:      minion_refact(choice1, choice2, state, handPos);
call    0 never executed
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  893:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  894:	}
    #####:  895:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
        -:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  905:	}
        -:  906:			
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  909:      return 0;
        -:  910:		
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
        -:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
        -:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
        -:  927:      }
        -:  928:	    
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
        -:  936:	  }
        -:  937:			    
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  939:	} 
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }    
        -:  947:		       
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
        -:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  956:	  state->coins += 2;
        -:  957:	}
        -:  958:		    
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  960:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  961:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
        -:  966:      }
        -:  967:	    
    #####:  968:      return 0;
        -:  969:		
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:	{
    #####:  975:	  return -1;				
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  986:	    {
    #####:  987:	      j++;
        -:  988:	    }
        -:  989:	}
    #####:  990:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  return -1;				
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG) 
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:			
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1007:	    }
        -: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1021:		  break;
        -: 1022:		}
        -: 1023:	    }
        -: 1024:	}			
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1048:			}	
    #####: 1049:		      break;
        -: 1050:		    }		
        -: 1051:		}
        -: 1052:					
        -: 1053:	    }
        -: 1054:				
        -: 1055:	}				
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:		
        -: 1063:    case embargo: 
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:			
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:			
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:			
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case outpost:
    #####: 1081:      outpost_refact(currentPlayer, handPos, state);
call    0 never executed
    #####: 1082:      return 0;
        -: 1083:
        -: 1084:    case salvager:
        -: 1085:      //+1 buy
    #####: 1086:      state->numBuys++;
        -: 1087:			
    #####: 1088:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
        -: 1090:	  //gain coins equal to trashed card
    #####: 1091:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1092:	  //trash card
    #####: 1093:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1094:	}
        -: 1095:			
        -: 1096:      //discard card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case sea_hag:
    #####: 1101:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1102:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1103:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1104:	  state->discardCount[i]++;
    #####: 1105:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1106:	}
        -: 1107:      }
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case treasure_map:
        -: 1111:      //search hand for another treasure_map
    #####: 1112:      index = -1;
    #####: 1113:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1116:	    {
    #####: 1117:	      index = i;
    #####: 1118:	      break;
        -: 1119:	    }
        -: 1120:	}
    #####: 1121:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //trash both treasure cards
    #####: 1124:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1125:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1126:
        -: 1127:	  //gain 4 Gold cards
    #####: 1128:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1129:	    {
    #####: 1130:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1131:	    }
        -: 1132:				
        -: 1133:	  //return success
    #####: 1134:	  return 1;
        -: 1135:	}
        -: 1136:			
        -: 1137:      //no second treasure_map found in hand
    #####: 1138:      return -1;
        -: 1139:    }
        -: 1140:	
    #####: 1141:  return -1;
        -: 1142:}
        -: 1143:
function discardCard called 8577 returned 100% blocks executed 89%
     8577: 1144:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1145:{
        -: 1146:	
        -: 1147:  //if card is not trashed, added to Played pile 
     8577: 1148:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1149:    {
        -: 1150:      //add card to played pile
     8577: 1151:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8577: 1152:      state->playedCardCount++;
        -: 1153:    }
        -: 1154:	
        -: 1155:  //set played card to -1
     8577: 1156:  state->hand[currentPlayer][handPos] = -1;
        -: 1157:	
        -: 1158:  //remove card from player's hand
     8577: 1159:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
     1469: 1162:      state->handCount[currentPlayer]--;
        -: 1163:    }
     7108: 1164:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1165:    {
        -: 1166:      //reduce number of cards in hand
    #####: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
        -: 1169:  else 	
        -: 1170:    {
        -: 1171:      //replace discarded card with last card in hand
     7108: 1172:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1173:      //set last card to -1
     7108: 1174:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1175:      //reduce number of cards in hand
     7108: 1176:      state->handCount[currentPlayer]--;
        -: 1177:    }
        -: 1178:	
     8577: 1179:  return 0;
        -: 1180:}
        -: 1181:
function gainCard called 625668 returned 100% blocks executed 70%
   625668: 1182:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1183:{
        -: 1184:  //Note: supplyPos is enum of choosen card
        -: 1185:	
        -: 1186:  //check if supply pile is empty (0) or card is not used in game (-1)
   625668: 1187:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1188:    {
    #####: 1189:      return -1;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //added card for [whoseTurn] current player:
        -: 1193:  // toFlag = 0 : add to discard
        -: 1194:  // toFlag = 1 : add to deck
        -: 1195:  // toFlag = 2 : add to hand
        -: 1196:
   625668: 1197:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1198:    {
    #####: 1199:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1200:      state->deckCount[player]++;
        -: 1201:    }
   625668: 1202:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1203:    {
    #####: 1204:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1205:      state->handCount[player]++;
        -: 1206:    }
        -: 1207:  else
        -: 1208:    {
   625668: 1209:      state->discard[player][ state->discardCount[player] ] = supplyPos;
   625668: 1210:      state->discardCount[player]++;
        -: 1211:    }
        -: 1212:	
        -: 1213:  //decrease number in supply pile
   625668: 1214:  state->supplyCount[supplyPos]--;
        -: 1215:	 
   625668: 1216:  return 0;
        -: 1217:}
        -: 1218:
function updateCoins called 709114 returned 100% blocks executed 100%
   709114: 1219:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1220:{
        -: 1221:  int i;
        -: 1222:	
        -: 1223:  //reset coin count
   709114: 1224:  state->coins = 0;
        -: 1225:
        -: 1226:  //add coins for each Treasure card in player's hand
  4245884: 1227:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1228:    {
  3536770: 1229:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1230:	{
  2823140: 1231:	  state->coins += 1;
        -: 1232:	}
   713630: 1233:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1234:	{
     4450: 1235:	  state->coins += 2;
        -: 1236:	}
   709180: 1237:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1238:	{
     4310: 1239:	  state->coins += 3;
        -: 1240:	}	
        -: 1241:    }	
        -: 1242:
        -: 1243:  //add bonus
   709114: 1244:  state->coins += bonus;
        -: 1245:
   709114: 1246:  return 0;
        -: 1247:}
        -: 1248:
function minion_refact called 2480 returned 100% blocks executed 73%
     2480: 1249:void minion_refact(int choice1, int choice2, struct gameState *state, int handPos){
        -: 1250:
        -: 1251:      int i;
        -: 1252:      int j;
     2480: 1253:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1254:      //+1 action
     2480: 1255:      state->numActions++;
        -: 1256:      
        -: 1257:      //discard card from hand
     2480: 1258:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1259:      
     2480: 1260:      if (choice1)    //+2 coins
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1261:  {
     1130: 1262:    state->coins = state->coins + 2;
        -: 1263:  }
        -: 1264:      
     1350: 1265:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1266:  {
        -: 1267:    //discard hand
     8706: 1268:    while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 82%
branch  2 taken 18% (fallthrough)
        -: 1269:      {
     6006: 1270:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1271:      }
        -: 1272:        
        -: 1273:    //draw 4
     6750: 1274:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1275:      {
     5400: 1276:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1277:      }
        -: 1278:        
        -: 1279:    //other players discard hand and redraw if hand size > 4
     5400: 1280:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1281:      {
     4050: 1282:        if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1283:    {
     2700: 1284:      if ( state->handCount[i] >> 4 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1285:        {
        -: 1286:          //discard hand
    #####: 1287:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1290:      }
        -: 1291:              
        -: 1292:          //draw 4
    #####: 1293:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1294:      {
    #####: 1295:        drawCard(i, state);
call    0 never executed
        -: 1296:      }
        -: 1297:        }
        -: 1298:    }
        -: 1299:      }
        -: 1300:        
        -: 1301:  }
        -: 1302:
     2480: 1303:}
        -: 1304:
function smithy_refact called 21 returned 100% blocks executed 100%
       21: 1305:void smithy_refact(int currentPlayer, int handPos, struct gameState *state){
        -: 1306:  int i;
        -: 1307:
        -: 1308:        //+3 Cards
      105: 1309:      for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1310:  {
       84: 1311:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1312:  }
        -: 1313:      
        -: 1314:      //discard card from hand
       21: 1315:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       21: 1316:}
        -: 1317:
function adventurer_refact called 700 returned 100% blocks executed 100%
      700: 1318:void adventurer_refact(int currentPlayer, struct gameState *state){
      700: 1319:  int drawntreasure = 0;
      700: 1320:  int z=0;
        -: 1321:  int temphand[MAX_HAND];
        -: 1322:  int cardDrawn;
        -: 1323:
     3942: 1324:      while(drawntreasure<2){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1325:
     2542: 1326:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       59: 1327:    shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1328:  }
        -: 1329:
     2542: 1330:  drawCard(currentPlayer, state);
call    0 returned 100%
     2542: 1331:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     2542: 1332:  if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1400: 1333:    drawntreasure++;
        -: 1334:  else{
     1142: 1335:    temphand[z]=cardDrawn;
     1142: 1336:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1142: 1337:    z++;
        -: 1338:  }
        -: 1339:      }
        -: 1340: 
     2542: 1341:      while(z-1>=0){
branch  0 taken 62%
branch  1 taken 38% (fallthrough)
     1142: 1342:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1142: 1343:  z=z-1;
        -: 1344:      }
        -: 1345:
      700: 1346:}
        -: 1347:
function village_refact called 70 returned 100% blocks executed 100%
       70: 1348:void village_refact(int currentPlayer, int handPos, struct gameState *state){
        -: 1349:  //+1 Card
       70: 1350:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1351:      
        -: 1352:  //+2 Actions
       70: 1353:  state->numActions = state->numActions - 2;
        -: 1354:      
        -: 1355:  //discard played card from hand
       70: 1356:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       70: 1357:}
        -: 1358:
function outpost_refact called 0 returned 0% blocks executed 0%
    #####: 1359:void outpost_refact(int currentPlayer, int handPos, struct gameState *state){
        -: 1360:  //set outpost flag
    #####: 1361:  state->outpostPlayed++;
        -: 1362:
        -: 1363:  //+1 card
    #####: 1364:  drawCard(currentPlayer, state); 
call    0 never executed
        -: 1365:
        -: 1366:  //discard card
    #####: 1367:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1368:    
    #####: 1369:}
        -: 1370://end of dominion.c
