**Random Tests**

-General process

Both random testers follow the same process.  First set the seed for the random number generator.  I'm using the Random function from the dominion rngs.c file.  Since the function returns a real from 0-1 I multiply it by some int.  Then create two game states.  One will store the original game state and the other is the one that we will use for testing.  The original state is useful for comparing later on. 

Initialize the game and then manually set random values into several of the game state attributes.  Many of the attributes can be set based off of some defined max value in dominion.h.  There are some constraints to setting random values that I ran into.  Setting a deck to 0 doesn't make much sense and causes the program to segfault since a deck of zero doesn't make much sense.

Once all the attributes are set and in logical ranges I compare the returned game state with the stored game state.


- Randomtestcard

This tests the smithy re-factored card.  The key things to test in this card are the number of cards in the players hand, the played card count, and the number of discarded cards.  Coverage of my random tester for this card reached 100% with all branches covered at least 20%.  This isn't a big change from my previous tests since it's a pretty easy card.  To check the proper game state I did have to do a lot of debugging and digging around in some of the helper functions like drawCard and discardCard.    

-Randomtestadventurer

This tests the adventurer re-factored card.  This was actually a pretty tricky test to create.  The bug I added to the code only ignores gold cards.  I assumed this wouldn't be too difficult to find but as I found out later the adventurer code will just continue looking through the deck until it find two treasure cards.  In order to find the bug that I created I needed to have a deck that contains only gold treasure cards otherwise the function will correctly return two additional treasures.  The solution to this problem is just to generate a random deck and the run lots of tests.  In my experience it takes as few as 100 tests and sometimes as many as 1000 tests to run into this condition.
Coverage for this test is 100% with all branches covered at least 6%.  The shuffle step is still only covered at 1%.  I think the only way to increase that would be to use a smaller deck size but I didn't test that condition. 