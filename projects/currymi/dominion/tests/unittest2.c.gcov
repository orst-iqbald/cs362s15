        -:    0:Source:unitTests/unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include <math.h>
        -:    5:
        -:    6:#include "rngs.h"
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:
        -:   10:
        -:   11:/* update coins unittest */
        -:   12:
        1:   13:int main (int argc, char** argv[]) {
        -:   14:
        1:   15:  int NUM_TESTS = 500;
        -:   16:  int numDraws;
        -:   17:  
        -:   18:  
        -:   19:
        -:   20:  int j, i, n, p, q, r, s, t;
        1:   21:  int goldCount, copperCount, silverCount = 0;
        1:   22:  int fails = 0;
        -:   23:  int bonus;
        -:   24:
        -:   25:
        -:   26:  struct gameState G;
        -:   27:  struct gameState post;
        -:   28:
        -:   29:    /*  Put a random number of cards in the players hand */
        -:   30:    /* Manually add up the number of treasure cards  */
        -:   31:    /* Call update coins function */
        -:   32:    /* Compare results */
        -:   33:
        -:   34:
      501:   35:    for (n = 0; n < NUM_TESTS; n++) {
 13150500:   36:        for (i = 0; i < sizeof(struct gameState); i++) {
 13150000:   37:          ((char*)&G)[i] = floor(Random() * 256);
        -:   38:        }
        -:   39:        //printf("Update Coin Test %d of %d \n", n, NUM_TESTS);
        -:   40:
      500:   41:        numDraws = floor(Random());
      500:   42:        p = floor(Random() * 4);
      500:   43:        G.deckCount[p] = floor(Random() * MAX_DECK);
      500:   44:        G.discardCount[p] = floor(Random() * MAX_DECK);
      500:   45:        G.handCount[p] = floor(Random() * MAX_HAND);
   121881:   46:        for(j = 0; j < G.handCount[p]; j++){
   121381:   47:            G.hand[p][j] = floor(Random() * 26);
        -:   48:        }
      500:   49:        G.coins = 0;
      500:   50:        bonus = floor(Random() * 10);
        -:   51:
      500:   52:        copperCount = 0;
      500:   53:        silverCount = 0;
      500:   54:        goldCount = 0;
        -:   55:
        -:   56:        /*
        -:   57:        printf("\tPlayer        = %d\n", p);
        -:   58:        printf("\tDeckcount     = %d\n", G.deckCount[p]);
        -:   59:        printf("\tDiscardCount  = %d\n", G.discardCount[p]);
        -:   60:        printf("\tHandCount     = %d\n", G.handCount[p]);
        -:   61:        printf("\tNumDraws      = %d\n", numDraws);
        -:   62:        */
        -:   63:
      500:   64:        memcpy((void *) &post, (void *) &G, sizeof(struct gameState));
        -:   65:        
   121881:   66:        for(q = 0; q < G.handCount[p]; q++){
   121381:   67:            if(G.hand[p][q] == copper){
     4704:   68:                copperCount++;
        -:   69:            }
   116677:   70:            else if(G.hand[p][q] == silver){
     4616:   71:                silverCount++;
        -:   72:            }
   112061:   73:            else if(G.hand[p][q] == gold){
     4775:   74:                goldCount++;
        -:   75:            }
        -:   76:        }
        -:   77:
        -:   78:        /* Number of treasure Cards */
        -:   79:        /*
        -:   80:        printf("\tCopper    = %d\n", copperCount);
        -:   81:        printf("\tSilver    = %d\n", silverCount);
        -:   82:        printf("\tGold      = %d\n", goldCount);
        -:   83:        printf("\tBonus     = %d\n", bonus);
        -:   84:        */
        -:   85:    
      500:   86:        post.coins += ((3 * goldCount) + (2 * silverCount) + copperCount + bonus);
        -:   87:
      500:   88:        updateCoins(p, &G, bonus);
        -:   89:        //printf("\t\tTotal Coins Expected = %d Recived = %d\n", post.coins, G.coins);
        -:   90:
        -:   91:        //printf("\t\t Test %d ------ ", i);
      500:   92:        if(post.coins != G.coins){
        -:   93:         //   printf("FAILED!\n");
      473:   94:            fails++;
        -:   95:        }
      500:   96:        if(post.coins == G.coins){
        -:   97:          //  printf("PASSED!\n");
        -:   98:        }
        -:   99:
        -:  100:        
        -:  101:    }       
        -:  102:
        1:  103:    printf("%d test failed out of %d!", fails, NUM_TESTS);
        -:  104:
        1:  105:  return 0;
        -:  106:}
        -:  107:
        -:  108:
