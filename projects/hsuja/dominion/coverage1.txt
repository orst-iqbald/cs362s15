Jason Hsu
hsuja@onid.oregonstate.edu
4/26/15
CS362-400
coverage1.txt

unittest1:

	This test had statement coverage of 1.65% and branch coverage of 2.78% for all of dominion.c. However, the test has 100% statement and 100% branch coverage for the function fullDeckCount(), which is the function being tested. This coverage suggests that over the span of all test cases at least one card was found in the deck, hand, and discard pile, and that at least one card was not found in the deck, hand, and discard pile. With regard to boundary coverage, there were test cases for when a single card of one type, multiple cards of one type, and no cards of one type were in the full deck. 

unittest2:
	
	This test had statement coverage of 5.55% and branch coverage of 12.53% for all of dominion.c. However, the test has 100% statement and 100% branch coverage for the function scoreFor(), which is the function being tested. This coverage suggests that each kind of victory card was found at least once in the hand, discard pile, and deck. While there isn't 100% path coverage, it is not necessary to thoroughly test this function. With regard to boundary coverage, there were test cases for negative score, a score of zero, and a postive score.

unittest3: 

	This test had statement coverage of 10.64% and branch coverage of 17.63% for all of dominion.c. However, the test has 100% statement and 100% branch coverage for the function getWinners(), which is the function being tested. This level of coverage suggests that the test cases thoroughly cover the range of preconditions for the function. Regarding boundary coverage, there were test cases for breaking ties and for not breaking ties. However, I overlooked testing for when the winner is the player at index 0 in the array and the player at the end of the array. Testing for those boundaries would yield greater confidence in the testing.

unittest4:

	This test had statement coverage of 13.04% and branch coverage of 19.03% for dominion.c as a whole. However, the test has 100% statement and 100% branch coverage for the function gainCard(), the function being tested. This suggests the test cases covered the major types of situations to be handled by this function, which would be sending a card to the deck, hand, and discard pile, and attempting to send a card that is not in the game.

cardtest1:

	This test had statement coverage of 22.49% and branch coverage of 25.99% for dominion.c as a whole. However, the test has 100% statement and 100% branch coverage for the function play_adventurer(), which is the function under test. play_adventurer() is the implementation of the adventurer card. This coverage implies that the test cases thoroughly cover the range of situations for this function. For instance, the empty deck case is covered and each type of treasure card is drawn at some point. 

cardtest2:

	This test had statement coverage of 23.09% and branch coverage of 26.45% for dominion.c as a whole. However, the test has 100% statement and 100% branch coverage for the function play_smithy(), the function under test. play_smithy() is the implementation of the smithy card. This function is very short and has only a single branch, so 100% branch and statement are easy to achieve as long as the function returns. 

cardtest3:

	This test had statement coverage of 25.94% and branch coverage of 28.31% for dominion.c as a whole. The test has 100% statement coverage and 100% branch coverage for the function play_great_hall, the function under test. play_great_hall() is the implementation of the great hall card. This function only has 2 branches, so achieving 100% branch coverage is not too difficult to achieve. The test cases cover the boundaries, as they would be values of handPos less than, equal to, or greater than 2 (due to the bug introduced).

cardtest4:

	This test had statement coverage of 26.54% and branch coverage of 28.31% for dominion.c as a whole. But the test has 100% statement coverage for the function play_village(), the function under test. play_village() is the implementation of the village card. Gcov does not indicate branch coverage because it indicates there are no branches for play_village(). There are no if-else statements, so as long as the function returns, there are no branches. The 100% statement coverage does not tell us much about the test cases. In terms of boundary coverage, 

