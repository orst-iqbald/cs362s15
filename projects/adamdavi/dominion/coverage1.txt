David Adams
CS 362
Spring 2015

Assignment 3

This part goes through each test individually and talks about the tests' coverage.
For this part, gcov was run like it is for the unittestresults.out script where
each test is tested incrementally and the gcov statistics that are ouptput
to the testing file, are statistics for the whole test suite as it is applied
unit test by unit test. Additionally, I have run gcov for each test separately
to get the coverage statistics for only that test by itself. I have included
both results within this writeup.

Immediately below is an explanation of what part of the dominion code is not
being covered adequately by the tests (ie. the answer to the last part of the
question in the prompt):

Within the dominion code, one of the main areas of the code that is not being
covered that would be good to cover in order to improve the test suite would
be the other card implementations within the cardEffect() function. Since 
this function is set up using a switch statement and each card is thus
essentially its own code entity, testing all of the cards would add a lot of
coverage to the test suite. Additionally, most of the cards use some of the
helper functions, so by testing the cards, it would also help test
the rest of the functions within the dominion code. Another big piece of code
that is not being adequately covered by the test suite that probably should be
is the initalizeGame function. This function is very important to the rest
of the code and it would definitely be good to have robust tests on this function
to make sure that the game is being initialized correctly. Additionally from
looking at the gcov file, the shuffle function is not adequately tested and this
is another area where the testing could be improved. Other than that, the way that
I wrote the tests was intentionally trying to make it so that the tests did not
depend on many other functions, so the tests that I wrote really only adequately
cover those functions being tested on. Therefore, it would be good to continue
checking the gcov file to make sure that the other remaining important functions
are tested well in order to increase the coverage for the test suite. This is
because after looking through the .gcov file for dominion, there are quite a few
functions that are never called from the tests. However, most of them are smaller
functions and are not the most important, it would be good to have them tested.

-------------------------------------------------------------------------------
unittest1.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:17.45% of 573
Branches executed:17.83% of 415
Taken at least once:14.70% of 415
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:17.28% of 573
Branches executed:17.83% of 415
Taken at least once:14.46% of 415
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the isGameOver() function within the dominion.c code. 
Within this test, the only calls being made within the dominion code are the
isGameOver function itself and the initializeGame function in order to set up
the pre conditions for testing. That is why the calls executed is only 7%. 
For this test, the statement and branch coverage were roughly 17% as well.
The isGameOver function itself does not make any function calls to outside
functions, so the testing for this function is not going to add a significant
amount of coverage to the test suite, which is shown in the numbers above.

-------------------------------------------------------------------------------
unittest2.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:17.80% of 573
Branches executed:17.35% of 415
Taken at least once:13.98% of 415
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:19.37% of 573
Branches executed:19.28% of 415
Taken at least once:15.66% of 415
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the discardCard() function within the dominion.c code.
Within this test, the only calls being made within the dominion code are the
discardCard() function and the initializeGame function, which is used to set
up a hand in order to get prior conditions to test against for the discardCard
function. This test is thus similiar to the previous unit test in that it
tests around 7% of the total function calls and has a statement and branch
coverage of about 17%. This is because the discardCard() function is about the
same amount of code as the isGameOver function. Also, the discardCard() function
does not make any function calls within its code, so the test is not indirectly
covering other functions. However, there was a huge bug found within this function
that is causing errors throughout a lot of other functions. Therefore, since this
function is a heavily relied upon one throuhgout the implementation of dominion,
it turns out to be an important function to test for.

-------------------------------------------------------------------------------
unittest3.c

Only this unit test gcov statistics:
Lines executed:18.32% of 573
Branches executed:17.35% of 415
Taken at least once:14.22% of 415
Calls executed:8.42% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:21.99% of 573
Branches executed:20.72% of 415
Taken at least once:17.11% of 415
Calls executed:8.42% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the gainCard() funcion within the dominion.c code.
Within this test, the only calls being made within the dominion code are the
gainCard function and the initializeGame function. This test tested around 8
percent of the total calls and had statement and branch coverage around 17 to 18
percent of the dominion code. This function had coverage that was a little bit
higher because the function itself calls the supplyCount() function, so that
function was indirectly being tested by this unit test. 

-------------------------------------------------------------------------------
unittest4.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:16.06% of 573
Branches executed:15.90% of 415
Taken at least once:13.25% of 415
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:22.34% of 573
Branches executed:20.72% of 415
Taken at least once:17.59% of 415
Calls executed:8.42% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the updateCoins() function within the dominion code.
The testing code itself utilizes the updateCoins function along with the
initialize game function from within the dominon code. The update coins function
as part of the dominion code does not utilize any additional function calls 
from within the code. Within this function, from the .gcov file after this
function was tested, the tests cover 100% of the block coverage and execute
100% of the function. However, within the entirity of the dominion code, this
function covers about 16% of the statement and branch total coverage. 

-------------------------------------------------------------------------------
cardtest1.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:20.42% of 573
Branches executed:18.80% of 415
Taken at least once:15.18% of 415
Calls executed:10.53% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:25.31% of 573
Branches executed:22.17% of 415
Taken at least once:19.04% of 415
Calls executed:11.58% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the Smithy Card implementation within the domininion code.
This card implementation was one of the ones that we created as a separate
function, so this is testing the function call that was created in the last
assignment. The Smithy function makes use of the drawCard() and the discardCard()
functions from within the function code, so these functions are implicitely being
counted in the coverage. Additionally, the unit test code explicitely uses the initializeGame function within the code to help set up the pre
test conditions. Due to this fact, this unit test has a slightly higher statement
coverage at 20% and also a higher calls executed coverage of 10%. 

-------------------------------------------------------------------------------
cardtest2.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:16.93% of 573
Branches executed:16.87% of 415
Taken at least once:13.49% of 415
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:26.53% of 573
Branches executed:23.13% of 415
Taken at least once:19.76% of 415
Calls executed:11.58% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the Adventurer card implementation, which was also one
of the cards that we previously had to pull out as a separate function, so this
test tests this stand alone function. The test itself uses the initializeGame
function from within the test code. The Adventurer card code implementation 
uses the shuffle function and the drawCard function within its code in the
dominion code. The coverage for this test is pretty low overall with the 
statement and branch code coverage for test both being rougly 17%. The 
calls executed for this test is also pretty low being at 7%.

-------------------------------------------------------------------------------
cardtest3.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:19.72% of 573
Branches executed:22.89% of 415
Taken at least once:13.98% of 415
Calls executed:10.53% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:28.62% of 573
Branches executed:28.67% of 415
Taken at least once:20.24% of 415
Calls executed:14.74% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the Great Hall card code implementation within the dominion
code, which was a card that I chose to test. Since this card was not one of the 
ones that was previously created as its own card function, this test uses
the cardEffect function from within dominion to test this card and then it 
passes the card into that function, so only the specific implemenation code for 
that card is actually run. Within the testing code the only function from dominion
that is being used is the initializeGame function. This card uses both the drawCard
and the discardCard function from within the dominion code. Due to the fact that
this card also uses the drawCard and the discardCard functions, this test has
decent code coverage. The statement coverage came out to be 20% and the branch 
coverage came out to be 23% with the calls being covered at around 10%. 

-------------------------------------------------------------------------------
cardtest4.c

Only this unit test gcov statistics:
File 'dominion.c'
Lines executed:19.72% of 573
Branches executed:22.89% of 415
Taken at least once:13.98% of 415
Calls executed:10.53% of 95
dominion.c:creating 'dominion.c.gcov'

Incremental gcov statistics (like what is done for unittestresults.out):
File 'dominion.c'
Lines executed:29.32% of 573
Branches executed:28.67% of 415
Taken at least once:20.48% of 415
Calls executed:16.84% of 95
dominion.c:creating 'dominion.c.gcov'

This unit test covers the Village card from within the dominion code source.
This card was also a card that I chose to test for and was not one of the ones
that was created as a standalone function, so this test uses the cardEffect
function from within dominion to call the card implementation code in order
to test it by passing in the card to the function. Like the previous unit test,
the testing code uses the initializeGame function and the actual code for the 
card utilizes the drawCard and discardCard functions. Therefore, the statement
and branch coverage for this unit test should be simliliar to the previous 
unit test. The statement coverage was about 20% and the branch coverage was about
23%, which is pretty decent for this test. 
