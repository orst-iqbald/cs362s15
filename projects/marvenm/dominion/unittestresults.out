Result for running dominion.c tests:
unittest1.c:
TESTING shuffle():
Test cycle 0, 2 players
Test player 0's deck is shuffled.
Test for correct action if deck has 0 cards.
Test player 1's deck is shuffled.
Test for correct action if deck has 0 cards.
Test cycle 1, 2 players
Test player 0's deck is shuffled.
Test for correct action if deck has 0 cards.
Test player 1's deck is shuffled.
Test for correct action if deck has 0 cards.
Test cycle 2, 2 players
Test player 0's deck is shuffled.
Test for correct action if deck has 0 cards.
Test player 1's deck is shuffled.
Test for correct action if deck has 0 cards.
Test cycle 3, 2 players
Test player 0's deck is shuffled.
Test for correct action if deck has 0 cards.
Test player 1's deck is shuffled.
Test for correct action if deck has 0 cards.
Test cycle 4, 2 players
Test player 0's deck is shuffled.
Test for correct action if deck has 0 cards.
Test player 1's deck is shuffled.
Test for correct action if deck has 0 cards.
All tests passed!
File 'dominion.c'
Lines executed:15.83% of 581
Branches executed:15.98% of 413
Taken at least once:13.56% of 413
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 17557 returned 100% blocks executed 100%
    17557:    8:int compare(const void* a, const void* b) {
    17557:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     8781:   10:    return 1;
     8776:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
     3959:   12:    return -1;
     4817:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       12:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 22 returned 100% blocks executed 100%
       22:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       22:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       22:  209:  if (state->deckCount[player] < 1)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
       10:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2557:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2533:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2533:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2533:  217:    newDeckPos++;
   213100:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   210567:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2533:  221:    state->deckCount[player]--;
        -:  222:  }
     2545:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2533:  224:    state->deck[player][i] = newDeck[i];
     2533:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 36%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        5:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 0 returned 0% blocks executed 0%
    #####:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
    #####:  667:        while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 never executed
branch  1 never executed
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
    #####:  672:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
    #####:  675:            if (cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    #####:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
    #####:  683:            while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
    #####:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 0 returned 0% blocks executed 0%
    #####:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
    #####:  693:        for (i = 0; i < 5; i++) {
branch  0 never executed
branch  1 never executed
    #####:  694:            drawCard(currentPlayer, state);
call    0 never executed
        -:  695:        }
        -:  696:        //discard card from hand
    #####:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
    #####:  770:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  771:    {
        -:  772:    case adventurer:
    #####:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 never executed
        -:  774:				state);
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
    #####:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:			
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 1 returned 100% blocks executed 80%
        1: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
        1: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
        6: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
        5: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
        4: 1340:	  state->coins += 1;
        -: 1341:	}
        1: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
        1: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
        1: 1353:  state->coins += bonus;
        -: 1354:
        1: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
unittest2.c:
TESTING isGameOver():
Test cycle 0
Test empty province supply.
G.supplyCount 10, 8, 8, 0, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
Test cycle 1
Test empty province supply.
G.supplyCount 10, 8, 8, 0, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
Test cycle 2
Test only 2 empty piles.
G.supplyCount 10, 8, 8, 8, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 
Test cycle 3
Test only 2 empty piles.
G.supplyCount 10, 8, 8, 8, 0, 40, 30, 10, 10, 10, 8, 0, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
Test cycle 4
Test 3 empty piles.
G.supplyCount 10, 8, 0, 8, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, 
Test cycle 5
Test empty province supply.
G.supplyCount 10, 8, 8, 0, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
Test cycle 6
Test empty province supply.
G.supplyCount 10, 8, 8, 0, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
Test cycle 7
Test only 2 empty piles.
G.supplyCount 10, 8, 8, 8, 46, 40, 30, 10, 10, 10, 0, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
Test cycle 8
Test only 2 empty piles.
G.supplyCount 10, 8, 8, 8, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 
Test cycle 9
Test empty province supply.
G.supplyCount 10, 8, 8, 0, 46, 40, 30, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
All tests passed!
File 'dominion.c'
Lines executed:17.56% of 581
Branches executed:17.92% of 413
Taken at least once:15.50% of 413
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 17857 returned 100% blocks executed 100%
    17857:    8:int compare(const void* a, const void* b) {
    17857:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
     8781:   10:    return 1;
     9076:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
     4039:   12:    return -1;
     5037:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 88%
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
call    0 returned 100%
       11:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      121:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1210:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       11:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       11:   89:      state->supplyCount[estate] = 8;
       11:   90:      state->supplyCount[duchy] = 8;
       11:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      231:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1815:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1705:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      132:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       22:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       22:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       88:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      110:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1595:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       33:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       22:  140:      state->deckCount[i] = 0;
       88:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       66:  143:	  state->deck[i][j] = estate;
       66:  144:	  state->deckCount[i]++;
        -:  145:	}
      176:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      154:  148:	  state->deck[i][j] = copper;
      154:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       33:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       22:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       33:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       22:  166:      state->handCount[i] = 0;
       22:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      308:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       66:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       11:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 42 returned 100% blocks executed 100%
       42:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       42:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       42:  209:  if (state->deckCount[player] < 1)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       10:  210:    return -1;
       32:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2797:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2733:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2733:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2733:  217:    newDeckPos++;
   213800:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211067:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2733:  221:    state->deckCount[player]--;
        -:  222:  }
     2765:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2733:  224:    state->deck[player][i] = newDeck[i];
     2733:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       32:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 55 returned 100% blocks executed 36%
       55:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
       55:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       55:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       55:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       55:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       55:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       55:  576:    state->deckCount[player]--;
       55:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       55:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 0 returned 0% blocks executed 0%
    #####:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
    #####:  667:        while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 never executed
branch  1 never executed
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
    #####:  672:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
    #####:  675:            if (cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    #####:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
    #####:  683:            while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
    #####:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 0 returned 0% blocks executed 0%
    #####:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
    #####:  693:        for (i = 0; i < 5; i++) {
branch  0 never executed
branch  1 never executed
    #####:  694:            drawCard(currentPlayer, state);
call    0 never executed
        -:  695:        }
        -:  696:        //discard card from hand
    #####:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
    #####:  770:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  771:    {
        -:  772:    case adventurer:
    #####:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 never executed
        -:  774:				state);
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
    #####:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:			
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 11 returned 100% blocks executed 80%
       11: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       11: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       66: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
       55: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       44: 1340:	  state->coins += 1;
        -: 1341:	}
       11: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       11: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       11: 1353:  state->coins += bonus;
        -: 1354:
       11: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
unittest3.c:
TESTING fullDeckCount():
Test cycle 0
Test deck count of all cards for player 0.
Player 0 deck count = 0, expected 10.
unittest3: unittest3.c:107 main: returnedCount != calculatedCount.
Test deck count of all cards for player 1.
Player 1 deck count = 0, expected 10.
unittest3: unittest3.c:107 main: returnedCount != calculatedCount.
All tests passed!
File 'dominion.c'
Lines executed:18.93% of 581
Branches executed:20.34% of 413
Taken at least once:17.19% of 413
Calls executed:7.37% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 17887 returned 100% blocks executed 100%
    17887:    8:int compare(const void* a, const void* b) {
    17887:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
     8781:   10:    return 1;
     9106:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     4047:   12:    return -1;
     5059:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 12 returned 100% blocks executed 88%
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
call    0 returned 100%
       12:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      144:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       24:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       24:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 44 returned 100% blocks executed 100%
       44:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       44:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       44:  209:  if (state->deckCount[player] < 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
       10:  210:    return -1;
       34:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2821:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2753:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2753:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2753:  217:    newDeckPos++;
   213870:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211117:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2753:  221:    state->deckCount[player]--;
        -:  222:  }
     2787:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2753:  224:    state->deck[player][i] = newDeck[i];
     2753:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       34:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 69%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 60 returned 100% blocks executed 36%
       60:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
       60:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       60:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       60:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       60:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  576:    state->deckCount[player]--;
       60:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       60:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 0 returned 0% blocks executed 0%
    #####:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
    #####:  667:        while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 never executed
branch  1 never executed
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
    #####:  672:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
    #####:  675:            if (cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    #####:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
    #####:  683:            while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
    #####:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 0 returned 0% blocks executed 0%
    #####:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
    #####:  693:        for (i = 0; i < 5; i++) {
branch  0 never executed
branch  1 never executed
    #####:  694:            drawCard(currentPlayer, state);
call    0 never executed
        -:  695:        }
        -:  696:        //discard card from hand
    #####:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
    #####:  770:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  771:    {
        -:  772:    case adventurer:
    #####:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 never executed
        -:  774:				state);
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
    #####:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:			
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 12 returned 100% blocks executed 80%
       12: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       12: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       72: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
       60: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       48: 1340:	  state->coins += 1;
        -: 1341:	}
       12: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       12: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       12: 1353:  state->coins += bonus;
        -: 1354:
       12: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
unittest4.c:
TESTING numHandCards():
Test cycle 0
Test number of hand cards for player 1.
Player 1 hand count = 71, expected 71.
Test cycle 1
Test number of hand cards for player 4.
Player 4 hand count = 373, expected 373.
Test cycle 2
Test number of hand cards for player 4.
Player 4 hand count = 407, expected 407.
Test cycle 3
Test number of hand cards for player 2.
Player 2 hand count = 89, expected 89.
Test cycle 4
Test number of hand cards for player 3.
Player 3 hand count = 423, expected 423.
All tests passed!
File 'dominion.c'
Lines executed:20.65% of 581
Branches executed:20.82% of 413
Taken at least once:18.16% of 413
Calls executed:8.42% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 18187 returned 100% blocks executed 100%
    18187:    8:int compare(const void* a, const void* b) {
    18187:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     8781:   10:    return 1;
     9406:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     4127:   12:    return -1;
     5279:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 17 returned 100% blocks executed 94%
       17:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       17:   44:  SelectStream(1);
call    0 returned 100%
       17:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       17:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       17:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      187:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1870:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       17:   73:  if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       17:   87:  if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       17:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       17:  102:  state->supplyCount[silver] = 40;
       17:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      357:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2805:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2635:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      204:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       34:  115:		  if (numPlayers == 2){ 
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
       24:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       10:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      136:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      170:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2465:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       61:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
       44:  140:      state->deckCount[i] = 0;
      176:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      132:  143:	  state->deck[i][j] = estate;
      132:  144:	  state->deckCount[i]++;
        -:  145:	}
      352:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      308:  148:	  state->deck[i][j] = copper;
      308:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       61:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
       44:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       61:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       44:  166:      state->handCount[i] = 0;
       44:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      476:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      459:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       17:  182:  state->outpostPlayed = 0;
       17:  183:  state->phase = 0;
       17:  184:  state->numActions = 1;
       17:  185:  state->numBuys = 1;
       17:  186:  state->playedCardCount = 0;
       17:  187:  state->whoseTurn = 0;
       17:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      102:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       85:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       17:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       17:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 64 returned 100% blocks executed 100%
       64:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       64:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       64:  209:  if (state->deckCount[player] < 1)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       10:  210:    return -1;
       54:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3061:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2953:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2953:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2953:  217:    newDeckPos++;
   214565:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211612:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2953:  221:    state->deckCount[player]--;
        -:  222:  }
     3007:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2953:  224:    state->deck[player][i] = newDeck[i];
     2953:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       54:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 69%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 85 returned 100% blocks executed 36%
       85:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
       85:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       85:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       85:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       85:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       85:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       85:  576:    state->deckCount[player]--;
       85:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       85:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 0 returned 0% blocks executed 0%
    #####:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
    #####:  667:        while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 never executed
branch  1 never executed
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
    #####:  672:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
    #####:  675:            if (cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    #####:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
    #####:  683:            while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
    #####:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 0 returned 0% blocks executed 0%
    #####:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
    #####:  693:        for (i = 0; i < 5; i++) {
branch  0 never executed
branch  1 never executed
    #####:  694:            drawCard(currentPlayer, state);
call    0 never executed
        -:  695:        }
        -:  696:        //discard card from hand
    #####:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
    #####:  770:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  771:    {
        -:  772:    case adventurer:
    #####:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 never executed
        -:  774:				state);
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
    #####:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:			
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 17 returned 100% blocks executed 80%
       17: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       17: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      102: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
       85: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       68: 1340:	  state->coins += 1;
        -: 1341:	}
       17: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       17: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       17: 1353:  state->coins += bonus;
        -: 1354:
       17: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest1.c:
TESTING mdmsmithycardplay():
Test cycle 0
Test that Smithy card adds 3 to hand.
Player 0 hand count = 9, expected 7.
cardtest1: cardtest1.c:78 main: G.handCount[player] != calculatedHandCount.
All tests passed!
File 'dominion.c'
Lines executed:25.13% of 581
Branches executed:28.33% of 413
Taken at least once:19.85% of 413
Calls executed:12.63% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 18217 returned 100% blocks executed 100%
    18217:    8:int compare(const void* a, const void* b) {
    18217:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     8781:   10:    return 1;
     9436:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     4135:   12:    return -1;
     5301:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 18 returned 100% blocks executed 94%
       18:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       18:   44:  SelectStream(1);
call    0 returned 100%
       18:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       18:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1980:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       18:   73:  if (numPlayers == 2)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:   74:    {
       13:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       18:   87:  if (numPlayers == 2)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:   88:    {
       13:   89:      state->supplyCount[estate] = 8;
       13:   90:      state->supplyCount[duchy] = 8;
       13:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       18:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  102:  state->supplyCount[silver] = 40;
       18:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2970:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2790:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      216:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       36:  115:		  if (numPlayers == 2){ 
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
       26:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       10:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      144:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      180:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2610:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       64:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
       46:  140:      state->deckCount[i] = 0;
      184:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      138:  143:	  state->deck[i][j] = estate;
      138:  144:	  state->deckCount[i]++;
        -:  145:	}
      368:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      322:  148:	  state->deck[i][j] = copper;
      322:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       64:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
       46:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       64:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       46:  166:      state->handCount[i] = 0;
       46:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      486:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       18:  182:  state->outpostPlayed = 0;
       18:  183:  state->phase = 0;
       18:  184:  state->numActions = 1;
       18:  185:  state->numBuys = 1;
       18:  186:  state->playedCardCount = 0;
       18:  187:  state->whoseTurn = 0;
       18:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       90:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       18:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       18:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 66 returned 100% blocks executed 100%
       66:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       66:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       66:  209:  if (state->deckCount[player] < 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       10:  210:    return -1;
       56:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3085:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2973:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2973:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2973:  217:    newDeckPos++;
   214635:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211662:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2973:  221:    state->deckCount[player]--;
        -:  222:  }
     3029:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2973:  224:    state->deck[player][i] = newDeck[i];
     2973:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       56:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 69%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 95 returned 100% blocks executed 36%
       95:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
       95:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       95:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       95:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       95:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       95:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       95:  576:    state->deckCount[player]--;
       95:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       95:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        1:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        1:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        1:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        1:  660:  int z = 0;// this is the counter for the temp hand
        1:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 0 returned 0% blocks executed 0%
    #####:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
    #####:  667:        while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 never executed
branch  1 never executed
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
    #####:  672:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
    #####:  675:            if (cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    #####:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
    #####:  683:            while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
    #####:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 1 returned 100% blocks executed 100%
        1:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
        6:  693:        for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  694:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:        }
        -:  696:        //discard card from hand
        1:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
        1:  770:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
    #####:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 never executed
        -:  774:				state);
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
        1:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 returned 100%
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:			
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 1 returned 100% blocks executed 75%
        1: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        1: 1257:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1258:    {
        -: 1259:      //add card to played pile
        1: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        1: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        1: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        1: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        1: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        1: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        1: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        1: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 18 returned 100% blocks executed 80%
       18: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       18: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      108: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
       90: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       72: 1340:	  state->coins += 1;
        -: 1341:	}
       18: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       18: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       18: 1353:  state->coins += bonus;
        -: 1354:
       18: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest2.c:
TESTING mdmadventurercardplay():
Test cycle 0
Test that Adventurer  card finds 2 gold treasure cards.
Player 0 top two cards = 6 & 6, expected 6 & 6.
All tests passed!
File 'dominion.c'
Lines executed:27.02% of 581
Branches executed:30.27% of 413
Taken at least once:21.31% of 413
Calls executed:14.74% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 18247 returned 100% blocks executed 100%
    18247:    8:int compare(const void* a, const void* b) {
    18247:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     8781:   10:    return 1;
     9466:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     4143:   12:    return -1;
     5323:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 19 returned 100% blocks executed 94%
       19:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       19:   44:  SelectStream(1);
call    0 returned 100%
       19:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       19:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       19:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      209:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2090:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       19:   73:  if (numPlayers == 2)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -:   74:    {
       14:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       19:   87:  if (numPlayers == 2)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -:   88:    {
       14:   89:      state->supplyCount[estate] = 8;
       14:   90:      state->supplyCount[duchy] = 8;
       14:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       19:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       19:  102:  state->supplyCount[silver] = 40;
       19:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      399:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3135:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2945:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      228:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       38:  115:		  if (numPlayers == 2){ 
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
       28:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       10:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      152:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      190:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2755:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       67:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
       48:  140:      state->deckCount[i] = 0;
      192:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      144:  143:	  state->deck[i][j] = estate;
      144:  144:	  state->deckCount[i]++;
        -:  145:	}
      384:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      336:  148:	  state->deck[i][j] = copper;
      336:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       67:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
       48:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       67:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       48:  166:      state->handCount[i] = 0;
       48:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      532:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      513:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       19:  182:  state->outpostPlayed = 0;
       19:  183:  state->phase = 0;
       19:  184:  state->numActions = 1;
       19:  185:  state->numBuys = 1;
       19:  186:  state->playedCardCount = 0;
       19:  187:  state->whoseTurn = 0;
       19:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      114:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       95:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       19:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       19:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 68 returned 100% blocks executed 100%
       68:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       68:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       68:  209:  if (state->deckCount[player] < 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       10:  210:    return -1;
       58:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3109:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2993:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2993:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2993:  217:    newDeckPos++;
   214705:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211712:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2993:  221:    state->deckCount[player]--;
        -:  222:  }
     3051:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2993:  224:    state->deck[player][i] = newDeck[i];
     2993:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       58:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 69%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 7 returned 100% blocks executed 100%
        7:  346:int whoseTurn(struct gameState *state) {
        7:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 102 returned 100% blocks executed 36%
      102:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
      102:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      102:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
      102:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      102:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      102:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      102:  576:    state->deckCount[player]--;
      102:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      102:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 2 returned 100% blocks executed 3%
        2:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        2:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        2:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        2:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        2:  660:  int z = 0;// this is the counter for the temp hand
        2:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 1 returned 100% blocks executed 75%
        1:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
        4:  667:        while (drawntreasure < 2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
        2:  672:            drawCard(currentPlayer, state);
call    0 returned 100%
        2:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
        2:  675:            if (cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
        2:  683:            while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
        1:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 1 returned 100% blocks executed 100%
        1:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
        6:  693:        for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  694:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:        }
        -:  696:        //discard card from hand
        1:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
        2:  770:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
        1:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 returned 100%
        -:  774:				state);
        1:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
        1:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 returned 100%
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:			
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 1 returned 100% blocks executed 75%
        1: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        1: 1257:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1258:    {
        -: 1259:      //add card to played pile
        1: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        1: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        1: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        1: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        1: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        1: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        1: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        1: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 19 returned 100% blocks executed 80%
       19: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       19: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      114: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
       95: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       76: 1340:	  state->coins += 1;
        -: 1341:	}
       19: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       19: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       19: 1353:  state->coins += bonus;
        -: 1354:
       19: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest3.c:
TESTING village card:
Test cycle 0
Test that Village card adds 1 card to hand.
Player 0 hand count = 5, expected 5.
Test that Village card adds 2 actions.
Player 0 action count = 3, expected 3.
All tests passed!
File 'dominion.c'
Lines executed:27.71% of 581
Branches executed:30.27% of 413
Taken at least once:21.55% of 413
Calls executed:16.84% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 18277 returned 100% blocks executed 100%
    18277:    8:int compare(const void* a, const void* b) {
    18277:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     8781:   10:    return 1;
     9496:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     4151:   12:    return -1;
     5345:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20 returned 100% blocks executed 94%
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       20:   44:  SelectStream(1);
call    0 returned 100%
       20:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       20:   73:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   74:    {
       15:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       20:   87:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   88:    {
       15:   89:      state->supplyCount[estate] = 8;
       15:   90:      state->supplyCount[duchy] = 8;
       15:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       20:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:  state->supplyCount[silver] = 40;
       20:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3100:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       40:  115:		  if (numPlayers == 2){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       30:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       10:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      160:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      200:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       70:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:    {
       50:  140:      state->deckCount[i] = 0;
      200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      150:  143:	  state->deck[i][j] = estate;
      150:  144:	  state->deckCount[i]++;
        -:  145:	}
      400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      350:  148:	  state->deck[i][j] = copper;
      350:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       70:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:    {
       50:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       70:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       50:  166:      state->handCount[i] = 0;
       50:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      540:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       20:  182:  state->outpostPlayed = 0;
       20:  183:  state->phase = 0;
       20:  184:  state->numActions = 1;
       20:  185:  state->numBuys = 1;
       20:  186:  state->playedCardCount = 0;
       20:  187:  state->whoseTurn = 0;
       20:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       20:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       20:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 70 returned 100% blocks executed 100%
       70:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       70:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       70:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       10:  210:    return -1;
       60:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3133:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     3013:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3013:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3013:  217:    newDeckPos++;
   214775:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211762:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3013:  221:    state->deckCount[player]--;
        -:  222:  }
     3073:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     3013:  224:    state->deck[player][i] = newDeck[i];
     3013:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       60:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 69%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 108 returned 100% blocks executed 36%
      108:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
      108:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      108:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
      108:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      108:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      108:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      108:  576:    state->deckCount[player]--;
      108:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      108:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 3 returned 100% blocks executed 5%
        3:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        3:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        3:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        3:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        3:  660:  int z = 0;// this is the counter for the temp hand
        3:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 1 returned 100% blocks executed 75%
        1:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
        4:  667:        while (drawntreasure < 2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
        2:  672:            drawCard(currentPlayer, state);
call    0 returned 100%
        2:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
        2:  675:            if (cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
        2:  683:            while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
        1:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 1 returned 100% blocks executed 100%
        1:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
        6:  693:        for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  694:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:        }
        -:  696:        //discard card from hand
        1:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
        3:  770:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
        1:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 returned 100%
        -:  774:				state);
        1:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
        1:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 returned 100%
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
        1:  925:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  926:			
        -:  927:      //+2 Actions
        1:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
        1:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 2 returned 100% blocks executed 75%
        2: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        2: 1257:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1258:    {
        -: 1259:      //add card to played pile
        2: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        2: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        2: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        2: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        2: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        2: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        2: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        2: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 20 returned 100% blocks executed 80%
       20: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       20: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      120: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
      100: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       80: 1340:	  state->coins += 1;
        -: 1341:	}
       20: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       20: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       20: 1353:  state->coins += bonus;
        -: 1354:
       20: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest4.c:
TESTING salvager card:
Test cycle 0
Test that Salvager card adds 1 buy.
Player 0 buy count = 2, expected 2.
Test that coins are increased by the cost of gold (6).
Player 0 coin count = 10, expected 10.
Test that choice card is trashed and not discarded.
Player 0 played card count = 1, should not be 2.
Test that Salvager card was discarded properly.
Player 0 top discard = 24, expected 24.
All tests passed!
File 'dominion.c'
Lines executed:29.78% of 581
Branches executed:37.53% of 413
Taken at least once:22.52% of 413
Calls executed:22.11% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 18307 returned 100% blocks executed 100%
    18307:    8:int compare(const void* a, const void* b) {
    18307:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     8781:   10:    return 1;
     9526:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     4159:   12:    return -1;
     5367:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 21 returned 100% blocks executed 94%
       21:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       21:   44:  SelectStream(1);
call    0 returned 100%
       21:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       21:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       21:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      231:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2310:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       21:   73:  if (numPlayers == 2)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -:   74:    {
       16:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       21:   87:  if (numPlayers == 2)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -:   88:    {
       16:   89:      state->supplyCount[estate] = 8;
       16:   90:      state->supplyCount[duchy] = 8;
       16:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       21:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       21:  102:  state->supplyCount[silver] = 40;
       21:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      441:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3465:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3255:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      252:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       42:  115:		  if (numPlayers == 2){ 
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
       32:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       10:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      168:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      210:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3045:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       73:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:    {
       52:  140:      state->deckCount[i] = 0;
      208:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      156:  143:	  state->deck[i][j] = estate;
      156:  144:	  state->deckCount[i]++;
        -:  145:	}
      416:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      364:  148:	  state->deck[i][j] = copper;
      364:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       73:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:    {
       52:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       73:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       52:  166:      state->handCount[i] = 0;
       52:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      588:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      567:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       21:  182:  state->outpostPlayed = 0;
       21:  183:  state->phase = 0;
       21:  184:  state->numActions = 1;
       21:  185:  state->numBuys = 1;
       21:  186:  state->playedCardCount = 0;
       21:  187:  state->whoseTurn = 0;
       21:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      126:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      105:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       21:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       21:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 72 returned 100% blocks executed 100%
       72:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       72:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       72:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       10:  210:    return -1;
       62:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3157:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     3033:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3033:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3033:  217:    newDeckPos++;
   214845:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   211812:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3033:  221:    state->deckCount[player]--;
        -:  222:  }
     3095:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     3033:  224:    state->deck[player][i] = newDeck[i];
     3033:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       62:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 1 returned 100% blocks executed 100%
        1:  315:int handCard(int handPos, struct gameState *state) {
        1:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 69%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 10 returned 100% blocks executed 100%
       10:  346:int whoseTurn(struct gameState *state) {
       10:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 113 returned 100% blocks executed 36%
      113:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
      113:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      113:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
      113:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      113:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      113:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      113:  576:    state->deckCount[player]--;
      113:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      113:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 1 returned 100% blocks executed 10%
        1:  583:int getCost(int cardNumber)
        -:  584:{
        1:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 7%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
function mdmadventurercardplay.4459 called 1 returned 100% blocks executed 75%
        1:  665:  void mdmadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
        -:  666:    int temphand[MAX_HAND], int z, struct gameState* state) {
        4:  667:        while (drawntreasure < 2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  668:            if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  669:                //if the deck is empty we need to shuffle discard and add to deck
    #####:  670:                shuffle(currentPlayer, state);
call    0 never executed
        -:  671:            }
        2:  672:            drawCard(currentPlayer, state);
call    0 returned 100%
        2:  673:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  674:                    - 1]; //top card of hand is most recently drawn card.
        2:  675:            if (cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  676:                drawntreasure++;
        -:  677:            else {
    #####:  678:                temphand[z] = cardDrawn;
    #####:  679:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:                z++;
        -:  681:            }
        -:  682:            }
        2:  683:            while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  684:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  685:                        temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  686:                z = z - 1;
        -:  687:        }
        1:  688:    }
        -:  689:    
function mdmsmithycardplay.4471 called 1 returned 100% blocks executed 100%
        1:  690:  void mdmsmithycardplay(int i, int currentPlayer, int handPos,
        -:  691:		struct gameState* state) {
        -:  692:        //+3 Cards
        6:  693:        for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  694:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:        }
        -:  696:        //discard card from hand
        1:  697:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  698:    }
        -:  699:    
function mdmgreathallcardplay.4479 called 0 returned 0% blocks executed 0%
    #####:  700:  void mdmgreathallcardplay(int currentPlayer, int handPos, 
        -:  701:		struct gameState* state) {
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:            
        -:  705:        //+1 Actions
    #####:  706:        state->coins++;
        -:  707:            
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  710:    }
        -:  711:  
function mdmstewardcardplay.4487 called 0 returned 0% blocks executed 0%
    #####:  712:  void mdmstewardcardplay(int currentPlayer, int handPos, struct gameState* state, 
        -:  713:		int choice1, int choice2, int choice3) {
    #####:  714:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:        {
        -:  716:          //+2 cards
    #####:  717:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  718:          drawCard(currentPlayer, state);
call    0 never executed
        -:  719:        }
    #####:  720:          else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  721:        {
        -:  722:          //+2 coins
    #####:  723:          state->coins = state->coins + 2;
        -:  724:        }
        -:  725:          else
        -:  726:        {
        -:  727:          //trash 2 cards in hand
    #####:  728:          discardCard(choice2, currentPlayer, state, 0);
call    0 never executed
    #####:  729:          discardCard(choice3, currentPlayer, state, 0);
call    0 never executed
        -:  730:        }
        -:  731:                
        -:  732:          //discard card from hand
    #####:  733:          discardCard(handPos, currentPlayer, state, 0);	
call    0 never executed
    #####:  734:    }
        -:  735:
function mdmcutpursecardplay.4495 called 0 returned 0% blocks executed 0%
    #####:  736:  void mdmcutpursecardplay(int i, int j, int k, int currentPlayer, int handPos,
        -:  737:		struct gameState* state) {
    #####:  738:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  744:		{
    #####:  745:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  746:		    {
    #####:  747:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  748:		      break;
        -:  749:		    }
    #####:  750:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  751:		    {
    #####:  752:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:			  if (DEBUG)
        -:  755:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  756:			}	
    #####:  757:		      break;
        -:  758:		    }		
        -:  759:		}
        -:  760:					
        -:  761:	    }
        -:  762:				
        -:  763:	}				
        -:  764:
        -:  765:      //discard played card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  767:}
        -:  768:
        -:  769:  //uses switch to select card and perform actions
        4:  770:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 25%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
        1:  773:      mdmadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
call    0 returned 100%
        -:  774:				state);
        1:  775:      return 0;
        -:  776:			
        -:  777:    case council_room:
        -:  778:      //+4 Cards
    #####:  779:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	}
        -:  783:			
        -:  784:      //+1 Buy
    #####:  785:      state->numBuys++;
        -:  786:			
        -:  787:      //Each other player draws a card
    #####:  788:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	{
    #####:  790:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  791:	    {
    #####:  792:	      drawCard(i, state);
call    0 never executed
        -:  793:	    }
        -:  794:	}
        -:  795:			
        -:  796:      //put played card in played card pile
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:			
    #####:  799:      return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case smithy:
        -:  919:      //+3 Cards
        1:  920:		mdmsmithycardplay(i, currentPlayer, handPos, state);
call    0 returned 100%
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        -:  924:      //+1 Card
        1:  925:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  926:			
        -:  927:      //+2 Actions
        1:  928:      state->numActions = state->numActions + 2;
        -:  929:			
        -:  930:      //discard played card from hand
        1:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card; +1 Actions
    #####:  987:	    mdmgreathallcardplay(currentPlayer, handPos, state);
call    0 never executed
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:			
    #####:  997:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
    #####: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      mdmstewardcardplay(currentPlayer, handPos, state, choice1, choice2, choice3);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
    #####: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:    
    #####: 1164:        mdmcutpursecardplay(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
        1: 1195:      state->numBuys++;
        -: 1196:			
        1: 1197:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
        1: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1201:	  //trash card
        1: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
        1: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 4 returned 100% blocks executed 75%
        4: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        4: 1257:  if (trashFlag < 1)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1258:    {
        -: 1259:      //add card to played pile
        3: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        4: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        4: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        4: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        4: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        4: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        4: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        4: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 21 returned 100% blocks executed 80%
       21: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       21: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      126: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
      105: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
       84: 1340:	  state->coins += 1;
        -: 1341:	}
       21: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
       21: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       21: 1353:  state->coins += bonus;
        -: 1354:
       21: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
