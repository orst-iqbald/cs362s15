David Adams
CS 362
Spring 2015
Quiz 2

Writeup for Quiz 2: how random tester works

For the first part of the if statements, that are only testing what the
character 'c' is, you have to eventually get each one of those characters
in the order they are presented. Since the state variable starts at 0
and then moves incrementally up towards 9 as each character is hit,
that is what makes it so that you must get each of those characters
in that order. Then, once state hits 9, the loop will keep going and
the state will not change. Therefore, the loop will run at a minimum
times the amount it takes to randomly get all of the c characters
in the order needed so that the state variable will get to 9. 

Then, for the last if statement that controls whether the error message
is reached and the program exits, the random word or string in this case
has to be equal to "reset\0" in order for the program to exit. This would
mean that the program must first encounter all of the random c characters
in the order required and then after the state is incrememented to 9, the
program will finally exit once the random string is set to "reset". Only
once all of these conditions have been met will the program exit and
hit the error message. 

In the case of my implementation, for the inputChar() function  it takes 
all of the possible characters for c and then randomly returns one of 
those characters. For the inputString() function, it takes the test 
case word "reset" and then it builds a scrambled word by randomly assigning
a character in the word to one of the characters from the word reset. For 
instance, on the first iteration it generates a random number and then
users that random number to pick from either r - e - s - e - t and then
it makes whatever is chosen the first letter of the word. Then it continues
until a word is built. The word can be any combination of the letters r, s, t.
When the word turns out to be reset and the state is set to 9, then the
program will stop and the error message will show. 

For this implementation of the tester, you have to tame the tester because
if it was picking from any character or creating any word it statistically
would take too long to find the test case that causes the error. Therefore, 
in this example we are taming the tester by only picking the characters that are
being tested for. Additionally, we are only creating 5 letter string that are
made up of a combination of r, s, and t. This still tests a large number of
test cases, however it is tamed quite a bit.
