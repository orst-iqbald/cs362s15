Rory Bresnahan
bresnhr@onid.oregonstate.edu
CS362
Assignment 4 randomhistory.txt

************************************
randomtestcard
//tests sithy card with random tests
************************************

Testing smithy card
Random tests
Tests ran 2000 times, failed 2000 time(s)
File 'dominion.c'
Lines executed:6.62% of 589
Branches executed:7.88% of 419
Taken at least once:2.15% of 419
Calls executed:4.08% of 98

function newSmithy called 2000 returned 100% blocks executed 100%

All branches were executed, all lines were executed
The for loop drawing a card 4 times (3 originally, but 4th time was implemented earlier as a bug)
was taken:
branch  0 taken 80%
branch  1 taken 20% (fallthrough)

Comparing lines and branches within the newSmithy function, 
my two tests (randomtestcard.c and cardtest1.c) had exactly the same coverage, including branch percentages and both tests failed/ encountered the bug.
*As explained in my conlcusion below, the non-random card test had an overall higher percentage of coverage because I did not use initializeGame() in the random test. 
cardtest1.c had 18% lines executed, 17% branches executed, 14% taken at least once and 10% calls executed.

*****************************************
randomtestadventurer.c
//tests adventurer card with random tests
*****************************************

Testing adventurer card
Random tests
Tests ran 2000 times, failed 2000 time(s)
File 'dominion.c'
Lines executed:13.41% of 589
Branches executed:13.60% of 419
Taken at least once:7.64% of 419
Calls executed:9.18% of 98

function newAdventurer called 2000 returned 100% blocks executed 93%

My random test of the adventurer had more (block) branch coverage compared to the cardtest2.c, which
had 67%
Both tests never executed the call to shuffle if the current player's deck count was less than 1
In my random test the code's branch coverage of: if (cardDrawn == copper || cardDrawn == silver || cardDrawn != gold)
Was covered much more effectively, returning:
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 96% (fallthrough)
branch  5 taken 4%
Whereas in cardtest2.c only branch 1 was taken (100%).
The random tests also improved on line coverage because of the improved coverage across testing copper, silver and gold cards.
cardtest2.c never executed the else in this if statement, therefore it did not execute an additional 5 lines.
This random test successfully failed.  It has a bug "cardDrawn != gold" which should be "cardDrwan == gold".
By the random testing taking the different branches it was able to find the bug, where cardtest2.c passed all tests.
*As explained in my conlcusion below, the non-random card test had an overall higher percentage of coverage because I did not use initializeGame() in the random test.
cardtest2.c had 22% of lines executed, 21% branches executed, 17% taken at least once and 15% calls executed.

**********
Conclusion
**********
Looking at the coverage for the dominion.c code, the random tests had less overall coverage compared to cardtest1 and cardtest2, although this was expected
because I implemented the random tests differently than the non-random tests.  In my original card tests I called initializeGame(), which uses 150+ lines of code
and calls shuffle as well.  In the random tests I created the game state with random bytes, then chose random values for all of the game state variables
important to the card's functions.  I populated the hand, deck, discard pile, played cards etc. using random methods and called the smithy card.
Instead, if I were to use initializeGame() somehow with the random tests I could expect to see improved test coverage.
Just looking at the adventurer card line coverage, 13% is about 76 lines of code.  Adding another 150 lines would result in almost 38% line coverage.
Aside from that, although the smithy test had equal coverage for both tests, the adventure random test was much more effective, covering 5 lines not executed in cardtest2.c,
and executing each branch of an important section of the card's function, checking if the card is a treasure card, successfully finding the bug when the non-random test didn't.
Also in my random tests I created 2000 different game states while running the program just once.  Card test only had one game initialized and tested.
Random testing has proved to be a better testing practice in this case.  
 

