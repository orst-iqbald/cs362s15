        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2:* a unit test for getCost() in dominion.c
        -:    3:* Include the following lines in your makefile:
        -:    4:*
        -:    5:* unittest1: unittest1.c dominion.o rngs.o
        -:    6:*      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    7:* -----------------------------------------------------------------------
        -:    8:*/
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:
        -:   20://number of cards to check
        -:   21:const int amount= 27;
        -:   22:
        -:   23://  if number of chards changed please updat test
        -:   24:
        -:   25://will hold the cards name and value
        -:   26:struct cardandvalue
        -:   27:{
        -:   28:    char* cardName[amount];
        -:   29:    int functionValue[amount];
        -:   30:    int realValue[amount];
        -:   31:};
        -:   32:
        -:   33:
function main called 1 returned 100% blocks executed 88%
        -:   34:int main() {
        -:   35:    
        -:   36:    // check to see if amount is correct if not this is invaild test and is no longer valid
        -:   37:    assert(amount == 27);
        -:   38:    
        -:   39:    
        1:   40:    int functionCost[amount] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};
        1:   41:    int actualCost[amount]= {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        1:   42:    char* name[amount] = {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", "feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward", "tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   43:    
        -:   44:    struct cardandvalue check;
        -:   45:    
        -:   46:    int i;
       56:   47:    for (i = 0; i < amount; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   48:    {
       27:   49:        check.cardName[i] = name[i];
       27:   50:        check.functionValue[i] = functionCost[i];
       27:   51:        check.realValue[i] = actualCost[i];
       27:   52:    }
        -:   53:    
        -:   54:    #if (NOISY_TEST == 1)
        1:   55:        printf ("TESTING updateCoins():\n");
        -:   56:    #endif
        -:   57:    
        1:   58:    int numbFailed=0;
        1:   59:    int numbPassed=0;
        -:   60:    
       56:   61:    for (i = 0; i < amount; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   62:    {
       27:   63:        if ( check.realValue[i] == getCost(check.functionValue[i]) )
branch  0 taken 100%
branch  1 taken 0%
        -:   64:        {
        -:   65:           
       27:   66:                numbPassed++;
        -:   67:             #if (NOISY_TEST == 1)
       27:   68:                printf("the value of %s PASSED \n", check.cardName[i]);
        -:   69:            #endif
       27:   70:        }
        -:   71:        else
        -:   72:        {
        -:   73:            
    #####:   74:                numbFailed++;
        -:   75:            #if (NOISY_TEST == 1)
    #####:   76:                printf("the value of %s Failed \n", check.cardName[i]);
        -:   77:            #endif
        -:   78:            
        -:   79:        }
       27:   80:    }
        -:   81:
        -:   82:    #if (NOISY_TEST == 1)
        1:   83:        printf("%i cards where of the wrong value\n", numbFailed);
        1:   84:        printf("%i cards where of the correct vale\n", numbPassed);
        -:   85:    #endif
        -:   86:    
        1:   87:    if( numbPassed == amount)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        -:   89:            #if (NOISY_TEST == 1)
        1:   90:                printf("All tests passed!\n");
        -:   91:            #endif
        1:   92:    }
        -:   93:    else
        -:   94:    {
        -:   95:        #if (NOISY_TEST == 1)
    #####:   96:            printf("Not all test failed see above which cards hard incorrect value\n");
        -:   97:        #endif
    #####:   98:        return -1;
        -:   99:        
        -:  100:    }
        -:  101:    
        1:  102:    return 0;
        1:  103:}
