Group Members:
Justin Hammar
Michael Camilleri
Dustin Phelps


CS 362-400 Project - Part A


1) Explain testIsValid Function of URLValidatorCorrect test code.
First it sees if the URLValidator works on two hardcoded correct URLs.  Then it will build a URL from five pieces drawn from five different supplied lists.  It then takes the pieces “valid” booleans and  ANDs them together to determine whether the whole URL is valid or not (the whole URL is only valid if and only if all of its pieces are valid).  Then it has URLValidator determine whether the URL is valid or not and it compares that result to the expected result.  If they match, great.  If not, then URLValidator has a bug in it.  It then prints out this match or mismatch according to some parameters that were set.  Finally, it “increments” the testObjects array and does this test on the URL.


2) Give how many total number of urls it is testing. 
The program is testing 31919 different combinations of URLs constructed from the parts listed in the ResultPair[]s. This result was obtained by placing an incrementing count in the do-while loop in the testIsValid() method. There also appear to be 2 hardcoded URLs it tests initially “http://www.google.com” and “http://www.google.com/”. This gives a total of 31921 total tested URLs. 


3) Also, explain how it is building all the urls. 
URLs are being built from lists of parts, some valid and some invalid, including scheme, authority (domain name or IP address), port, path, and query. Each part is used, in the order listed in the construction of the URL. For each part, there is an empty string option to represent the case that the part is absent.


4) Give an example of valid url being tested and an invalid url being tested by testIsValid() method.
An example of a valid URL being tested is:
“http://go.com:80/test1?action=view”
Each of the 5 parts in this URL (scheme, authority, port, path, and query) are valid which makes the entire URL valid.


An example of an invalid URL being testing is:
“3ht://go.cc:65535/test1/file?action=edit&mode=up”
In this example the invalid part is the “3ht://” from the testUrlScheme ResultPair[]. Each of the other 4 parts in this example are valid, but the one invalid part makes the entire URL invalid.


5) Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines.


The concept behind testIsValid() is very similar to what each of us implemented as our Dominion card test cases. When designing the dominion tests, some group members just tested edge and corner cases, while one implemented several arrays of “parts” which were combined similarly to the way that testIsValid() builds URLs. One difference is that this test dynamically determines whether a URL is valid independent of the IsValid() function and then test whether the results are consistent.