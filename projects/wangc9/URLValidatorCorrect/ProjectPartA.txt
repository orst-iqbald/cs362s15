CS 362 Project Part A
Team 8 - Chunyu Wang, Justin Jones, Jason MacManiman

1. Explain testIsValid Function of UrlValidator test code. 

There are two testIsValid() functions inside the UrlValidatorTest class. So, the testIsValid() function is overloaded with two separate definitions. 

The first testIsValid() function has no arguments, and does only two things: First, it sets the inputs to predefined variables and then calls the overloaded version of testIsValid().  Then, it calls the setUp() method that initializes the testPartsIndex index with 0 values.

The second testIsValid() function accepts two arguments: One is an Object array of the test URL parts as arguments, and the other is a long with UrlValidator constructor options. The array of objects, in this case called testUrlParts, has in it an array of 5 ResultPair[] object arrays, namely: testUrlScheme, testUrlAuthority, testUrlPort, testUrlPath and testUrlQuery. Each array stores ResultPair objects that are comprised of a string, and a boolean value "true" or "false" indicating whether the string is valid or not. The second parameter, is the long option. There are three options accepted by URLValidator: ALLOW_@_SLASHES,  NO_FRAGMENTS, and ALLOW_ALL_SCHEMES. In this case, ALLOW_ALL_SCHEMES is the option parameter passed into the URLValidator object. ALLOW_ALL_SCHEMES means any scheme passes validation, so that all scheme permutations will be considered valid when tested.

The second testIsValid() function starts with a line of code to instantiate an new object urlVal of type UrlValidator. This newly created object will later be used in the isValid function as a comparison to see whether isValid works or not. Next, there are two preliminary assertions in order to guarantee that the isValid() function is still working properly. If either of these fail, the method will not be able to output valid results and the process will abort. Next, there are some print variables to make sure it is nicely formatted when printing. A total of six or sixty of these results can be printed per line, depending on a user setting. 

Next, a testBuffer of type StringBuffer is created to hold the URL that is currently being built. Then, each iteration of the “do-while” loop assembles a single permutation of the aforementioned testUrlParts and puts it into testBuffer. These URL parts include scheme, authority, port, path, and query, and note that each of these parts is an array of ResultPairs. This buffer is then converted into a string, to allow it to be passed to the isValid() function. Before performing the isValid() test on the created URL, it uses the ResultPair’s valid variable values to determine what the expected value of isValid() should be. Note that all the valid variables of each ResultPair used to make the URL must be true for the expected value to be true, otherwise the value we expect isValid() to return is false. This is done with a logical AND of the boolean value in each URL part. It then performs the isValid() function on the Url and asserts that the returned result is equal to the expected value.

The arrays testPartsIndex and testUrlParts are sent to incrementTestPartsIndex() function, which checks the current values of testPartsIndex and the number of Result Pairs in testUrlParts to determine how it should next increment testPartsIndex. If it has already gone through all permutations, then it will return false, otherwise it will return true so that another iteration of the aforementioned do-while loop is gone through. In this way, every combination of testUrlParts is tested.

It might also be noted that there are additional printing options currently disabled that print a ‘.’ for results that equal expected and an X for those that don’t. Enabling these options are controlled by private boolean variables within the UrlValidatorTest class, but they are currently set to false. Instead, the assertions are used to make sure all tests are passed.

The setUp() function then resets testPartsIndex[] so it will be properly initialized to all 0’s for future calls to the test function.


2. Give how many total number of urls it is testing.

testUrlScheme: 9 ResultPairs; HOWEVER, note that the test does not check the last scheme (empty string "") but rather skips over it so it is only testing the first 8.
testUrlAuthority: 19
testUrlPort: 7
testPath: 10
testUrlQuery: 3

In order to figure out the number of Urls this is testing we note that there are 9 choices for the first Url Part, 19 for the second, 7 for the third, 10 for the fourth and 3 for the fifth. We can simply multiply this together in order to get the total number of Urls tests. Therefore:

# of Urls Tested = (9-1) * 19 * 7 * 10 * 3 = 31,920

It is also worth noting that before the combinations of testUrParts is put together, two hardcoded Urls are also tested. One of these is included in the 31,920 count but the following additional url is not included in the count and is not a duplicate:

http://www.google.com/


3. Explain how it is building all the urls. 

It builds the URLs by incrementally adding each ResultPair to gain all possible permutations across testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery.  By permutating through all the arrays of url parts and their associated truth values (as discussed above in #1), the function builds every URL, which is made of the 5 url sections. It creates expected true or false values for the URLs based on the items from each part.

A testBuffer is created to hold the URL currently being validated. Upon creation, it then enters a loop that appends all of the necessary pieces of the URL into the buffer. There are five hard coded ResultPair arrays representing the various parts of a URL.  These are testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery.  These arrays are used to compose the testUrlParts Object array.  Each of these sections has an array at the bottom of the file that the function pulls from. This Object array is passed to the testIsValid method for processing into the various permutations of possible URLs made up of each of the five parts.  Each of these permutations is tested by the UrlValidator.isValid method, and asserted as either true or false as expected by the valid attribute of each ResultPair.  Each appended slice has an associated binary true or false value.  The expected value is set by performing a logical bitwise AND assignment (&=) to clarify the expected outcome, so that if any URL ResultPair part has a valid attribute of false, the entire URL becomes false.  As long as all URL parts are true, then the total URL remains true.


4. Give an example of valid url being tested and an invalid url being tested by testIsValid() method.  

http://www.google.com:80/test1?action=view

For all the parts of this URL, the valid attribute of the ResultPair is set to true.  So complete URL is valid.  

http://www.google.com:80/..?action=view

In this URL, the testUrlPathOptions ResultPair part has a valid attribute that is set to false.  As a result, the logical AND operation of the valid attributes of the entire URL becomes false, which is the expected result.  


5. Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 

The concepts are similar, but the complexity is much more involved in the URL validator test. Conceptually, we are still manually finding values to test against, but those values are no longer integers. Instead, they are more complex Urls, which have been broken down into five parts, and the rules that must be tested within each of these parts are more complex. Additionally, the iteration through every permutation of the Url parts provides an additional complexity, but this is minor in comparison to the complexity of the Urls we are testing. That is what makes this a much more complex test.

6. Also note that upon running the class a bug was found by the testValidator288() function which has not yet fixed. The following statement is failing: 

        assertFalse("broke.hostname should not validate",
                validator.isValid("http://broke.hostname/test/index.html"));

This appears to be a yet unresolved bug.
