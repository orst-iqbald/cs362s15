Smithy - When played, the smithy card simply uses a for loop to draw the top three cards from the players deck
and add them to their hand. It then calls the discardCard() function to discard the smithy card from the
players hand.

Adventurer - When the adventurer card is played, it reveals cards from the players deck until 2 treasure cards
are revealed. It then adds those cards to the players hand and discards all other revealed cards. 

In the cardEffect() function this is accomplished by first using a while loop to go through the players deck 
one card at a time, incrementing a variable called treasuredrawn if the card is a treasure card. If the drawn
card is not a treasure card, it is added to a temphand and a variable, z, is incremented. The while
loop will continue until this variable reaches 2. During this process, if the players deckCount reaches
zero, a call to shuffle() is made on the players discard to shuffle a new deck to drawn from.

Once the first while loop terminates, a 2nd while loop is called that uses the z variable and the 
temphand[] array to discard all non-treasure cards that were drawn during the process.

discardCard() - The discardCard() function takes four paramters, (int handPos, int currentPlayer, 
struct gameState *state, int trashFlag) and returns 0 when it runs successfully. The first conditional if
statement checks to see if the card being discarded is being trashed. If the flag is 1, the card is trashed,
if it is zero, it is being played. It then sets the played cards hand position to -1 and passes it into
another set of conditionals to determine if it is the last card in the players hand and then removes the
card from the hand before returning.

updateCoins() - The updateCoins() function takes three parameters, (int player, struct gameState *state, int bonus)
and returns 0 when it runs successfully. It initializes state->coins to 0 and then using a for loop to go through
all cards in current players hand, it adds and appropriate number of coins for each treasure card (1 for copper,
2 for silver, 3 for gold). After summing these values it adds any applicable bonus (parameter 3) before returning.