For the inputChar() function, I implemented a single line that would return a pseudo-random character between 32 and 125.
I chose these values because 32 is the value for ' ' and 125 is the value for '}'. All other values necessary to
progress through the first nine conditional statements fall between these two values, so eventually the state will
always be progressed to the point of reaching the string.

For the inputString() function, I initially did this by creating a pointer to a character array and allocating enough
memory for 6 characters. I then used a for loop to fill the first 5 elements of the array with random characters between
101('e') and 116('t'). I chose these values because all of the letters in the word "reset" fell between these two
characters. While using this method did eventually reach the "error" message, it took 526582 iterations. I then commented
out that method and added a static array containing all the letters in the word "reset" and had the for loop instead 
pull a random letter from the array for each element. This method, while still random, produced the error message
in far fewer iterations.