        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*****************************
        -:    2: * Card Test for Cutpurse
        -:    3: ***************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        1:   12:int main (){
        -:   13:	int i;
        -:   14:	struct gameState G;
        -:   15:	int p, r;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   17:
        1:   18:	r = initializeGame(2, k, 1000, &G);
        -:   19:	
        1:   20:	printf("Testing cutpurse...\n");
        -:   21:
        -:   22:	//Test coins += 2
        1:   23:	G.coins = 2;
        1:   24:	p = playCutpurse(&G, 1, 1);
        -:   25:	//assert(G.coins == 4);
        1:   26:	printf("Bug: coins don't increase\n");	
        -:   27:
        -:   28:	//Test P1 hand - 1 when full of gold
        -:   29:	int golds[5];
        6:   30:	for (i = 0; i < 5; i++){
        5:   31:		golds[i] = gold;
        -:   32:	}
        1:   33:	memcpy(G.hand[2], golds, sizeof(int)*5);
        1:   34:	p = playCutpurse(&G,1,1);
        -:   35:	//assert(G.handCount[2] == 4);
        1:   36:	printf("Bug:Player 2 hand count is incorrect\n");
        -:   37:
        -:   38:
        -:   39:	//Test P1 hand == 5 when full of copper
        -:   40:	int coppers[5];
        6:   41:	for ( i = 0; i < 5; i++){
        5:   42:		coppers[i] = copper;
        -:   43:	}
        1:   44:	memcpy(G.hand[2], coppers, sizeof(int)*5);
        1:   45:	p = playCutpurse(&G,1,1);
        -:   46:	//assert(G.handCount[2] == 5);
        1:   47:	printf("Bug: p2 hand size is incorrect\n");
        -:   48:
        1:   49:	return 0;
        -:   50:}
