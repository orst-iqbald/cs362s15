Ian Taylor
04/12/2015
CS 362 Software Engr 2

-- REFACTOR & BUGS DOCUMENTATION FOR ASSIGNMENT 2 --

I refactored the following cards to work as standalone functions: 

1) smithy:      int smithyCard(struct gameState *state, int currentPlayer, int handPos)

2) adventurer:  int adventurerCard(struct gameState *state, int currentPlayer, int handPos, int drawntreasure, int cardDrawn, int temphand[], int z)

3) village:     int villageCard(struct gameState *state, int currentPlayer, int handPos)

4) great_hall:  int great_hallCard(struct gameState *state, int currentPlayer, int handPos)

5) mine:        int mineCard(struct gameState *state, int currentPlayer, int handPos, int i, int j, int choice1, int choice2)

These prototypes were added at the end of dominion.h, and were implemented at the end of dominion.c. 

To refactor these functions, I removed their implementations from the switch statement in cardEffect() and declared the functions at the end of the function. However, the switch statement calls these functions when the correct case appears. 



-- BUGS INTRODUCED --

1) smithy: first parameter in call to drawCard() changed from currentPlayer to handPos. This causes the smithy card to work for the wrong player.

2) adventurer: first if statement changed: less than condition changed from if (state->deckCount[currentPlayer] < 1) to if (state->deckCount[currentPlayer] < 0). This will prevent the deck from shuffling. changed final while loop from while(z-1>=0) to while(z>=0). This should cause an extra card to be discarded. 

3) village: i increased the number of availble actions, and i set the trashFlag in the discardCard() function.

4) great_hall: i increased the number of available actions to 2, making this card effectively a duplicate of the village card. i changed the comments as well to make the bug harder to find. this bug is meant to be a "rule" error for the game, and correcting it will hopefully require thorough knowledge of the cards. 

5) mine: changed second if statement from if (choice2 > treasure_map || choice2 < curse) to if (choice2 > treasure_map || choice2 < mine). This make the condition more restrictive, which will prevent the user from choosing certain cards. gaincard() now receives choice1 instead of choice2, meaning the user should get the original card, not the new one.    